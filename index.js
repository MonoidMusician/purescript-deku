// Generated by purs bundle 0.14.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];          
  var map = function (dict) {
      return dict.map;
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative.Indexed"] = $PS["Control.Applicative.Indexed"] || {};
  var exports = $PS["Control.Applicative.Indexed"];
  var ipure = function (dict) {
      return dict.ipure;
  };
  exports["ipure"] = ipure;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply.Indexed"] = $PS["Control.Apply.Indexed"] || {};
  var exports = $PS["Control.Apply.Indexed"];                            
  var iapply = function (dict) {
      return dict.iapply;
  };
  exports["iapply"] = iapply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Comonad"] = $PS["Control.Comonad"] || {};
  var exports = $PS["Control.Comonad"];                  
  var extract = function (dict) {
      return dict.extract;
  };
  exports["extract"] = extract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";                                                                                      

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqRowNil = {
      eqRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return true;
              };
          };
      }
  };
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return {
              eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return {
          eq: $foreign.eqArrayImpl(eq(dictEq))
      };
  };
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return {
                      eqRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return eq(dictEq)(get(ra))(get(rb)) && tail;
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof LT && v1 instanceof LT) {
                  return true;
              };
              if (v instanceof GT && v1 instanceof GT) {
                  return true;
              };
              if (v instanceof EQ && v1 instanceof EQ) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordRecordNil = {
      compareRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return Data_Ordering.EQ.value;
              };
          };
      },
      EqRecord0: function () {
          return Data_Eq.eqRowNil;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return {
              compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
              Eq0: function () {
                  return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
              }
          };
      };
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var ordArray = function (dictOrd) {
      return {
          compare: (function () {
              var toDelta = function (x) {
                  return function (y) {
                      var v = compare(dictOrd)(x)(y);
                      if (v instanceof Data_Ordering.EQ) {
                          return 0;
                      };
                      if (v instanceof Data_Ordering.LT) {
                          return 1;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return -1 | 0;
                      };
                      throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [ v.constructor.name ]);
                  };
              };
              return function (xs) {
                  return function (ys) {
                      return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
                  };
              };
          })(),
          Eq0: function () {
              return Data_Eq.eqArray(dictOrd.Eq0());
          }
      };
  };
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return {
                      compareRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                                  var $58 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                                  if ($58) {
                                      return left;
                                  };
                                  return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              };
                          };
                      },
                      EqRecord0: function () {
                          return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                      }
                  };
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordArray"] = ordArray;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  var ordMaybe = function (dictOrd) {
      return {
          compare: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return Data_Ordering.EQ.value;
                  };
                  if (x instanceof Nothing) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Nothing) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [ x.constructor.name, y.constructor.name ]);
              };
          },
          Eq0: function () {
              return eqMaybe(dictOrd.Eq0());
          }
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["deleteBy"] = deleteBy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["hush"] = hush;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  exports["filterMap"] = filterMap;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var fst = function (v) {
      return v.value0;
  };
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (x) {
                  return function (y) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
              }
          };
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (x) {
                  return function (y) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
              },
              Eq0: function () {
                  return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var functorMap = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Leaf) {
                  return Leaf.value;
              };
              if (v1 instanceof Two) {
                  return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
              };
              if (v1 instanceof Three) {
                  return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (m1) {
                  return function (m2) {
                      return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
                  };
              }
          };
      };
  };
  var ordMap = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (m1) {
                  return function (m2) {
                      return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
                  };
              },
              Eq0: function () {
                  return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $777 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($778) {
                                  return Data_Maybe.Just.create($777($778));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["toUnfoldable"] = toUnfoldable;
  exports["keys"] = keys;
  exports["union"] = union;
  exports["eqMap"] = eqMap;
  exports["ordMap"] = ordMap;
  exports["functorMap"] = functorMap;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  exports["unwrap"] = unwrap;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };                  
  var foldableSet = {
      foldMap: function (dictMonoid) {
          return function (f) {
              var $68 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
              return function ($69) {
                  return $68(toList($69));
              };
          };
      },
      foldl: function (f) {
          return function (x) {
              var $70 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
              return function ($71) {
                  return $70(toList($71));
              };
          };
      },
      foldr: function (f) {
          return function (x) {
              var $72 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
              return function ($73) {
                  return $72(toList($73));
              };
          };
      }
  };
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["union"] = union;
  exports["foldableSet"] = foldableSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Variant.Internal"] = $PS["Data.Variant.Internal"] || {};
  var exports = $PS["Data.Variant.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var variantTagsNil = {
      variantTags: function (v) {
          return Data_List_Types.Nil.value;
      }
  };
  var variantTags = function (dict) {
      return dict.variantTags;
  };
  var variantTagsCons = function (dictVariantTags) {
      return function (dictIsSymbol) {
          return {
              variantTags: function (v) {
                  return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value), variantTags(dictVariantTags)(Type_Proxy["Proxy"].value));
              }
          };
      };
  };   
  var impossible = function (str) {
      return Partial_Unsafe.unsafeCrashWith("Data.Variant: impossible `" + (str + "`"));
  };
  var lookup = function (name) {
      return function (tag) {
          var go = function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1) {
                      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                          if (v.value0 === tag) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (Data_Boolean.otherwise) {
                              $tco_var_v = v.value1;
                              $copy_v1 = v1.value1;
                              return;
                          };
                      };
                      $tco_done = true;
                      return impossible(name);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
          return go;
      };
  };
  var lookupEq = function (tags) {
      return function (eqs) {
          return function (v) {
              return function (v1) {
                  if (v.type === v1.type) {
                      return lookup("eq")(v.type)(tags)(eqs)(v.value)(v1.value);
                  };
                  if (Data_Boolean.otherwise) {
                      return false;
                  };
                  throw new Error("Failed pattern match at Data.Variant.Internal (line 96, column 1 - line 101, column 12): " + [ tags.constructor.name, eqs.constructor.name, v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var lookupOrd = function (tags) {
      return function (ords) {
          return function (v) {
              return function (v1) {
                  var v3 = Data_Ord.compare(Data_Ord.ordString)(v.type)(v1.type);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return lookup("compare")(v.type)(tags)(ords)(v.value)(v1.value);
                  };
                  return v3;
              };
          };
      };
  };
  exports["variantTags"] = variantTags;
  exports["lookupEq"] = lookupEq;
  exports["lookupOrd"] = lookupOrd;
  exports["variantTagsNil"] = variantTagsNil;
  exports["variantTagsCons"] = variantTagsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Variant_Internal = $PS["Data.Variant.Internal"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var variantOrds = function (dict) {
      return dict.variantOrds;
  };
  var variantEqs = function (dict) {
      return dict.variantEqs;
  };
  var ordVariantNil = {
      variantOrds: function (v) {
          return Data_List_Types.Nil.value;
      }
  };
  var ordVariantCons = function (dictVariantOrds) {
      return function (dictOrd) {
          return {
              variantOrds: function (v) {
                  return new Data_List_Types.Cons(Data_Ord.compare(dictOrd), variantOrds(dictVariantOrds)(Type_Proxy["Proxy"].value));
              }
          };
      };
  };
  var onMatch = function (dictRowToList) {
      return function (dictVariantMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var on = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (f) {
                  return function (g) {
                      return function (r) {
                          if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                              return f(r.value);
                          };
                          return g(r);
                      };
                  };
              };
          };
      };
  };
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  var eqVariantNil = {
      variantEqs: function (v) {
          return Data_List_Types.Nil.value;
      }
  };
  var eqVariantCons = function (dictVariantEqs) {
      return function (dictEq) {
          return {
              variantEqs: function (v) {
                  return new Data_List_Types.Cons(Data_Eq.eq(dictEq), variantEqs(dictVariantEqs)(Type_Proxy["Proxy"].value));
              }
          };
      };
  };
  var eqVariant = function (dictRowToList) {
      return function (dictVariantTags) {
          return function (dictVariantEqs) {
              return {
                  eq: function (v1) {
                      return function (v2) {
                          var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                          var eqs = variantEqs(dictVariantEqs)(Type_Proxy["Proxy"].value);
                          return Data_Variant_Internal.lookupEq(tags)(eqs)(v1)(v2);
                      };
                  }
              };
          };
      };
  };
  var ordVariant = function (dictRowToList) {
      return function (dictVariantTags) {
          return function (dictVariantEqs) {
              return function (dictVariantOrds) {
                  return {
                      compare: function (v1) {
                          return function (v2) {
                              var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                              var ords = variantOrds(dictVariantOrds)(Type_Proxy["Proxy"].value);
                              return Data_Variant_Internal.lookupOrd(tags)(ords)(v1)(v2);
                          };
                      },
                      Eq0: function () {
                          return eqVariant()(dictVariantTags)(dictVariantEqs);
                      }
                  };
              };
          };
      };
  };
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
  };
  var match = function (dictRowToList) {
      return function (dictVariantMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["on"] = on;
  exports["match"] = match;
  exports["eqVariantNil"] = eqVariantNil;
  exports["eqVariantCons"] = eqVariantCons;
  exports["eqVariant"] = eqVariant;
  exports["ordVariantNil"] = ordVariantNil;
  exports["ordVariantCons"] = ordVariantCons;
  exports["ordVariant"] = ordVariant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Types"] = $PS["Deku.Control.Types"] || {};
  var exports = $PS["Deku.Control.Types"];
  var Scene = function (x) {
      return x;
  };
  var DOM = function (x) {
      return x;
  };
  var unsafeUnDOM = function (v) {
      return {
          context: v.context,
          value: v.value
      };
  };
  var unsafeDOM = DOM;
  var unFrame = function (dict) {
      return dict.unFrame;
  };
  var oneSubFrame = function (v) {
      return v;
  };
  var oneFrame = function (v) {
      return v;
  };
  var isSceneScene = {
      getFrame: oneFrame,
      unFrame: Scene
  };
  var getFrame = function (dict) {
      return dict.getFrame;
  };
  var functorDOM = {
      map: function (f) {
          return function (m) {
              return {
                  value: f(m.value),
                  context: m.context
              };
          };
      }
  };
  var extendDOM = {
      extend: function (f) {
          return function (v) {
              return {
                  context: v.context,
                  value: f(v)
              };
          };
      },
      Functor0: function () {
          return functorDOM;
      }
  };
  var comonadDOM = {
      extract: function (v) {
          return v.value;
      },
      Extend0: function () {
          return extendDOM;
      }
  };
  exports["oneFrame"] = oneFrame;
  exports["oneSubFrame"] = oneSubFrame;
  exports["unsafeUnDOM"] = unsafeUnDOM;
  exports["unsafeDOM"] = unsafeDOM;
  exports["getFrame"] = getFrame;
  exports["unFrame"] = unFrame;
  exports["functorDOM"] = functorDOM;
  exports["comonadDOM"] = comonadDOM;
  exports["isSceneScene"] = isSceneScene;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Graph.Attribute"] = $PS["Deku.Graph.Attribute"] || {};
  var exports = $PS["Deku.Graph.Attribute"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Variant = $PS["Data.Variant"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Attribute = function (x) {
      return x;
  };
  var unsafeUnAttribute = function (v) {
      return v;
  };
  var unsafeAttribute = Attribute;
  var prop = Data_Variant.inj()({
      reflectSymbol: function () {
          return "prop";
      }
  })(Type_Proxy["Proxy"].value);
  var eqCb = {
      eq: function (v) {
          return function (v1) {
              return false;
          };
      }
  };
  var ordCb = {
      compare: function (v) {
          return function (v1) {
              return Data_Ordering.LT.value;
          };
      },
      Eq0: function () {
          return eqCb;
      }
  };
  var cb = Data_Variant.inj()({
      reflectSymbol: function () {
          return "cb";
      }
  })(Type_Proxy["Proxy"].value);
  exports["unsafeUnAttribute"] = unsafeUnAttribute;
  exports["unsafeAttribute"] = unsafeAttribute;
  exports["prop"] = prop;
  exports["cb"] = cb;
  exports["eqCb"] = eqCb;
  exports["ordCb"] = ordCb;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };

  var connectXToY = function (calledExternally) {
	  return function (x) {
		  return function (y) {
			  return function (stateX) {
				  return function (stateY) {
					  return function () {
						  // if (
						  // 	calledExternally &&
						  // 	(stateY.units[y].isSubgraph || stateY.units[y].isTumult)
						  // ) {
						  // 	return;
						  // }
						  stateY.units[y].main.appendChild(stateX.units[x].main);
						  stateX.units[x].outgoing.push({ unit: y, state: stateY });
						  stateY.units[y].incoming.push({ unit: x, state: stateX });
					  };
				  };
			  };
		  };
	  };
  };
  var connectXToY_ = function (x) {
	  return function (state) {
		  return connectXToY(true)(x.fromId)(x.toId)(state)(state);
	  };
  };
  exports.connectXToY_ = connectXToY_;
  var disconnectXFromY = function (calledExternally) {
	  return function (x) {
		  return function (y) {
			  return function (stateX) {
				  return function (stateY) {
					  return function () {
						  // if (
						  // 	calledExternally &&
						  // 	(stateY.units[y].isSubgraph || stateY.units[y].isTumult)
						  // ) {
						  // 	return;
						  // }
						  stateY.units[y].main.removeChild(stateX.units[x].main);
						  stateX.units[x].outgoing = stateX.units[x].outgoing.filter(
							  function (i) {
								  return !(i.unit === y && i.state.unqidfr === stateY.unqidfr);
							  }
						  );
						  stateY.units[y].incoming = stateY.units[y].incoming.filter(
							  function (i) {
								  return !(i.unit === x && i.state.unqidfr === stateX.unqidfr);
							  }
						  );
					  };
				  };
			  };
		  };
	  };
  };
  exports.disconnectXFromY_ = function (x) {
	  return function (state) {
		  return disconnectXFromY(true)(x.fromId)(x.toId)(state)(state);
	  };
  };
  exports.destroyUnit_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  delete state.units[ptr];
		  };
	  };
  };
  exports.renderDOM = function (arrayToApply) {
	  return function () {
		  for (var i = 0; i < arrayToApply.length; i++) {
			  arrayToApply[i]();
		  }
	  };
  };
  exports.makeElement_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  listeners: {},
				  main: document.createElement(a.tag),
			  };
			  for (var i = 0; i < a.attributes.length; i++) {
				  if (a.attributes[i].value.type === "cb") {
					  var atty = a.attributes[i];
					  var el = (e) => atty.value.value(e)();
					  state.units[ptr].main.addEventListener(atty.key, el);
					  state.units[ptr].listeners[a.attributes[i].key] = el;
				  } else {
					  state.units[ptr].main.setAttribute(
						  a.attributes[i].key,
						  a.attributes[i].value.value
					  );
				  }
			  }
		  };
	  };
  };
  exports.makeText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: document.createElement("span"),
			  };
			  state.units[ptr].main.setAttribute("style", "white-space: pre;");
			  state.units[ptr].main.innerHTML = a.text.
				   replace(/\n/g, "<br>")
				  .replace(/ /g, "&nbsp;");
		  };
	  };
  };
  exports.makeFFIDOMSnapshot = function () {
	  return {
		  units: {},
		  unqidfr: makeid(10),
	  };
  };
  exports.setAttribute_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var avv = a.value.value;
			  if (a.value.type === "cb") {
				  if (state.units[ptr].listeners[a.key]) {
					  state.units[ptr].main.removeEventListener(
						  a.key,
						  state.units[ptr].listeners[a.key]
					  );
				  }
				  var el = (e) => avv(e)();
				  state.units[ptr].main.addEventListener(a.key, el);
				  state.units[ptr].listeners[a.key] = el;
			  } else {
				  state.units[ptr].main.setAttribute(a.key, avv);
			  }
		  };
	  };
  };
  exports.setText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr].main.innerHTML = a.text.
				   replace(/\n/g, "<br>")
				  .replace(/ /g, "&nbsp;");
		  };
	  };
  };
  var doSortingOnSubgraphs = function (unit, sorting) {
	  for (var i = 0; i < sorting.length; i++) {
		  unit.main.insertBefore(
			  unit.children[sorting[i][0]].units[unit.terminalPtr].main,
			  unit.main.firstChild
		  );
	  }
  };
  exports.makeSubgraph_ = function (ptr) {
	  return function (terminalPtr) {
		  return function (sceneM) {
			  return function (envs) {
				  return function (funkyFx) {
					  return function (state) {
						  return function () {
							  var children = {};
							  var scenes = {};
							  var funk = {};
							  var unsu = {};
							  state.units[ptr] = {
								  outgoing: [],
								  incoming: [],
								  sceneM: sceneM,
								  main: document.createElement("div"),
								  funkyFx: funkyFx,
								  terminalPtr: terminalPtr,
								  isSubgraph: true,
								  scenes: scenes,
								  children: children,
								  funk: funk,
								  unsu: unsu,
							  };
							  state.units[ptr].main.setAttribute("style", "display:contents;");
							  setSubgraph_(ptr)(envs)(state)();
						  };
					  };
				  };
			  };
		  };
	  };
  };
  exports.makeTumult_ = function (ptr) {
	  return function (terminalPtr) {
		  return function (scenes) {
			  return function (nothing) {
				  return function (just) {
					  return function (arrMaker) {
						  return function (state) {
							  return function () {
								  state.units[ptr] = {
									  outgoing: [],
									  incoming: [],
									  main: document.createElement("div"),
									  isTumult: true,
									  terminalPtr: terminalPtr,
									  children: {},
									  scenes: {},
								  };
								  state.units[ptr].main.setAttribute(
									  "style",
									  "display:contents;"
								  );
								  setTumult_(ptr)(terminalPtr)(scenes)(nothing)(just)(arrMaker)(
									  state
								  )();
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  var setTumult_ = function (ptr) {
	  return function (terminalPtr) {
		  return function (newScenes) {
			  return function (nothing) {
				  return function (just) {
					  return function (arrMaker) {
						  return function (state) {
							  return function () {
								  var scenes = state.units[ptr].scenes;
								  var children = state.units[ptr].children;
								  var needsConnecting = [];
								  var newScenesAsObj = {};
								  var preserved = [];
								  for (var i = 0; i < newScenes.length; i++) {
									  var j = newScenes[i].pos;
									  if (newScenes[i].instructions !== null) {
										  newScenesAsObj[j] = newScenes[i].instructions;
									  }
									  if (
										  newScenes[i].instructions === null &&
										  scenes[j] === undefined
									  ) {
									  } else if (
										  newScenes[i].instructions !== null &&
										  scenes[j] !== undefined
									  ) {
										  preserved.push(j);
									  } else if (
										  newScenes[i].instructions !== null &&
										  scenes[j] === undefined
									  ) {
										  children[j] = {
											  units: {},
											  unqidfr: makeid(10),
											  parent: state,
										  };
										  scenes[j] = newScenes[i].instructions;
										  needsConnecting.push(j);
									  } else {
										  disconnectXFromY(false)(state.units[ptr].terminalPtr)(ptr)(
											  children[j]
										  )(state)();
										  // delete unused
										  delete scenes[j];
										  delete children[j];
									  }
								  }
								  for (var i = 0; i < newScenes.length; i++) {
									  if (newScenes[i].instructions === null) {
										  continue;
									  }
									  var oldScene =
										  // if it does not need connecting
										  needsConnecting.indexOf(newScenes[i].pos) === -1
											  ? // then we use the scene as the old scene
											    just(scenes[newScenes[i].pos])
											  : // otherwise we use nothing
											    nothing;
									  var curScene = arrMaker(newScenes[i].instructions)(oldScene);
									  for (var j = 0; j < curScene.length; j++) {
										  // thunk
										  curScene[j](children[newScenes[i].pos])();
									  }
								  }
								  state.units[ptr].scenes = newScenesAsObj;
								  // todo - add this logic to subgraph
								  var heads = {};
								  for (var m = 0; m < preserved.length; m++) {
									  var i = preserved[m];
									  heads[i] = children[i].units[terminalPtr];
									  if (state.units[ptr].heads[i] !== heads[i]) {
										  var tmp = { units: {} };
										  tmp.units[terminalPtr] = state.units[ptr].heads[i];
										  disconnectXFromY(false)(terminalPtr)(ptr)(tmp)(state)();
										  connectXToY(false)(terminalPtr)(ptr)(children[i])(state)();
									  }
								  }
								  for (var i = 0; i < needsConnecting.length; i++) {
									  var j = needsConnecting[i];
									  connectXToY(false)(terminalPtr)(ptr)(children[j])(state)();
									  heads[j] = children[j].units[terminalPtr];
								  }
								  state.units[ptr].heads = heads;
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  exports.setTumult_ = setTumult_;
  var setSubgraph_ = function (ptr) {
	  return function (envs) {
		  return function (state) {
			  return function () {
				  var scenes = state.units[ptr].scenes;
				  var children = state.units[ptr].children;
				  var funk = state.units[ptr].funk;
				  var unsu = state.units[ptr].unsu;
				  var needsConnecting = [];
				  for (var i = 0; i < envs.length; i++) {
					  var j = envs[i].pos;
					  if (envs[i].env === null && scenes[j] === undefined) {
					  } else if (envs[i].env !== null && scenes[j] !== undefined) {
					  } else if (envs[i].env !== null && scenes[j] === undefined) {
						  children[j] = {
							  units: {},
							  unqidfr: makeid(10),
							  parent: state,
						  };
						  scenes[j] = state.units[ptr].sceneM(j);
						  var funkworthy = state.units[ptr].funkyFx(j)();
						  funk[j] = funkworthy.loop;
						  unsu[j] = funkworthy.unsubscribe;
						  needsConnecting.push(j);
					  } else {
						  disconnectXFromY(false)(state.units[ptr].terminalPtr)(ptr)(
							  children[j]
						  )(state)();
						  // unsubscribe
						  unsu[j]();
						  // delete unused
						  delete scenes[j];
						  delete children[j];
						  delete funk[j];
						  delete unsu[j];
					  }
				  }
				  var sortable = [];
				  var needsSorting = false;
				  for (var m = 0; m < envs.length; m++) {
					  if (envs[m].env === null) {
						  continue;
					  }
					  var i = envs[m].pos;
					  var applied = funk[i](envs[m].env)(scenes[i]);
					  for (var j = 0; j < applied.instructions.length; j++) {
						  // thunk
						  applied.instructions[j](children[i])();
					  }
					  needsSorting = needsSorting || applied.forOrdering !== 0;
					  sortable.push([i, applied.forOrdering]);
					  scenes[i] = applied.nextScene;
				  }
				  if (needsSorting) {
					  sortable.sort((a, b) => b[1] - a[1]);
					  doSortingOnSubgraphs(state.units[ptr], sortable);
				  }
				  for (var i = 0; i < needsConnecting.length; i++) {
					  var j = needsConnecting[i];
					  connectXToY(false)(state.units[ptr].terminalPtr)(ptr)(children[j])(
						  state
					  )();
				  }
			  };
		  };
	  };
  };
  exports.setSubgraph_ = setSubgraph_;
  exports.massiveCreate_ = function ($unSubgraph) {
	  return function ($makeSubgraph) {
		  return function ($makeTumult) {
			  return function ($makeRoot) {
				  return function ($makeElement) {
					  return function ($makeText) {
						  return function (a) {
							  return function (state) {
								  return function () {
									  massiveCreateCreateStep_("")($unSubgraph)($makeSubgraph)(
										  $makeTumult
									  )($makeRoot)($makeElement)($makeText)(a)(state)();
									  massiveCreateConnectStep_("")(a)(state)();
								  };
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  var massiveCreateConnectStep_ = function ($prefix) {
	  return function (a) {
		  return function (state) {
			  return function () {
				  var entries = Object.entries(a.toCreate);
				  for (var i = 0; i < entries.length; i++) {
					  var children = Object.entries(entries[i][1].children);
					  for (var j = 0; j < children.length; j++) {
						  var fromId =
							  $prefix +
							  ($prefix === "" ? "" : ".") +
							  entries[i][0] +
							  "." +
							  children[j][0];
						  var toId = $prefix + ($prefix === "" ? "" : ".") + entries[i][0];
						  if (
							  state.units[fromId].isSubgraph ||
							  state.units[fromId].isTumult
						  ) {
							  // the connection has already occurred
							  //continue;
						  }
						  connectXToY_({
							  fromId: fromId,
							  toId: toId,
						  })(state)();
						  if (children[j][1].children !== {}) {
							  var toCreate = {};
							  toCreate[children[j][0]] = children[j][1];
							  massiveCreateConnectStep_(
								  $prefix + ($prefix === "" ? "" : ".") + entries[i][0]
							  )({
								  toCreate: toCreate,
							  })(state)();
						  }
					  }
				  }
			  };
		  };
	  };
  };
  var massiveCreateCreateStep_ = function ($prefix) {
	  return function ($unSubgraph) {
		  return function ($makeSubgraph) {
			  return function ($makeTumult) {
				  return function ($makeRoot) {
					  return function ($makeElement) {
						  return function ($makeText) {
							  return function (a) {
								  return function (state) {
									  return function () {
										  var entries = Object.entries(a.toCreate);
										  for (var i = 0; i < entries.length; i++) {
											  var key =
												  $prefix + ($prefix === "" ? "" : ".") + entries[i][0];
											  var value = entries[i][1];
											  if (value.element.element !== undefined) {
												  // it's a root
												  $makeRoot({ id: key, root: value.element.element })(
													  state
												  )();
											  } else if (value.element.tag !== undefined) {
												  // it's an element
												  $makeElement({
													  id: key,
													  tag: value.element.tag,
													  attributes: value.element.attributes,
												  })(state)();
											  } else if (value.element.text !== undefined) {
												  // it's an element
												  $makeText({
													  id: key,
													  text: value.element.text,
												  })(state)();
											  } else if (value.element.subgraphMaker !== undefined) {
												  // it's a subgraph
												  $makeSubgraph({
													  id: key,
													  terminus: value.element.terminus,
													  scenes: $unSubgraph(value.element.subgraphMaker),
													  envs: value.element.envs
												  })(state)();
											  } else if (value.element.tumult !== undefined) {
												  $makeTumult({
													  id: key,
													  instructions: value.element.tumult,
													  terminus: value.element.terminus,
												  })(state)();
											  } else {
												  throw new Error(
													  "Don't know how to handle " +
														  key +
														  " " +
														  Object.keys(value.element))
												   ;
											  }
											  massiveCreateCreateStep_(key)($unSubgraph)($makeSubgraph)(
												  $makeTumult
											  )($makeRoot)($makeElement)($makeText)({
												  toCreate: value.children,
											  })(state)();
										  }
									  };
								  };
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  exports.massiveChange_ = function ($setSubgraph) {
	  return function ($setAttribute) {
		  return function ($setText) {
			  return function ($setTumult) {
				  return function (a) {
					  return function (state) {
						  return function () {
							  var entries = Object.entries(a.toCreate);
							  for (var i = 0; i < entries.length; i++) {
								  var key = entries[i][0];
								  var value = entries[i][1];
								  if (value.element.element !== undefined) {
									  // it's a root, do nothing
								  } else if (value.element.tag !== undefined) {
									  // it's an element
									  for (var j = 0; j < value.element.attributes.length; j++) {
										  $setAttribute({
											  id: key,
											  key: value.element.attributes[j].key,
											  value: value.element.attributes[j].value,
										  })(state)();
									  }
								  } else if (value.element.text !== undefined) {
									  // it's an element
									  $setText({
										  id: key,
										  text: value.element.text,
									  })(state)();
								  } else if (value.element.envs !== undefined) {
									  // it's a subgraph
									  $setSubgraph({
										  id: key,
										  envs: value.element.envs,
									  })(state)();
								  } else if (value.element.tumult !== undefined) {
									  $setTumult({
										  id: key,
										  instructions: value.element.tumult,
									  })(state)();
								  } else {
									  throw new Error(
										  "Don't know how to handle " + key + " " + value)
									   ;
								  }
								  massiveChange_($changeSubgraph)($setAttribute)($setText)(
									  $setTumult
								  )({ toChange: value.children })(state)();
							  }
						  };
					  };
				  };
			  };
		  };
	  };
  };

  exports.makeRoot_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: a.root,
			  };
		  };
	  };
  };
})(PS["Deku.Interpret"] = PS["Deku.Interpret"] || {});
(function(exports) {
                                 

  exports._unsafeStringify = JSON.stringify;
})(PS["Simple.JSON"] = PS["Simple.JSON"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Simple.JSON"] = $PS["Simple.JSON"] || {};
  var exports = $PS["Simple.JSON"];
  var $foreign = $PS["Simple.JSON"];
  var Control_Category = $PS["Control.Category"];
  var writeImpl = function (dict) {
      return dict.writeImpl;
  };
  var writeJSON = function (dictWriteForeign) {
      var $93 = writeImpl(dictWriteForeign);
      return function ($94) {
          return $foreign["_unsafeStringify"]($93($94));
      };
  };
  var writeForeignForeign = {
      writeImpl: Control_Category.identity(Control_Category.categoryFn)
  };
  exports["writeJSON"] = writeJSON;
  exports["writeImpl"] = writeImpl;
  exports["writeForeignForeign"] = writeForeignForeign;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Rendered"] = $PS["Deku.Rendered"] || {};
  var exports = $PS["Deku.Rendered"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Data_Variant_Internal = $PS["Data.Variant.Internal"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Simple_JSON = $PS["Simple.JSON"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var ToCreate = function (x) {
      return x;
  };
  var Instruction = function (x) {
      return x;
  };
  var eqRootDOMElement = {
      eq: function (v) {
          return function (v1) {
              return true;
          };
      }
  };
  var ordRootDOMElement = {
      compare: function (v) {
          return function (v1) {
              return Data_Ordering.EQ.value;
          };
      },
      Eq0: function () {
          return eqRootDOMElement;
      }
  };
  var writeJSONToCreate = {
      writeImpl: function (v) {
          return Simple_JSON.writeImpl(Simple_JSON.writeForeignForeign)(v);
      }
  };
  var writeJSONToChange = {
      writeImpl: function (v) {
          return Simple_JSON.writeImpl(Simple_JSON.writeForeignForeign)(v);
      }
  };
  var showToCreate = {
      show: Simple_JSON.writeJSON(writeJSONToCreate)
  };
  var eqToCreate = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showToCreate))
  };
  var ordToCreate = {
      compare: Data_Function.on(Data_Ord.compare(Data_Ord.ordString))(Data_Show.show(showToCreate)),
      Eq0: function () {
          return eqToCreate;
      }
  };
  var showToChange = {
      show: Simple_JSON.writeJSON(writeJSONToChange)
  };
  var eqToChange = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showToChange))
  };
  var ordToChange = {
      compare: Data_Function.on(Data_Ord.compare(Data_Ord.ordString))(Data_Show.show(showToChange)),
      Eq0: function () {
          return eqToChange;
      }
  };
  var instructionWeight = function (v) {
      return Data_Variant.match()()()({
          disconnectXFromY: Data_Function["const"](0),
          destroyUnit: Data_Function["const"](1),
          makeRoot: Data_Function["const"](2),
          makeElement: Data_Function["const"](2),
          massiveCreate: Data_Function["const"](2),
          makeText: Data_Function["const"](2),
          makeSubgraph: Data_Function["const"](3),
          makeTumult: Data_Function["const"](4),
          connectXToY: Data_Function["const"](5),
          setAttribute: Data_Function["const"](6),
          massiveChange: Data_Function["const"](6),
          setText: Data_Function["const"](6),
          setSubgraph: Data_Function["const"](7),
          setTumult: Data_Function["const"](8)
      })(v);
  };
  var instructionId = function (v) {
      return Data_Variant.match()()()({
          disconnectXFromY: function ($50) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.fromId;
              })($50));
          },
          destroyUnit: function ($51) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($51));
          },
          makeElement: function ($52) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($52));
          },
          makeText: function ($53) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($53));
          },
          makeRoot: function ($54) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($54));
          },
          makeSubgraph: function ($55) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($55));
          },
          massiveCreate: Data_Function["const"](Data_Maybe.Nothing.value),
          makeTumult: function ($56) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($56));
          },
          connectXToY: function ($57) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.fromId;
              })($57));
          },
          setAttribute: function ($58) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($58));
          },
          setText: function ($59) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($59));
          },
          setSubgraph: function ($60) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($60));
          },
          massiveChange: Data_Function["const"](Data_Maybe.Nothing.value),
          setTumult: function ($61) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($61));
          }
      })(v);
  };   
  var iSetText = (function () {
      var $64 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "setText";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($65) {
          return Instruction($64($65));
      };
  })();
  var iSetAttribute = (function () {
      var $68 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "setAttribute";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($69) {
          return Instruction($68($69));
      };
  })();
  var iDisconnectXFromY = (function () {
      var $84 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "disconnectXFromY";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($85) {
          return Instruction($84($85));
      };
  })();
  var iDestroyUnit = (function () {
      var $86 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "destroyUnit";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($87) {
          return Instruction($86($87));
      };
  })();
  var iConnectXToY = (function () {
      var $88 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "connectXToY";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($89) {
          return Instruction($88($89));
      };
  })();
  var eqInstruction = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                  reflectSymbol: function () {
                      return "setTumult";
                  }
              }))({
                  reflectSymbol: function () {
                      return "setText";
                  }
              }))({
                  reflectSymbol: function () {
                      return "setSubgraph";
                  }
              }))({
                  reflectSymbol: function () {
                      return "setAttribute";
                  }
              }))({
                  reflectSymbol: function () {
                      return "massiveCreate";
                  }
              }))({
                  reflectSymbol: function () {
                      return "massiveChange";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeTumult";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeText";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeSubgraph";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeRoot";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeElement";
                  }
              }))({
                  reflectSymbol: function () {
                      return "disconnectXFromY";
                  }
              }))({
                  reflectSymbol: function () {
                      return "destroyUnit";
                  }
              }))({
                  reflectSymbol: function () {
                      return "connectXToY";
                  }
              }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "terminus";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "instructions";
                  }
              })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "text";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "value";
                  }
              })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                  reflectSymbol: function () {
                      return "prop";
                  }
              }))({
                  reflectSymbol: function () {
                      return "cb";
                  }
              }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                  reflectSymbol: function () {
                      return "key";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toCreate";
                  }
              })(eqToCreate))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toChange";
                  }
              })(eqToChange))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "terminus";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "instructions";
                  }
              })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "text";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "terminus";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "instructions";
                  }
              })(Data_Eq.eqArray(Data_Eq.eqArray(eqInstruction))))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "root";
                  }
              })(eqRootDOMElement))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "tag";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "attributes";
                  }
              })(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "value";
                  }
              })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                  reflectSymbol: function () {
                      return "prop";
                  }
              }))({
                  reflectSymbol: function () {
                      return "cb";
                  }
              }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                  reflectSymbol: function () {
                      return "key";
                  }
              })(Data_Eq.eqString)))))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "toId";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromId";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "unit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "toId";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromId";
                  }
              })(Data_Eq.eqString)))))(x)(y);
          };
      }
  };
  var ordInstruction = {
      compare: function (v) {
          return function (v1) {
              var w2 = instructionWeight(v1);
              var w1 = instructionWeight(v);
              var c2 = function (v3) {
                  var i2 = instructionId(v1);
                  var i1 = instructionId(v);
                  var v4 = Data_Ord.compare(Data_Maybe.ordMaybe(Data_Ord.ordString))(i1)(i2);
                  if (v4 instanceof Data_Ordering.EQ) {
                      return Data_Ord.compare(Data_Variant.ordVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "setTumult";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "setText";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "setSubgraph";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "setAttribute";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "massiveCreate";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "massiveChange";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeTumult";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeText";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeSubgraph";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeRoot";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeElement";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "disconnectXFromY";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "destroyUnit";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "connectXToY";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toCreate";
                          }
                      })(eqToCreate))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toChange";
                          }
                      })(eqToChange))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Eq.eqArray(Data_Eq.eqArray(eqInstruction))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "root";
                          }
                      })(eqRootDOMElement))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "tag";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "attributes";
                          }
                      })(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Eq.eqString)))))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "unit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Eq.eqString))))(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantNil)(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.ordMap(Data_Ord.ordInt)(Data_Maybe.ordMaybe(Data_Ord.ordArray(ordInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.ordVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantNil)(Data_Ord.ordString))(Deku_Graph_Attribute.ordCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toCreate";
                          }
                      })(ordToCreate))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toChange";
                          }
                      })(ordToChange))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.ordMap(Data_Ord.ordInt)(Data_Maybe.ordMaybe(Data_Ord.ordArray(ordInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Ord.ordArray(Data_Ord.ordArray(ordInstruction))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "root";
                          }
                      })(ordRootDOMElement))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "tag";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "attributes";
                          }
                      })(Data_Ord.ordArray(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.ordVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantNil)(Data_Ord.ordString))(Deku_Graph_Attribute.ordCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Ord.ordString)))))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "unit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Ord.ordString)))))(v)(v1);
                  };
                  return v4;
              };
              var v3 = Data_Ord.compare(Data_Ord.ordInt)(w1)(w2);
              if (v3 instanceof Data_Ordering.EQ) {
                  return c2(Data_Unit.unit);
              };
              return v3;
          };
      },
      Eq0: function () {
          return eqInstruction;
      }
  };
  exports["ToCreate"] = ToCreate;
  exports["iDisconnectXFromY"] = iDisconnectXFromY;
  exports["iDestroyUnit"] = iDestroyUnit;
  exports["iConnectXToY"] = iConnectXToY;
  exports["iSetAttribute"] = iSetAttribute;
  exports["iSetText"] = iSetText;
  exports["ordInstruction"] = ordInstruction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Tumult.Reconciliation"] = $PS["Deku.Tumult.Reconciliation"] || {};
  var exports = $PS["Deku.Tumult.Reconciliation"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Set = $PS["Data.Set"];
  var Data_Variant = $PS["Data.Variant"];
  var Deku_Rendered = $PS["Deku.Rendered"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var du = function (u) {
      var $41 = Data_Set.insert(Deku_Rendered.ordInstruction);
      return function ($42) {
          return $41(Deku_Rendered.iDestroyUnit((function (v) {
              return {
                  unit: u,
                  id: v
              };
          })((function (v) {
              return v.id;
          })($42))));
      };
  };
  var derogative = (function () {
      var $43 = Data_Variant.match()()()({
          disconnectXFromY: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          destroyUnit: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          makeElement: function (i) {
              return du(i.tag)(i);
          },
          makeRoot: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          massiveCreate: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          makeSubgraph: du("Subgraph"),
          makeTumult: du("Tumult"),
          makeText: du("Text"),
          connectXToY: (function () {
              var $46 = Data_Set.insert(Deku_Rendered.ordInstruction);
              return function ($47) {
                  return $46(Deku_Rendered.iDisconnectXFromY($47));
              };
          })(),
          setAttribute: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          massiveChange: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          setSubgraph: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          setTumult: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          setText: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))
      });
      var $44 = Data_Newtype.unwrap();
      return function ($45) {
          return $43($44($45));
      };
  })();
  var reconcileTumult = function ($$new) {
      return function (old) {
          var secondus = Data_List.fromFoldable(Data_Set.foldableSet)(old);
          var primus = Data_List.fromFoldable(Data_Set.foldableSet)($$new);
          var usingDefault = function (l0) {
              return function (h0) {
                  return function (t0) {
                      return function (l1) {
                          return function (h1) {
                              return function (t1) {
                                  return function (set) {
                                      return function (v) {
                                          var v1 = Data_Ord.compare(Deku_Rendered.ordInstruction)(h0)(h1);
                                          if (v1 instanceof Data_Ordering.LT) {
                                              return go(t0)(l1)(Data_Set.insert(Deku_Rendered.ordInstruction)(h0)(set));
                                          };
                                          if (v1 instanceof Data_Ordering.GT) {
                                              return go(l0)(t1)(derogative(h1)(set));
                                          };
                                          if (v1 instanceof Data_Ordering.EQ) {
                                              return go(t0)(t1)(set);
                                          };
                                          throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 63, column 5 - line 66, column 25): " + [ v1.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
          var go = function (v) {
              return function (v1) {
                  return function (set) {
                      if (v instanceof Data_List_Types.Nil && v1 instanceof Data_List_Types.Nil) {
                          return set;
                      };
                      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Nil) {
                          return go(v.value1)(Data_List_Types.Nil.value)(Data_Set.insert(Deku_Rendered.ordInstruction)(v.value0)(set));
                      };
                      if (v instanceof Data_List_Types.Nil && v1 instanceof Data_List_Types.Cons) {
                          return go(Data_List_Types.Nil.value)(v1.value1)(derogative(v1.value0)(set));
                      };
                      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                          var udef = usingDefault(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set);
                          return Data_Variant.match()()()({
                              connectXToY: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "connectXToY";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      var o = (function () {
                                          if (a.fromId < b.fromId) {
                                              return go(v.value1)(v1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set));
                                          };
                                          if (a.fromId > b.fromId) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(set));
                                          };
                                          if (a.toId < b.toId) {
                                              return go(v.value1)(v1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set));
                                          };
                                          if (a.toId > b.toId) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(set));
                                          };
                                          if (a.fromUnit !== b.fromUnit) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set)));
                                          };
                                          if (a.toUnit !== b.toUnit) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return go(v.value1)(v1.value1)(set);
                                          };
                                          throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 108, column 21 - line 127, column 49): " + [  ]);
                                      })();
                                      return o;
                                  })(udef)(v1.value0);
                              },
                              makeElement: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeElement";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Data_Set.union(Deku_Rendered.ordInstruction)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Deku_Rendered.ordInstruction)(Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                                          return Deku_Rendered.iSetAttribute({
                                              id: a.id,
                                              key: v2.key,
                                              value: v2.value
                                          });
                                      })(a.attributes))));
                                  })(udef)(v1.value0);
                              },
                              makeText: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeText";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iSetText({
                                          id: a.id,
                                          text: a.text
                                      })));
                                  })(udef)(v1.value0);
                              },
                              disconnectXFromY: function (v2) {
                                  return udef(v1.value0);
                              },
                              destroyUnit: function (v2) {
                                  return udef(v1.value0);
                              },
                              makeSubgraph: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeSubgraph";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Control_Category.identity(Control_Category.categoryFn));
                                  })(udef)(v1.value0);
                              },
                              makeTumult: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeTumult";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Control_Category.identity(Control_Category.categoryFn));
                                  })(udef)(v1.value0);
                              },
                              setAttribute: function (v2) {
                                  return udef(v1.value0);
                              },
                              setSubgraph: function (v2) {
                                  return udef(v1.value0);
                              },
                              setTumult: function (v2) {
                                  return udef(v1.value0);
                              },
                              setText: function (v2) {
                                  return udef(v1.value0);
                              },
                              makeRoot: function (v2) {
                                  return udef(v1.value0);
                              },
                              massiveChange: function (v2) {
                                  return udef(v1.value0);
                              },
                              massiveCreate: function (v2) {
                                  return udef(v1.value0);
                              }
                          })(v.value0);
                      };
                      throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 90, column 3 - line 94, column 23): " + [ v.constructor.name, v1.constructor.name, set.constructor.name ]);
                  };
              };
          };
          var comparable = function (a) {
              return function (b) {
                  return function (l0) {
                      return function (h0) {
                          return function (t0) {
                              return function (l1) {
                                  return function (h1) {
                                      return function (t1) {
                                          return function (set) {
                                              return function (setf) {
                                                  if (a.id < b.id) {
                                                      return go(t0)(l1)(Data_Set.insert(Deku_Rendered.ordInstruction)(h0)(set));
                                                  };
                                                  if (b.id < a.id) {
                                                      return go(l0)(t1)(derogative(h1)(set));
                                                  };
                                                  if (Data_Boolean.otherwise) {
                                                      return go(t0)(t1)(setf(set));
                                                  };
                                                  throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 68, column 3 - line 84, column 23): " + [ a.constructor.name, b.constructor.name, l0.constructor.name, h0.constructor.name, t0.constructor.name, l1.constructor.name, h1.constructor.name, t1.constructor.name, set.constructor.name, setf.constructor.name ]);
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
          var result = go(primus)(secondus)(Data_Set.empty);
          return result;
      };
  };
  exports["reconcileTumult"] = reconcileTumult;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                  })();
                  var c2 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($53) {
                          return k(f($53));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var cancelOuter = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var c = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return cancelOuter();
              };
          };
      };
  };
  var functorEvent = {
      map: function (f) {
          return function (v) {
              return function (k) {
                  return v(function ($54) {
                      return k(f($54));
                  });
              };
          };
      }
  };
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var result = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var v1 = p(a);
                  if (v1 instanceof Data_Maybe.Just) {
                      return k(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 134, column 13 - line 136, column 27): " + [ v1.constructor.name ]);
              });
          };
      };
  };
  var filter$prime = function (f) {
      return filter(function (a) {
          var v = f(a);
          if (v) {
              return new Data_Maybe.Just(a);
          };
          if (!v) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at FRP.Event (line 64, column 13 - line 66, column 25): " + [ v.constructor.name ]);
      });
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  Effect_Ref.modify(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return function __do() {
                      Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var c1 = subscribe(v1.input)(v.push)();
              var c2 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
          };
      };
  };
  var compactableEvent = {
      compact: filter(Control_Category.identity(Control_Category.categoryFn)),
      separate: function (xs) {
          return {
              left: filter(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 47, column 13 - line 49, column 33): " + [ v.constructor.name ]);
              })(xs),
              right: filter(function (v) {
                  if (v instanceof Data_Either.Right) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Left) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 54, column 13 - line 56, column 32): " + [ v.constructor.name ]);
              })(xs)
          };
      }
  };
  var filterableEvent = {
      filter: filter$prime,
      filterMap: filter,
      partition: function (p) {
          return function (xs) {
              return {
                  yes: filter$prime(p)(xs),
                  no: filter$prime((function () {
                      var $55 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                      return function ($56) {
                          return $55(p($56));
                      };
                  })())(xs)
              };
          };
      },
      partitionMap: function (f) {
          return function (xs) {
              return {
                  left: Data_Filterable.filterMap(filterableEvent)((function () {
                      var $57 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                      return function ($58) {
                          return $57(f($58));
                      };
                  })())(xs),
                  right: Data_Filterable.filterMap(filterableEvent)(function ($59) {
                      return Data_Either.hush(f($59));
                  })(xs)
              };
          };
      },
      Compactable0: function () {
          return compactableEvent;
      },
      Functor1: function () {
          return functorEvent;
      }
  };
  var applyEvent = {
      apply: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var c1 = v(function (a) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($60) {
                                  return k(a($60));
                              }))();
                          };
                      })();
                      var c2 = v1(function (b) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($61) {
                                  return k((function (v2) {
                                      return v2(b);
                                  })($61));
                              }))();
                          };
                      })();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var applicativeEvent = {
      pure: function (a) {
          return function (k) {
              return function __do() {
                  k(a)();
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
          };
      },
      Apply0: function () {
          return applyEvent;
      }
  };
  var altEvent = {
      alt: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var c1 = v(k)();
                      var c2 = v1(k)();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var plusEvent = {
      empty: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      },
      Alt0: function () {
          return altEvent;
      }
  };
  var alternativeEvent = {
      Applicative0: function () {
          return applicativeEvent;
      },
      Plus1: function () {
          return plusEvent;
      }
  };
  var eventIsEvent = {
      fold: fold,
      keepLatest: keepLatest,
      sampleOn: sampleOn,
      fix: fix,
      Alternative0: function () {
          return alternativeEvent;
      },
      Filterable1: function () {
          return filterableEvent;
      }
  };
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["applicativeEvent"] = applicativeEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Interpret"] = $PS["Deku.Interpret"] || {};
  var exports = $PS["Deku.Interpret"];
  var $foreign = $PS["Deku.Interpret"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Set = $PS["Data.Set"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Variant = $PS["Data.Variant"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Deku_Rendered = $PS["Deku.Rendered"];
  var Deku_Tumult_Reconciliation = $PS["Deku.Tumult.Reconciliation"];
  var FRP_Event = $PS["FRP.Event"];
  var setTumult = function (dict) {
      return dict.setTumult;
  };
  var setText = function (dict) {
      return dict.setText;
  };
  var setSubgraph = function (dict) {
      return dict.setSubgraph;
  };
  var setAttribute = function (dict) {
      return dict.setAttribute;
  };
  var massiveCreate = function (dict) {
      return dict.massiveCreate;
  };
  var massiveChange = function (dict) {
      return dict.massiveChange;
  };
  var makeTumult = function (dict) {
      return dict.makeTumult;
  };
  var makeText = function (dict) {
      return dict.makeText;
  };
  var makeSubgraph = function (dict) {
      return dict.makeSubgraph;
  };
  var makeRoot = function (dict) {
      return dict.makeRoot;
  };
  var makeElement = function (dict) {
      return dict.makeElement;
  };
  var envsToFFI = function (envs) {
      return Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return {
              pos: v.value0,
              env: v.value1
          };
      })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Functor.map(Data_Map_Internal.functorMap)((function () {
          var $178 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create);
          return function ($179) {
              return Data_Nullable.toNullable($178($179));
          };
      })())(envs)));
  };
  var disconnectXFromY = function (dict) {
      return dict.disconnectXFromY;
  };
  var destroyUnit = function (dict) {
      return dict.destroyUnit;
  };
  var connectXToY = function (dict) {
      return dict.connectXToY;
  };
  var interpretInstruction = function (dictDOMInterpret) {
      var $180 = Data_Variant.match()()()({
          disconnectXFromY: function (a) {
              return disconnectXFromY(dictDOMInterpret)(a);
          },
          destroyUnit: function (a) {
              return destroyUnit(dictDOMInterpret)(a);
          },
          makeElement: function (a) {
              return makeElement(dictDOMInterpret)(a);
          },
          makeRoot: function (a) {
              return makeRoot(dictDOMInterpret)(a);
          },
          massiveCreate: function (a) {
              return massiveCreate(dictDOMInterpret)(a);
          },
          makeText: function (a) {
              return makeText(dictDOMInterpret)(a);
          },
          makeSubgraph: function (v) {
              return makeElement(dictDOMInterpret)({
                  id: v.id,
                  tag: "div",
                  attributes: [ {
                      key: "style",
                      value: Deku_Graph_Attribute.prop("display:content;")
                  } ]
              });
          },
          makeTumult: function (v) {
              return makeElement(dictDOMInterpret)({
                  id: v.id,
                  tag: "div",
                  attributes: [ {
                      key: "style",
                      value: Deku_Graph_Attribute.prop("display:content;")
                  } ]
              });
          },
          connectXToY: function (a) {
              return connectXToY(dictDOMInterpret)(a);
          },
          setText: function (a) {
              return setText(dictDOMInterpret)(a);
          },
          massiveChange: function (a) {
              return massiveChange(dictDOMInterpret)(a);
          },
          setAttribute: function (a) {
              return setAttribute(dictDOMInterpret)(a);
          },
          setSubgraph: function (v) {
              return setAttribute(dictDOMInterpret)({
                  id: v.id,
                  key: "devnull",
                  value: Deku_Graph_Attribute.prop("true")
              });
          },
          setTumult: function (v) {
              return setAttribute(dictDOMInterpret)({
                  id: v.id,
                  key: "devnull",
                  value: Deku_Graph_Attribute.prop("true")
              });
          }
      });
      var $181 = Data_Newtype.unwrap();
      return function ($182) {
          return $180($181($182));
      };
  };
  var mcUnsubgraph = function (v) {
      return v(effectfulDOMInterpret);
  };
  var makeInstructionsEffectful = function (a) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Functor.map(Data_Functor.functorArray)(interpretInstruction(effectfulDOMInterpret))(a);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(interpretInstruction(effectfulDOMInterpret))(Data_Array.fromFoldable(Data_Set.foldableSet)(Deku_Tumult_Reconciliation.reconcileTumult(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Deku_Rendered.ordInstruction)(a))(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Deku_Rendered.ordInstruction)(v.value0))));
          };
          throw new Error("Failed pattern match at Deku.Interpret (line 313, column 31 - line 318, column 6): " + [ v.constructor.name ]);
      };
  };
  var effectfulDOMInterpret = {
      connectXToY: $foreign.connectXToY_,
      disconnectXFromY: $foreign.disconnectXFromY_,
      destroyUnit: $foreign.destroyUnit_,
      makeElement: $foreign.makeElement_,
      makeRoot: $foreign.makeRoot_,
      massiveCreate: function (noEta) {
          return $foreign.massiveCreate_(mcUnsubgraph)(makeSubgraph(effectfulDOMInterpret))(makeTumult(effectfulDOMInterpret))(makeRoot(effectfulDOMInterpret))(makeElement(effectfulDOMInterpret))(makeText(effectfulDOMInterpret))(noEta);
      },
      makeText: $foreign.makeText_,
      makeSubgraph: function (v) {
          return function (dom) {
              return Data_Function.flip($foreign.makeSubgraph_(v.id)(v.terminus)(v.scenes)(envsToFFI(v.envs)))(dom)(function (i) {
                  return function __do() {
                      var evt = FRP_Event.create();
                      var loop = function (eop) {
                          return function (scene) {
                              var res = Deku_Control_Types.oneSubFrame(scene)(eop)(evt.push);
                              return {
                                  instructions: res.instructions,
                                  nextScene: res.next,
                                  forOrdering: Data_Newtype.unwrap()(res.res)
                              };
                          };
                      };
                      var unsubscribe = FRP_Event.subscribe(evt.event)(function (p) {
                          return $foreign.setSubgraph_(v.id)([ {
                              pos: i,
                              env: Data_Nullable.toNullable(new Data_Maybe.Just(new Data_Either.Right(p)))
                          } ])(dom);
                      })();
                      return {
                          loop: loop,
                          unsubscribe: unsubscribe
                      };
                  };
              });
          };
      },
      makeTumult: function (v) {
          return function (toFFI) {
              return $foreign.makeTumult_(v.id)(v.terminus)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return {
                      pos: v1.value0,
                      instructions: Data_Nullable.toNullable(v1.value1)
                  };
              })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.instructions)))(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(makeInstructionsEffectful)(toFFI);
          };
      },
      setAttribute: $foreign.setAttribute_,
      setText: $foreign.setText_,
      massiveChange: function (noEta) {
          return $foreign.massiveChange_(setSubgraph(effectfulDOMInterpret))(setAttribute(effectfulDOMInterpret))(setText(effectfulDOMInterpret))(setTumult(effectfulDOMInterpret))(noEta);
      },
      setSubgraph: function (v) {
          return function (dom) {
              return $foreign.setSubgraph_(v.id)(envsToFFI(v.envs))(dom);
          };
      },
      setTumult: function (v) {
          return function (toFFI) {
              return $foreign.setTumult_(v.id)(v.terminus)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return {
                      pos: v1.value0,
                      instructions: Data_Nullable.toNullable(v1.value1)
                  };
              })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.instructions)))(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(makeInstructionsEffectful)(toFFI);
          };
      }
  };
  exports["massiveCreate"] = massiveCreate;
  exports["setAttribute"] = setAttribute;
  exports["setText"] = setText;
  exports["effectfulDOMInterpret"] = effectfulDOMInterpret;
  exports["makeFFIDOMSnapshot"] = $foreign.makeFFIDOMSnapshot;
  exports["renderDOM"] = $foreign.renderDOM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Change"] = $PS["Deku.Change"] || {};
  var exports = $PS["Deku.Change"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var unsafeChange$prime = function (dictDOMInterpret) {
      return function (dictIsSymbol) {
          return function (ptr) {
              return function (i) {
                  return function (attributes) {
                      var id = Data_Symbol.reflectSymbol(dictIsSymbol)(ptr);
                      var o = Deku_Control_Types.unsafeDOM({
                          context: {
                              res: i.res,
                              instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(i.instructions)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                                  return Deku_Interpret.setAttribute(dictDOMInterpret)({
                                      id: id,
                                      key: v1.key,
                                      value: v1.value
                                  });
                              })(Data_Functor.map(Data_Functor.functorArray)(Deku_Graph_Attribute.unsafeUnAttribute)(attributes)))
                          },
                          value: Data_Unit.unit
                      });
                      return o;
                  };
              };
          };
      };
  };
  var change_ = function (dict) {
      return dict.change_;
  };
  var ichange_ = function (dictDOMInterpret) {
      return function (dictChange_) {
          return function (r) {
              var $1073 = change_(dictChange_)(dictDOMInterpret);
              var $1074 = Data_Functor.voidRight(Deku_Control_Types.functorDOM)(r);
              return function ($1075) {
                  return $1073($1074($1075));
              };
          };
      };
  };
  var changeTextString = function (dictIsSymbol) {
      return function (dictCons) {
          return {
              "change'": function (dictDOMInterpret) {
                  return function (ptr) {
                      return function (w) {
                          var v = Deku_Control_Types.unsafeUnDOM(w);
                          var id = Data_Symbol.reflectSymbol(dictIsSymbol)(ptr);
                          var o = Deku_Control_Types.unsafeDOM({
                              context: {
                                  res: v.context.res,
                                  instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.context.instructions)([ Deku_Interpret.setText(dictDOMInterpret)({
                                      id: id,
                                      text: v.value
                                  }) ])
                              },
                              value: Data_Unit.unit
                          });
                          return o;
                      };
                  };
              }
          };
      };
  };
  var changeRL_Nil = {
      changeRL_: function (dictDOMInterpret) {
          return function (v) {
              return function (w) {
                  return Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(w)(Data_Unit.unit);
              };
          };
      }
  };
  var changeRL_ = function (dict) {
      return dict.changeRL_;
  };
  var change_All = function (dictRowToList) {
      return function (dictChangeRL_) {
          return {
              change_: function (dictDOMInterpret) {
                  return changeRL_(dictChangeRL_)(dictDOMInterpret)(Type_Proxy["Proxy"].value);
              }
          };
      };
  };
  var changeA_ = function (dictIsSymbol) {
      return function (dictCons) {
          return {
              "change'": function (dictDOMInterpret) {
                  return function (ptr) {
                      return function (w) {
                          var v = Deku_Control_Types.unsafeUnDOM(w);
                          return unsafeChange$prime(dictDOMInterpret)(dictIsSymbol)(ptr)(v.context)(v.value);
                      };
                  };
              }
          };
      };
  };
  var change$prime = function (dict) {
      return dict["change'"];
  };
  var changeRL_Cons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictLacks) {
              return function (dictChange$prime) {
                  return function (dictChangeRL_) {
                      return {
                          changeRL_: function (dictDOMInterpret) {
                              return function (v) {
                                  return function (w) {
                                      var v1 = Deku_Control_Types.unsafeUnDOM(w);
                                      return changeRL_(dictChangeRL_)(dictDOMInterpret)(Type_Proxy["Proxy"].value)(Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(change$prime(dictChange$prime)(dictDOMInterpret)(Type_Proxy["Proxy"].value)(Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(w)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(v1.value))))(v1.value));
                                  };
                              };
                          }
                      };
                  };
              };
          };
      };
  };
  exports["ichange_"] = ichange_;
  exports["changeRL_Cons"] = changeRL_Cons;
  exports["changeRL_Nil"] = changeRL_Nil;
  exports["change_All"] = change_All;
  exports["changeTextString"] = changeTextString;
  exports["changeA_"] = changeA_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Functions"] = $PS["Deku.Control.Functions"] || {};
  var exports = $PS["Deku.Control.Functions"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var makeScene = function (dictMonoid) {
      return function (dictIsScene) {
          return function (dictDOMInterpret) {
              return function (m) {
                  return function (trans) {
                      var go = function (env) {
                          return function (push) {
                              var v = m(env)(push);
                              if (v instanceof Data_Either.Left) {
                                  return Deku_Control_Types.getFrame(dictIsScene)(v.value0)(env)(push);
                              };
                              if (v instanceof Data_Either.Right) {
                                  var v1 = Deku_Control_Types.unsafeUnDOM(v.value0);
                                  return {
                                      instructions: v1.context.instructions,
                                      res: v1.context.res,
                                      next: trans(Deku_Control_Types.unsafeDOM({
                                          context: {
                                              res: Data_Monoid.mempty(dictMonoid),
                                              instructions: [  ]
                                          },
                                          value: v1.value
                                      }))
                                  };
                              };
                              throw new Error("Failed pattern match at Deku.Control.Functions (line 94, column 17 - line 108, column 10): " + [ v.constructor.name ]);
                          };
                      };
                      return Deku_Control_Types.unFrame(dictIsScene)(go);
                  };
              };
          };
      };
  };
  var makeSceneR = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (a) {
                  return function (b) {
                      return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Either.Right.create))(a))(b);
                  };
              };
          };
      };
  };
  var makeSceneR$prime = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (a) {
                  return function (b) {
                      return makeSceneR(dictMonoid)(dictDOMInterpret)(dictIsScene)(Data_Function["const"](Data_Function["const"](a)))(b);
                  };
              };
          };
      };
  };
  var loop = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (fa) {
                  return function (ma) {
                      return makeSceneR(dictMonoid)(dictDOMInterpret)(dictIsScene)(fa(ma))(loop(dictMonoid)(dictDOMInterpret)(dictIsScene)(fa));
                  };
              };
          };
      };
  };
  var initialDOMState = function (dictMonoid) {
      return {
          res: Data_Monoid.mempty(dictMonoid),
          instructions: [  ]
      };
  };
  var start = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return Deku_Control_Types.unsafeDOM({
              context: initialDOMState(dictMonoid),
              value: Data_Unit.unit
          });
      };
  };
  var iloop = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (fa) {
                  return loop(dictMonoid)(dictDOMInterpret)(dictIsScene)(function (wa) {
                      return function (e) {
                          return function (p) {
                              var v = fa(e)(p)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(wa));
                              return v(wa);
                          };
                      };
                  });
              };
          };
      };
  };
  var freeze = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (s) {
                  return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(Data_Function["const"](Data_Function["const"](new Data_Either.Right(s))))(freeze(dictMonoid)(dictDOMInterpret)(dictIsScene));
              };
          };
      };
  };
  var istart = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (m) {
                  return function (ct) {
                      return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(function (e) {
                          return function (p) {
                              if (e instanceof Data_Either.Left) {
                                  var v = m(e.value0)(p);
                                  return Data_Either.Left.create(makeSceneR$prime(dictMonoid)(dictDOMInterpret)(dictIsScene)(v(start(dictMonoid)(dictDOMInterpret)))(ct));
                              };
                              if (e instanceof Data_Either.Right) {
                                  return new Data_Either.Right(start(dictMonoid)(dictDOMInterpret));
                              };
                              throw new Error("Failed pattern match at Deku.Control.Functions (line 146, column 13 - line 152, column 29): " + [ e.constructor.name ]);
                          };
                      })(freeze(dictMonoid)(dictDOMInterpret)(dictIsScene));
                  };
              };
          };
      };
  };
  exports["istart"] = istart;
  exports["iloop"] = iloop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Functions.Graph"] = $PS["Deku.Control.Functions.Graph"] || {};
  var exports = $PS["Deku.Control.Functions.Graph"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var istart = function (dictGraphIsRenderable) {
      return function (dictMonoid) {
          return function (dictDOMInterpret) {
              return Deku_Control_Functions.istart(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneScene);
          };
      };
  };
  var iloop = function (dictMonoid) {
      return function (dictGraphIsRenderable) {
          return function (dictDOMInterpret) {
              return Deku_Control_Functions.iloop(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneScene);
          };
      };
  };
  exports["iloop"] = iloop;
  exports["istart"] = istart;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Indexed"] = $PS["Deku.Control.Indexed"] || {};
  var exports = $PS["Deku.Control.Indexed"];
  var Control_Applicative_Indexed = $PS["Control.Applicative.Indexed"];
  var Control_Apply_Indexed = $PS["Control.Apply.Indexed"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var ixFunctorIxDOM = {
      imap: function (f) {
          return function (v) {
              return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Deku_Control_Types.functorDOM)(f))(v);
          };
      }
  };
  var ixApplyIxDOM = {
      iapply: function (v) {
          return function (v1) {
              return function (i) {
                  var fab = v(i);
                  var a = v1(fab);
                  return Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(a)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(fab)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(a)));
              };
          };
      },
      IxFunctor0: function () {
          return ixFunctorIxDOM;
      }
  };
  var ixApplicativeIxDOM = {
      ipure: function (a) {
          return Data_Functor.voidRight(Deku_Control_Types.functorDOM)(a);
      },
      IxApply0: function () {
          return ixApplyIxDOM;
      }
  };
  var functorIxDOM = {
      map: function (f) {
          return function (v) {
              return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Deku_Control_Types.functorDOM)(f))(v);
          };
      }
  };
  var applyIxDOM = {
      apply: Control_Apply_Indexed.iapply(ixApplyIxDOM),
      Functor0: function () {
          return functorIxDOM;
      }
  };
  var applicativeIxDOM = {
      pure: Control_Applicative_Indexed.ipure(ixApplicativeIxDOM),
      Apply0: function () {
          return applyIxDOM;
      }
  };
  exports["applicativeIxDOM"] = applicativeIxDOM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Create"] = $PS["Deku.Create"] || {};
  var exports = $PS["Deku.Create"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Deku_Rendered = $PS["Deku.Rendered"];
  var createAll = function (dictCreateT) {
      return {
          create: function (dictDOMInterpret) {
              return function (w) {
                  var v = Deku_Control_Types.unsafeUnDOM(w);
                  var o = Deku_Control_Types.unsafeDOM({
                      context: {
                          res: v.context.res,
                          instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.context.instructions)([ Deku_Interpret.massiveCreate(dictDOMInterpret)({
                              toCreate: Deku_Rendered.ToCreate(v.value)
                          }) ])
                      },
                      value: Data_Unit.unit
                  });
                  return o;
              };
          }
      };
  };
  var create = function (dict) {
      return dict.create;
  };
  var icreate = function (dictDOMInterpret) {
      return function (dictCreate) {
          return function (r) {
              var $1668 = create(dictCreate)(dictDOMInterpret);
              var $1669 = Data_Functor.voidRight(Deku_Control_Types.functorDOM)(r);
              return function ($1670) {
                  return $1668($1669($1670));
              };
          };
      };
  };
  exports["icreate"] = icreate;
  exports["createAll"] = createAll;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Graph.DOM"] = $PS["Deku.Graph.DOM"] || {};
  var exports = $PS["Deku.Graph.DOM"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Text = function (x) {
      return x;
  };   
  var Root = function (x) {
      return x;
  };   
  var OnClick = (function () {
      function OnClick() {

      };
      OnClick.value = new OnClick();
      return OnClick;
  })();
  var Href = (function () {
      function Href() {

      };
      Href.value = new Href();
      return Href;
  })();
  var Element = function (x) {
      return x;
  };
  var A_ = function (x) {
      return x;
  };
  var attrOnClickCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "click",
                  value: Deku_Graph_Attribute.cb(value)
              });
          };
      }
  };
  var attrA_HrefString = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "href",
                  value: Deku_Graph_Attribute.prop(value)
              });
          };
      }
  };                                                                              
  var text = function ($12239) {
      return Element((function (v) {
          return {
              element: v,
              children: {}
          };
      })(Text((function (v) {
          return {
              text: v
          };
      })($12239))));
  };                                                                        
  var root = (function () {
      var $12240 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(function ($12242) {
          return (function (v) {
              return {
                  root: v
              };
          })(Element($12242));
      });
      return function ($12241) {
          return $12240((function (v) {
              return function (v1) {
                  return {
                      element: v,
                      children: v1
                  };
              };
          })(Root((function (v) {
              return {
                  element: v
              };
          })($12241))));
      };
  })();                                                                      
  var makeElt = function (elt) {
      return function (tag) {
          var $12243 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Element);
          return function ($12244) {
              return $12243((function (v) {
                  return function (v1) {
                      return {
                          element: v,
                          children: v1
                      };
                  };
              })(elt((function (v) {
                  return {
                      tag: tag,
                      attributes: v
                  };
              })($12244))));
          };
      };
  };                                   
  var attr = function (dict) {
      return dict.attr;
  };                                
  var a$primeattr = Control_Category.identity(Control_Category.categoryFn);
  var a = makeElt(A_)("a");
  exports["attr"] = attr;
  exports["text"] = text;
  exports["root"] = root;
  exports["Href"] = Href;
  exports["OnClick"] = OnClick;
  exports["a"] = a;
  exports["a'attr"] = a$primeattr;
  exports["attrA_HrefString"] = attrA_HrefString;
  exports["attrOnClickCb"] = attrOnClickCb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                      
  var ABehavior = function (x) {
      return x;
  };
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (e) {
                      return v(Data_Functor.map(dictFunctor)(function (v1) {
                          return function ($66) {
                              return v1(f($66));
                          };
                      })(e));
                  };
              };
          }
      };
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var behavior = ABehavior;
  var applyABehavior = function (dictFunctor) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (e) {
                      return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
                  };
              };
          },
          Functor0: function () {
              return functorABehavior(dictFunctor);
          }
      };
  };
  var applicativeABehavior = function (dictFunctor) {
      return {
          pure: function (a) {
              return function (e) {
                  return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
              };
          },
          Apply0: function () {
              return applyABehavior(dictFunctor);
          }
      };
  };
  exports["behavior"] = behavior;
  exports["sampleBy"] = sampleBy;
  exports["functorABehavior"] = functorABehavior;
  exports["applyABehavior"] = applyABehavior;
  exports["applicativeABehavior"] = applicativeABehavior;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Event.Time"] = $PS["FRP.Event.Time"] || {};
  var exports = $PS["FRP.Event.Time"];
  var Effect_Now = $PS["Effect.Now"];
  var FRP_Event = $PS["FRP.Event"];                            
  var withTime = function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (value) {
              return function __do() {
                  var time = Effect_Now.now();
                  return k({
                      time: time,
                      value: value
                  })();
              };
          });
      });
  };
  exports["withTime"] = withTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Behavior.Time"] = $PS["FRP.Behavior.Time"] || {};
  var exports = $PS["FRP.Behavior.Time"];
  var Data_Functor = $PS["Data.Functor"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];                
  var instant = FRP_Behavior.behavior(function (e) {
      return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
          return v.value(v.time);
      })(FRP_Event_Time.withTime(e));
  });
  exports["instant"] = instant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Run"] = $PS["Deku.Run"] || {};
  var exports = $PS["Deku.Run"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Behavior_Time = $PS["FRP.Behavior.Time"];
  var FRP_Event = $PS["FRP.Event"];
  var run = function (dictMonoid) {
      return function (trigger) {
          return function (inWorld) {
              return function (v) {
                  return function (domInfo) {
                      return function (scene) {
                          return FRP_Event.makeEvent(function (reporter) {
                              return function __do() {
                                  var evt = FRP_Event.create();
                                  var currentScene = Effect_Ref["new"](scene)();
                                  var newWorld = Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(function (v1) {
                                      return function (v2) {
                                          return {
                                              world: v1,
                                              sysTime: v2
                                          };
                                      };
                                  })(inWorld))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_DateTime_Instant.unInstant)(FRP_Behavior_Time.instant));
                                  var eventAndEnv = FRP_Behavior.sampleBy(FRP_Event.eventIsEvent)(function (v1) {
                                      return function (b) {
                                          return {
                                              trigger: b,
                                              world: v1.world,
                                              sysTime: v1.sysTime
                                          };
                                      };
                                  })(newWorld)(trigger);
                                  var subFn = function (ee) {
                                      return function __do() {
                                          var sceneNow = Effect_Ref.read(currentScene)();
                                          var fromScene = Deku_Control_Types.oneFrame(sceneNow)(ee)(evt.push);
                                          var applied = Data_Functor.map(Data_Functor.functorArray)(Data_Function.applyFlipped(domInfo))(fromScene.instructions);
                                          Deku_Interpret.renderDOM(applied)();
                                          Effect_Ref.write(fromScene.next)(currentScene)();
                                          return reporter({
                                              res: fromScene.res
                                          })();
                                      };
                                  };
                                  var unsubscribe0 = FRP_Event.subscribe(eventAndEnv)(function ($8) {
                                      return subFn(Data_Either.Left.create($8));
                                  })();
                                  var unsubscribe1 = FRP_Event.subscribe(evt.event)(function ($9) {
                                      return subFn(Data_Either.Right.create($9));
                                  })();
                                  return Control_Apply.applySecond(Effect.applyEffect)(unsubscribe0)(unsubscribe1);
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var defaultOptions = {};
  exports["run"] = run;
  exports["defaultOptions"] = defaultOptions;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var body = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_body"]($9));
      };
  })();
  exports["body"] = body;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toElement"] = toElement;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.HelloWorld"] = $PS["Deku.Example.HelloWorld"] || {};
  var exports = $PS["Deku.Example.HelloWorld"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Change = $PS["Deku.Change"];
  var Deku_Control_Functions_Graph = $PS["Deku.Control.Functions.Graph"];
  var Deku_Control_Indexed = $PS["Deku.Control.Indexed"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Deku_Run = $PS["Deku.Run"];
  var Effect = $PS["Effect"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var scene = function (elt) {
      return Deku_Control_Functions_Graph.istart()(Data_Monoid.monoidUnit)(Deku_Interpret.effectfulDOMInterpret)(function (v) {
          return function (push) {
              return Deku_Create.icreate(Deku_Interpret.effectfulDOMInterpret)(Deku_Create.createAll())(Deku_Graph_DOM.root(elt)({
                  hello: Deku_Graph_DOM.text("click "),
                  helloA: Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("#"), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(false))) ])({
                      world: Deku_Graph_DOM.text("me")
                  })
              }));
          };
      })(Deku_Control_Functions_Graph.iloop(Data_Monoid.monoidUnit)()(Deku_Interpret.effectfulDOMInterpret)(function (e) {
          return function (push) {
              return function (v) {
                  if (e instanceof Data_Either.Left) {
                      return Control_Applicative.pure(Deku_Control_Indexed.applicativeIxDOM)(Data_Unit.unit);
                  };
                  if (e instanceof Data_Either.Right) {
                      return Deku_Change.ichange_(Deku_Interpret.effectfulDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                          reflectSymbol: function () {
                              return "root.hello";
                          }
                      })()()(Deku_Change.changeTextString({
                          reflectSymbol: function () {
                              return "root.hello";
                          }
                      })())(Deku_Change.changeRL_Cons({
                          reflectSymbol: function () {
                              return "root.helloA";
                          }
                      })()()(Deku_Change.changeA_({
                          reflectSymbol: function () {
                              return "root.helloA";
                          }
                      })())(Deku_Change.changeRL_Nil))))({
                          "root.hello": (function () {
                              if (e.value0) {
                                  return "click ";
                              };
                              return "kcilc ";
                          })(),
                          "root.helloA": Deku_Graph_DOM["a'attr"]([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(!e.value0))) ])
                      });
                  };
                  throw new Error("Failed pattern match at Deku.Example.HelloWorld (line 36, column 5 - line 41, column 10): " + [ e.constructor.name ]);
              };
          };
      }));
  };
  var main = function __do() {
      var b$prime = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.body)();
      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLElement.toElement)(b$prime))(function (b) {
          return function __do() {
              var ffi = Deku_Interpret.makeFFIDOMSnapshot();
              return FRP_Event.subscribe(Deku_Run.run(Data_Monoid.monoidUnit)(Control_Applicative.pure(FRP_Event.applicativeEvent)(Data_Unit.unit))(Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(Data_Unit.unit))(Deku_Run.defaultOptions)(ffi)(scene(b)))(function (v) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              })();
          };
      })();
  };
  exports["scene"] = scene;
  exports["main"] = main;
})(PS);
PS["Deku.Example.HelloWorld"].main();