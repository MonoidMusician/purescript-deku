// Generated by purs bundle 0.14.4
var PS = {};
(function(exports) {
  /* global XMLHttpRequest */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url, xhr) {
        if (xhr.nodejsBaseUrl === null) {
          var urllib = module.require("url");
          var u = urllib.parse(url);
          u.protocol = u.protocol || "http:";
          u.hostname = u.hostname || "localhost";
          return urllib.format(u);
        } else {
          return url || "/";
        }
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            // eslint-disable-next-line no-eq-null,eqeqeq
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        var onerror = function (msgIdent) {
          return function () {
            errback(new Error(msgIdent));
          };
        };
        xhr.onerror = onerror(requestFailedMessageIdent);
        xhr.ontimeout = onerror(timeoutErrorMessageIdent);
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            body: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.timeout = options.timeout;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Affjax"] = PS["Affjax"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.MediaType.Common"] = $PS["Data.MediaType.Common"] || {};
  var exports = $PS["Data.MediaType.Common"];          
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.RequestBody"] = $PS["Affjax.RequestBody"] || {};
  var exports = $PS["Affjax.RequestBody"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["toMediaType"] = toMediaType;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["alaF"] = alaF;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.RequestHeader"] = $PS["Affjax.RequestHeader"] || {};
  var exports = $PS["Affjax.RequestHeader"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var value = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
  };
  var name = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["name"] = name;
  exports["value"] = value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.ResponseFormat"] = $PS["Affjax.ResponseFormat"] || {};
  var exports = $PS["Affjax.ResponseFormat"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Affjax.ResponseFormat (line 44, column 3 - line 50, column 19): " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };                                                                                
  var json = new Json(Control_Category.identity(Control_Category.categoryFn));
  var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["json"] = json;
  exports["ignore"] = ignore;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.ResponseHeader"] = $PS["Affjax.ResponseHeader"] || {};
  var exports = $PS["Affjax.ResponseHeader"];      
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  exports["ResponseHeader"] = ResponseHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeArray = {
      pure: function (x) {
          return [ x ];
      },
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var throwError = function (dict) {
      return dict.throwError;
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var semigroupString = {
      append: $foreign.concatString
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return {
              alt: function (v) {
                  return function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                          if (rm instanceof Data_Either.Right) {
                              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                          };
                          if (rm instanceof Data_Either.Left) {
                              return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                                  if (rn instanceof Data_Either.Right) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                                  };
                                  if (rn instanceof Data_Either.Left) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                      });
                  };
              },
              Functor0: function () {
                  return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  exports["runExceptT"] = runExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }                      
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  exports.stringifyWithIndent = function (i) {
    return function (j) {
      return JSON.stringify(j, null, i);
    };
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];              
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  }; 
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  exports["insert"] = insert;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Foreign_Object = $PS["Foreign.Object"];   
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["stringify"] = $foreign.stringify;
  exports["stringifyWithIndent"] = $foreign.stringifyWithIndent;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Maybe = $PS["Data.Maybe"];
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  exports["snoc"] = snoc;
  exports["deleteBy"] = deleteBy;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                         
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqUnit = {
      eq: function (v) {
          return function (v1) {
              return true;
          };
      }
  };
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupDisj(dictHeytingAlgebra);
          }
      };
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var oneOfMap = function (dictFoldable) {
      return function (dictPlus) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $314 = Control_Alt.alt(dictPlus.Alt0());
                  return function ($315) {
                      return $314(f($315));
                  };
              })())(Control_Plus.empty(dictPlus));
          };
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["oneOf"] = oneOf;
  exports["oneOfMap"] = oneOfMap;
  exports["any"] = any;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  // A helper which transforms the result ofencodeURIComponent to be compliant
  // with RFC3896, as described in the MDN documentation here:
  //
  // https://web.archive.org/web/20201206001047/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
  function toRFC3896(input) {
    return input.replace(/[!'()*]/g, function (c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  } 

  exports._encodeFormURLComponent = function encode(fail, succeed, input) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input)).replace(/%20/g, "+"));
    } catch (err) {
      return fail(err);
    }
  };
})(PS["JSURI"] = PS["JSURI"] || {});
(function(exports) {
  "use strict";

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn3"] = $foreign.runFn3;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["JSURI"] = $PS["JSURI"] || {};
  var exports = $PS["JSURI"];
  var $foreign = $PS["JSURI"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                                                                                  
  var encodeFormURLComponent = Data_Function_Uncurried.runFn3($foreign["_encodeFormURLComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["encodeFormURLComponent"] = encodeFormURLComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.FormURLEncoded"] = $PS["Data.FormURLEncoded"] || {};
  var exports = $PS["Data.FormURLEncoded"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var JSURI = $PS["JSURI"];
  var toArray = function (v) {
      return v;
  };                                                                                                                 
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return JSURI.encodeFormURLComponent(v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                  return function (val) {
                      return key + ("=" + val);
                  };
              })(JSURI.encodeFormURLComponent(v.value0)))(JSURI.encodeFormURLComponent(v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 18 - line 39, column 116): " + [ v.constructor.name ]);
      };
      var $16 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_Common.joinWith("&"));
      var $17 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(encodePart);
      return function ($18) {
          return $16($17(toArray($18)));
      };
  })();
  exports["encode"] = encode;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];                   
  var showString = {
      show: $foreign.showStringImpl
  };
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.HTTP.Method"] = $PS["Data.HTTP.Method"] || {};
  var exports = $PS["Data.HTTP.Method"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];                                  
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = {
      show: function (v) {
          if (v instanceof OPTIONS) {
              return "OPTIONS";
          };
          if (v instanceof GET) {
              return "GET";
          };
          if (v instanceof HEAD) {
              return "HEAD";
          };
          if (v instanceof POST) {
              return "POST";
          };
          if (v instanceof PUT) {
              return "PUT";
          };
          if (v instanceof DELETE) {
              return "DELETE";
          };
          if (v instanceof TRACE) {
              return "TRACE";
          };
          if (v instanceof CONNECT) {
              return "CONNECT";
          };
          if (v instanceof PROPFIND) {
              return "PROPFIND";
          };
          if (v instanceof PROPPATCH) {
              return "PROPPATCH";
          };
          if (v instanceof MKCOL) {
              return "MKCOL";
          };
          if (v instanceof COPY) {
              return "COPY";
          };
          if (v instanceof MOVE) {
              return "MOVE";
          };
          if (v instanceof LOCK) {
              return "LOCK";
          };
          if (v instanceof UNLOCK) {
              return "UNLOCK";
          };
          if (v instanceof PATCH) {
              return "PATCH";
          };
          throw new Error("Failed pattern match at Data.HTTP.Method (line 43, column 1 - line 59, column 23): " + [ v.constructor.name ]);
      }
  };
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["GET"] = GET;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                      
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var semigroupNonEmptyList = {
      append: function (v) {
          return function (as$prime) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
          };
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  exports["NonEmptyList"] = NonEmptyList;
  exports["plusList"] = plusList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var head = function (v) {
      return v.value0;
  };
  exports["singleton"] = singleton;
  exports["head"] = head;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function(exports) {
  "use strict";

  exports.message = function (e) {
    return e.message;
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["message"] = $foreign.message;
})(PS);
(function(exports) {
  "use strict";

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [ v.constructor.name ]);
  };
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  exports["ForeignError"] = ForeignError;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["fail"] = fail;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax"] = $PS["Affjax"] || {};
  var exports = $PS["Affjax"];
  var $foreign = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Affjax_ResponseHeader = $PS["Affjax.ResponseHeader"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FormURLEncoded = $PS["Data.FormURLEncoded"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var RequestContentError = (function () {
      function RequestContentError(value0) {
          this.value0 = value0;
      };
      RequestContentError.create = function (value0) {
          return new RequestContentError(value0);
      };
      return RequestContentError;
  })();
  var ResponseBodyError = (function () {
      function ResponseBodyError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseBodyError.create = function (value0) {
          return function (value1) {
              return new ResponseBodyError(value0, value1);
          };
      };
      return ResponseBodyError;
  })();
  var TimeoutError = (function () {
      function TimeoutError() {

      };
      TimeoutError.value = new TimeoutError();
      return TimeoutError;
  })();
  var RequestFailedError = (function () {
      function RequestFailedError() {

      };
      RequestFailedError.value = new RequestFailedError();
      return RequestFailedError;
  })();
  var XHROtherError = (function () {
      function XHROtherError(value0) {
          this.value0 = value0;
      };
      XHROtherError.create = function (value0) {
          return new XHROtherError(value0);
      };
      return XHROtherError;
  })();
  var request = function (req) {
      var parseJSON = function (v) {
          if (v === "") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
          };
          return Data_Either.either((function () {
              var $51 = Foreign.fail(Data_Identity.monadIdentity);
              return function ($52) {
                  return $51(Foreign.ForeignError.create($52));
              };
          })())(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
      };
      var fromResponse = (function () {
          if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("ArrayBuffer");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Blob");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
              return function (x) {
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Document")(x))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("XMLDocument")(x)))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("HTMLDocument")(x));
              };
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($53) {
                  return req.responseFormat.value0(parseJSON($53));
              })(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String"));
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
              return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
          };
          throw new Error("Failed pattern match at Affjax (line 257, column 18 - line 265, column 57): " + [ req.responseFormat.constructor.name ]);
      })();
      var extractContent = function (v) {
          if (v instanceof Affjax_RequestBody.ArrayView) {
              return Data_Either.Right.create(v.value0(Foreign.unsafeToForeign));
          };
          if (v instanceof Affjax_RequestBody.Blob) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.Document) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody["String"]) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormData) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormURLEncoded) {
              return Data_Either.note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(Data_Functor.map(Data_Maybe.functorMaybe)(Foreign.unsafeToForeign)(Data_FormURLEncoded.encode(v.value0)));
          };
          if (v instanceof Affjax_RequestBody.Json) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 217, column 20 - line 232, column 69): " + [ v.constructor.name ]);
      };
      var addHeader = function (mh) {
          return function (hs) {
              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                  return Data_Array.snoc(hs)(mh.value0);
              };
              return hs;
          };
      };
      var headers = function (reqContent) {
          return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
      };
      var ajaxRequest = function (v) {
          return {
              method: Data_HTTP_Method.print(req.method),
              url: req.url,
              headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                  return {
                      field: Affjax_RequestHeader.name(h),
                      value: Affjax_RequestHeader.value(h)
                  };
              })(headers(req.content)),
              content: v,
              responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
              username: Data_Nullable.toNullable(req.username),
              password: Data_Nullable.toNullable(req.password),
              withCredentials: req.withCredentials,
              timeout: Data_Maybe.fromMaybe(0.0)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1;
              })(req.timeout))
          };
      };
      var send = function (content) {
          return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"]("AffjaxTimeoutErrorMessageIdent", "AffjaxRequestFailedMessageIdent", Affjax_ResponseHeader.ResponseHeader.create, ajaxRequest(content)))))(function (v) {
              if (v instanceof Data_Either.Right) {
                  var v1 = Control_Monad_Except.runExcept(fromResponse(v.value0.body));
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(new ResponseBodyError(Data_List_NonEmpty.head(v1.value0), v.value0));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          body: v1.value0,
                          headers: v.value0.headers,
                          status: v.value0.status,
                          statusText: v.value0.statusText
                      });
                  };
                  throw new Error("Failed pattern match at Affjax (line 193, column 9 - line 195, column 52): " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Left) {
                  var message = Effect_Exception.message(v.value0);
                  return Data_Either.Left.create((function () {
                      var $38 = message === "AffjaxTimeoutErrorMessageIdent";
                      if ($38) {
                          return TimeoutError.value;
                      };
                      var $39 = message === "AffjaxRequestFailedMessageIdent";
                      if ($39) {
                          return RequestFailedError.value;
                      };
                      return new XHROtherError(v.value0);
                  })());
              };
              throw new Error("Failed pattern match at Affjax (line 191, column 137 - line 201, column 33): " + [ v.constructor.name ]);
          });
      };
      if (req.content instanceof Data_Maybe.Nothing) {
          return send(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
      };
      if (req.content instanceof Data_Maybe.Just) {
          var v = extractContent(req.content.value0);
          if (v instanceof Data_Either.Right) {
              return send(Data_Nullable.toNullable(new Data_Maybe.Just(v.value0)));
          };
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(new RequestContentError(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 183, column 7 - line 187, column 48): " + [ v.constructor.name ]);
      };
      throw new Error("Failed pattern match at Affjax (line 179, column 3 - line 187, column 48): " + [ req.content.constructor.name ]);
  };
  var printError = function (v) {
      if (v instanceof RequestContentError) {
          return "There was a problem with the request content: " + v.value0;
      };
      if (v instanceof ResponseBodyError) {
          return "There was a problem with the response body: " + Foreign.renderForeignError(v.value0);
      };
      if (v instanceof TimeoutError) {
          return "There was a problem making the request: timeout";
      };
      if (v instanceof RequestFailedError) {
          return "There was a problem making the request: request failed";
      };
      if (v instanceof XHROtherError) {
          return "There was a problem making the request: " + Effect_Exception.message(v.value0);
      };
      throw new Error("Failed pattern match at Affjax (line 97, column 14 - line 107, column 66): " + [ v.constructor.name ]);
  };
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false,
      responseFormat: Affjax_ResponseFormat.ignore,
      timeout: Data_Maybe.Nothing.value
  };
  exports["defaultRequest"] = defaultRequest;
  exports["printError"] = printError;
  exports["request"] = request;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Compactable"] = $PS["Data.Compactable"] || {};
  var exports = $PS["Data.Compactable"];
  var compact = function (dict) {
      return dict.compact;
  };
  exports["compact"] = compact;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Distributive"] = $PS["Data.Distributive"] || {};
  var exports = $PS["Data.Distributive"];
  var Data_Functor = $PS["Data.Functor"];
  var distribute = function (dict) {
      return dict.distribute;
  };
  var distributiveFunction = {
      distribute: function (dictFunctor) {
          return function (a) {
              return function (e) {
                  return Data_Functor.map(dictFunctor)(function (v) {
                      return v(e);
                  })(a);
              };
          };
      },
      collect: function (dictFunctor) {
          return function (f) {
              var $22 = distribute(distributiveFunction)(dictFunctor);
              var $23 = Data_Functor.map(dictFunctor)(f);
              return function ($24) {
                  return $22($23($24));
              };
          };
      },
      Functor0: function () {
          return Data_Functor.functorFn;
      }
  };
  exports["distribute"] = distribute;
  exports["distributiveFunction"] = distributiveFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var partitionMap = function (dict) {
      return dict.partitionMap;
  };
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  var filter = function (dict) {
      return dict.filter;
  };
  exports["partitionMap"] = partitionMap;
  exports["filterMap"] = filterMap;
  exports["filter"] = filter;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var from = function (dict) {
      return dict.from;
  };
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function(exports) {
  // This Source Code Form is subject to the terms of the Mozilla Public
  // License, v. 2.0. If a copy of the MPL was not distributed with this
  // file, You can obtain one at http://mozilla.org/MPL/2.0/.

  "use strict";

  exports.hashString = function (s) {
      var h = 0;
      for (var i = 0; i < s.length; i++) {
          h = (31 * h + s.charCodeAt(i)) | 0;
      }
      return h;
  };
})(PS["Data.Hashable"] = PS["Data.Hashable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Hashable"] = $PS["Data.Hashable"] || {};
  var exports = $PS["Data.Hashable"];
  var $foreign = $PS["Data.Hashable"];
  var Data_Eq = $PS["Data.Eq"];
  var hashableUnit = {
      hash: function (v) {
          return 1;
      },
      Eq0: function () {
          return Data_Eq.eqUnit;
      }
  };
  var hashableString = {
      hash: $foreign.hashString,
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var hash = function (dict) {
      return dict.hash;
  };
  exports["hash"] = hash;
  exports["hashableString"] = hashableString;
  exports["hashableUnit"] = hashableUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var profunctorFn = {
      dimap: function (a2b) {
          return function (c2d) {
              return function (b2c) {
                  return function ($10) {
                      return c2d(b2c(a2b($10)));
                  };
              };
          };
      }
  };
  var dimap = function (dict) {
      return dict.dimap;
  };
  var lcmap = function (dictProfunctor) {
      return function (a2b) {
          return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["lcmap"] = lcmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["semiringInt"] = semiringInt;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var genericShowArgsNoArguments = {
      genericShowArgs: function (v) {
          return [  ];
      }
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return {
              "genericShow'": function (v) {
                  var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var v1 = genericShowArgs(dictGenericShowArgs)(v);
                  if (v1.length === 0) {
                      return ctor;
                  };
                  return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
              }
          };
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  };
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return {
              "genericShow'": function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return genericShow$prime(dictGenericShow)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return genericShow$prime(dictGenericShow1)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = {
      map: function (f) {
          return function (m) {
              return new Tuple(m.value0, f(m.value1));
          };
      }
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Data_Symbol = $PS["Data.Symbol"];
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  exports["inj"] = inj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Attribute"] = $PS["Deku.Attribute"] || {};
  var exports = $PS["Deku.Attribute"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect = $PS["Effect"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Cb = function (x) {
      return x;
  };
  var Attribute = function (x) {
      return x;
  };                                                
  var unsafeUnAttribute = Safe_Coerce.coerce();
  var unsafeAttribute = Attribute;
  var prop$prime = Data_Variant.inj()({
      reflectSymbol: function () {
          return "prop";
      }
  })(Type_Proxy["Proxy"].value);
  var cb$prime = Data_Variant.inj()({
      reflectSymbol: function () {
          return "cb";
      }
  })(Type_Proxy["Proxy"].value);
  var cb = (function () {
      var $26 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Effect.functorEffect)(Data_Function["const"](true)));
      return function ($27) {
          return Cb($26($27));
      };
  })();
  var attr = function (dict) {
      return dict.attr;
  };
  exports["attr"] = attr;
  exports["unsafeUnAttribute"] = unsafeUnAttribute;
  exports["unsafeAttribute"] = unsafeAttribute;
  exports["prop'"] = prop$prime;
  exports["cb'"] = cb$prime;
  exports["cb"] = cb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Core"] = $PS["Deku.Core"] || {};
  var exports = $PS["Deku.Core"];
  var Element = function (x) {
      return x;
  };
  exports["Element"] = Element;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                      
  var ABehavior = function (x) {
      return x;
  };
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (e) {
                      return v(Data_Functor.map(dictFunctor)(function (v1) {
                          return function ($66) {
                              return v1(f($66));
                          };
                      })(e));
                  };
              };
          }
      };
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var sample_ = function (dictIsEvent) {
      return sampleBy(dictIsEvent)(Data_Function["const"]);
  };
  var behavior = ABehavior;
  exports["behavior"] = behavior;
  exports["sample_"] = sample_;
  exports["functorABehavior"] = functorABehavior;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Event.Class"] = $PS["FRP.Event.Class"] || {};
  var exports = $PS["FRP.Event.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var keepLatest = function (dict) {
      return dict.keepLatest;
  };
  var fold = function (dict) {
      return dict.fold;
  };
  var mapAccum = function (dictIsEvent) {
      return function (f) {
          return function (xs) {
              return function (acc) {
                  return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Data_Tuple.snd)(fold(dictIsEvent)(function (a) {
                      return function (v) {
                          return Data_Functor.map(Data_Tuple.functorTuple)(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(f(a)(v.value0));
                      };
                  })(xs)(new Data_Tuple.Tuple(acc, Data_Maybe.Nothing.value)));
              };
          };
      };
  };
  exports["mapAccum"] = mapAccum;
  exports["keepLatest"] = keepLatest;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control"] = $PS["Deku.Control"] || {};
  var exports = $PS["Deku.Control"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Distributive = $PS["Data.Distributive"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Core = $PS["Deku.Core"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];                
  var unsafeText = function (v) {
      return function (id) {
          return function (parent) {
              return v.makeText({
                  id: id,
                  parent: parent
              });
          };
      };
  };
  var unsafeSetText = function (dictFunctor) {
      return function (v) {
          return function (id) {
              return function (txt) {
                  return Data_Functor.map(dictFunctor)(function ($50) {
                      return v.setText((function (v1) {
                          return {
                              id: id,
                              text: v1
                          };
                      })($50));
                  })(txt);
              };
          };
      };
  };
  var unsafeSetAttribute = function (dictFunctor) {
      return function (v) {
          return function (id) {
              return function (atts) {
                  return Data_Functor.map(dictFunctor)(function ($51) {
                      return v.setAttribute((function (v1) {
                          return {
                              id: id,
                              key: v1.key,
                              value: v1.value
                          };
                      })(Deku_Attribute.unsafeUnAttribute($51)));
                  })(atts);
              };
          };
      };
  };
  var unsafeElement = function (v) {
      return function (id) {
          return function (parent) {
              return function (tag) {
                  return v.makeElement({
                      id: id,
                      parent: parent,
                      tag: tag
                  });
              };
          };
      };
  };
  var text = function (dictIsEvent) {
      return function (txt) {
          var go = function (parent) {
              return function (v) {
                  return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Unit.unit)))(function (me) {
                      return Data_Foldable.oneOf(Data_Foldable.foldableArray)((dictIsEvent.Alternative0()).Plus1())([ Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(unsafeText(v)(me)(parent)), unsafeSetText((dictIsEvent.Filterable1()).Functor1())(v)(me)(txt) ]);
                  }));
              };
          };
          return go;
      };
  };
  var text_ = function (dictIsEvent) {
      return function (txt) {
          return text(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(txt));
      };
  };
  var flatten = function (dictPlus) {
      return function (a) {
          return Deku_Core.Element(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Foldable.oneOf(Data_Foldable.foldableArray)(dictPlus)))(Data_Functor.map(Data_Functor.functorFn)(Data_Distributive.distribute(Data_Distributive.distributiveFunction)(Data_Functor.functorArray))(Data_Distributive.distribute(Data_Distributive.distributiveFunction)(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorArray)(function (y) {
              return y;
          })(a)))));
      };
  };
  var elementify = function (dictIsEvent) {
      return function (tag) {
          return function (atts) {
              return function (children) {
                  var go = function (parent) {
                      return function (v) {
                          return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Unit.unit)))(function (me) {
                              return Data_Foldable.oneOf(Data_Foldable.foldableArray)((dictIsEvent.Alternative0()).Plus1())(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(unsafeElement(v)(me)(parent)(tag)), unsafeSetAttribute((dictIsEvent.Filterable1()).Functor1())(v)(me)(atts) ])(Data_Functor.map(Data_Functor.functorArray)(function (kid) {
                                  return kid(me)(v);
                              })(Data_Functor.map(Data_Functor.functorArray)(function (y) {
                                  return y;
                              })(children))));
                          }));
                      };
                  };
                  return go;
              };
          };
      };
  };
  var deku = function (dictIsEvent) {
      return function (root) {
          return function (elts) {
              return function (v) {
                  return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Unit.unit)))(function (me) {
                      return Data_Foldable.oneOf(Data_Foldable.foldableArray)((dictIsEvent.Alternative0()).Plus1())([ Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(v.makeRoot({
                          id: me,
                          root: root
                      })), (function (y) {
                          return y;
                      })(elts)(me)(v) ]);
                  }));
              };
          };
      };
  };
  exports["elementify"] = elementify;
  exports["text"] = text;
  exports["text_"] = text_;
  exports["deku"] = deku;
  exports["flatten"] = flatten;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.DOM"] = $PS["Deku.DOM"] || {};
  var exports = $PS["Deku.DOM"];
  var Control_Plus = $PS["Control.Plus"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];                
  var Xtype = (function () {
      function Xtype() {

      };
      Xtype.value = new Xtype();
      return Xtype;
  })();
  var Style = (function () {
      function Style() {

      };
      Style.value = new Style();
      return Style;
  })();
  var Src = (function () {
      function Src() {

      };
      Src.value = new Src();
      return Src;
  })();
  var OnInput = (function () {
      function OnInput() {

      };
      OnInput.value = new OnInput();
      return OnInput;
  })();
  var OnClick = (function () {
      function OnClick() {

      };
      OnClick.value = new OnClick();
      return OnClick;
  })();
  var Href = (function () {
      function Href() {

      };
      Href.value = new Href();
      return Href;
  })();
  var attrSpan_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrOnInputCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "input",
                  value: Deku_Attribute["cb'"](value)
              });
          };
      }
  };
  var attrOnClickCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "click",
                  value: Deku_Attribute["cb'"](value)
              });
          };
      }
  };
  var attrLi_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrInput_XtypeString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "type",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrImg_SrcString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "src",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrDiv_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrA_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var attrA_HrefString = {
      attr: function (v) {
          return function (value) {
              return Deku_Attribute.unsafeAttribute({
                  key: "href",
                  value: Deku_Attribute["prop'"](value)
              });
          };
      }
  };
  var ul = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("ul");
  };
  var ul_ = function (dictIsEvent) {
      return ul(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var span = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("span");
  };
  var span_ = function (dictIsEvent) {
      return span(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var pre = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("pre");
  };
  var pre_ = function (dictIsEvent) {
      return pre(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var li = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("li");
  };
  var li_ = function (dictIsEvent) {
      return li(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var input = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("input");
  };
  var img = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("img");
  };
  var i = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("i");
  };
  var i_ = function (dictIsEvent) {
      return i(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var hr = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("hr");
  };
  var hr_ = function (dictIsEvent) {
      return hr(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var div = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("div");
  };
  var div_ = function (dictIsEvent) {
      return div(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var code = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("code");
  };
  var code_ = function (dictIsEvent) {
      return code(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var button = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("button");
  };
  var button_ = function (dictIsEvent) {
      return button(dictIsEvent)(Control_Plus.empty((dictIsEvent.Alternative0()).Plus1()));
  };
  var a = function (dictIsEvent) {
      return Deku_Control.elementify(dictIsEvent)("a");
  };
  exports["Href"] = Href;
  exports["Src"] = Src;
  exports["Style"] = Style;
  exports["Xtype"] = Xtype;
  exports["OnClick"] = OnClick;
  exports["OnInput"] = OnInput;
  exports["a"] = a;
  exports["button"] = button;
  exports["button_"] = button_;
  exports["code_"] = code_;
  exports["div"] = div;
  exports["div_"] = div_;
  exports["hr_"] = hr_;
  exports["i_"] = i_;
  exports["img"] = img;
  exports["input"] = input;
  exports["li_"] = li_;
  exports["pre_"] = pre_;
  exports["span"] = span;
  exports["span_"] = span_;
  exports["ul_"] = ul_;
  exports["attrA_HrefString"] = attrA_HrefString;
  exports["attrImg_SrcString"] = attrImg_SrcString;
  exports["attrA_StyleString"] = attrA_StyleString;
  exports["attrDiv_StyleString"] = attrDiv_StyleString;
  exports["attrLi_StyleString"] = attrLi_StyleString;
  exports["attrSpan_StyleString"] = attrSpan_StyleString;
  exports["attrInput_XtypeString"] = attrInput_XtypeString;
  exports["attrOnClickCb"] = attrOnClickCb;
  exports["attrOnInputCb"] = attrOnInputCb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Types"] = $PS["Deku.Example.Docs.Types"] || {};
  var exports = $PS["Deku.Example.Docs.Types"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];                
  var Intro = (function () {
      function Intro() {

      };
      Intro.value = new Intro();
      return Intro;
  })();
  var HelloWorld = (function () {
      function HelloWorld() {

      };
      HelloWorld.value = new HelloWorld();
      return HelloWorld;
  })();
  var SimpleComponent = (function () {
      function SimpleComponent() {

      };
      SimpleComponent.value = new SimpleComponent();
      return SimpleComponent;
  })();
  var PURSX1 = (function () {
      function PURSX1() {

      };
      PURSX1.value = new PURSX1();
      return PURSX1;
  })();
  var PURSX2 = (function () {
      function PURSX2() {

      };
      PURSX2.value = new PURSX2();
      return PURSX2;
  })();
  var Events = (function () {
      function Events() {

      };
      Events.value = new Events();
      return Events;
  })();
  var Effects = (function () {
      function Effects() {

      };
      Effects.value = new Effects();
      return Effects;
  })();
  var Subgraph = (function () {
      function Subgraph() {

      };
      Subgraph.value = new Subgraph();
      return Subgraph;
  })();
  var Portals = (function () {
      function Portals() {

      };
      Portals.value = new Portals();
      return Portals;
  })();
  var genericPage_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return Intro.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return HelloWorld.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return SimpleComponent.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return PURSX1.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return PURSX2.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return Events.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return Effects.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
              return Subgraph.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))) {
              return Portals.value;
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Types (line 20, column 1 - line 20, column 31): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Intro) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof HelloWorld) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof SimpleComponent) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof PURSX1) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
          };
          if (x instanceof PURSX2) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
          };
          if (x instanceof Events) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
          };
          if (x instanceof Effects) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
          };
          if (x instanceof Subgraph) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
          };
          if (x instanceof Portals) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))))));
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Types (line 20, column 1 - line 20, column 31): " + [ x.constructor.name ]);
      }
  };
  var eqPage = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Intro && y instanceof Intro) {
                  return true;
              };
              if (x instanceof HelloWorld && y instanceof HelloWorld) {
                  return true;
              };
              if (x instanceof SimpleComponent && y instanceof SimpleComponent) {
                  return true;
              };
              if (x instanceof PURSX1 && y instanceof PURSX1) {
                  return true;
              };
              if (x instanceof PURSX2 && y instanceof PURSX2) {
                  return true;
              };
              if (x instanceof Events && y instanceof Events) {
                  return true;
              };
              if (x instanceof Effects && y instanceof Effects) {
                  return true;
              };
              if (x instanceof Subgraph && y instanceof Subgraph) {
                  return true;
              };
              if (x instanceof Portals && y instanceof Portals) {
                  return true;
              };
              return false;
          };
      }
  };
  var showPage = {
      show: function (s) {
          return Data_Show_Generic.genericShow(genericPage_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Intro";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "HelloWorld";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "SimpleComponent";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "PURSX1";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "PURSX2";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Events";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Effects";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Subgraph";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Portals";
              }
          }))))))))))(s);
      }
  };
  var hashablePage = {
      hash: (function () {
          var $59 = Data_Hashable.hash(Data_Hashable.hashableString);
          var $60 = Data_Show.show(showPage);
          return function ($61) {
              return $59($60($61));
          };
      })(),
      Eq0: function () {
          return eqPage;
      }
  };
  exports["Intro"] = Intro;
  exports["HelloWorld"] = HelloWorld;
  exports["SimpleComponent"] = SimpleComponent;
  exports["PURSX1"] = PURSX1;
  exports["PURSX2"] = PURSX2;
  exports["Events"] = Events;
  exports["Effects"] = Effects;
  exports["Subgraph"] = Subgraph;
  exports["Portals"] = Portals;
  exports["hashablePage"] = hashablePage;
})(PS);
(function(exports) {
  exports.scrollToTop_ = function () {
	  window.scrollTo(0, 0);
  };
})(PS["Deku.Example.Docs.Util"] = PS["Deku.Example.Docs.Util"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Util"] = $PS["Deku.Example.Docs.Util"] || {};
  var exports = $PS["Deku.Example.Docs.Util"];
  var $foreign = $PS["Deku.Example.Docs.Util"];
  var scrollToTop = $foreign.scrollToTop_;
  exports["scrollToTop"] = scrollToTop;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Pursx"] = $PS["Deku.Pursx"] || {};
  var exports = $PS["Deku.Pursx"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var PursxElement = function (x) {
      return x;
  };
  var pursxToElementNil = function (dictPlus) {
      return {
          pursxToElement: function (v) {
              return function (v1) {
                  return {
                      cache: Foreign_Object.empty,
                      element: function (v2) {
                          return function (v3) {
                              return Control_Plus.empty(dictPlus);
                          };
                      }
                  };
              };
          },
          Plus0: function () {
              return dictPlus;
          }
      };
  };
  var pursxToElement = function (dict) {
      return dict.pursxToElement;
  };
  var pursxToElementConsAttr = function (dictCons) {
      return function (dictPursxToElement) {
          return function (dictIsSymbol) {
              return {
                  pursxToElement: function (v) {
                      return function (r) {
                          var v1 = pursxToElement(dictPursxToElement)(Type_Proxy["Proxy"].value)(r);
                          return {
                              cache: Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(true)(v1.cache),
                              element: function (parent) {
                                  return function (v2) {
                                      return Control_Alt.alt((dictPursxToElement.Plus0()).Alt0())(Data_Functor.map(((dictPursxToElement.Plus0()).Alt0()).Functor0())(Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(Deku_Attribute.unsafeUnAttribute)(function (v3) {
                                          return v2.setAttribute({
                                              id: Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value),
                                              key: v3.key,
                                              value: v3.value
                                          });
                                      }))(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r)))(v1.element(parent)(v2));
                                  };
                              }
                          };
                      };
                  },
                  Plus0: dictPursxToElement.Plus0
              };
          };
      };
  };
  var pursxToElementConsElt = function (dictCons) {
      return function (dictPursxToElement) {
          return function (dictIsSymbol) {
              return {
                  pursxToElement: function (v) {
                      return function (r) {
                          var v1 = Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r);
                          var v2 = pursxToElement(dictPursxToElement)(Type_Proxy["Proxy"].value)(r);
                          return {
                              cache: Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(false)(v2.cache),
                              element: function (parent) {
                                  return function (di) {
                                      return Control_Alt.alt((dictPursxToElement.Plus0()).Alt0())(v1(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(di))(v2.element(parent)(di));
                                  };
                              }
                          };
                      };
                  },
                  Plus0: dictPursxToElement.Plus0
              };
          };
      };
  };                                    
  var nut = PursxElement;
  var makePursx$prime = function (dictIsSymbol) {
      return function (dictIsSymbol1) {
          return function (dictPXStart) {
              return function (dictRowToList) {
                  return function (dictPursxToElement) {
                      return function (dictIsEvent) {
                          return function (verb) {
                              return function (html) {
                                  return function (r) {
                                      var go = function (parent) {
                                          return function (v) {
                                              return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Unit.unit)))(function (me) {
                                                  var v1 = pursxToElement(dictPursxToElement)(Type_Proxy["Proxy"].value)(r);
                                                  return Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(v.makePursx({
                                                      id: me,
                                                      parent: parent,
                                                      cache: v1.cache,
                                                      html: Data_Symbol.reflectSymbol(dictIsSymbol)(html),
                                                      verb: Data_Symbol.reflectSymbol(dictIsSymbol1)(verb)
                                                  })))(v1.element(me)(v));
                                              }));
                                          };
                                      };
                                      return go;
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var makePursx = function (dictIsSymbol) {
      return function (dictPXStart) {
          return function (dictRowToList) {
              return function (dictPursxToElement) {
                  return function (dictIsEvent) {
                      return makePursx$prime(dictIsSymbol)({
                          reflectSymbol: function () {
                              return "~";
                          }
                      })()()(dictPursxToElement)(dictIsEvent)(Type_Proxy["Proxy"].value);
                  };
              };
          };
      };
  };
  var psx = function (dictIsSymbol) {
      return function (dictPXStart) {
          return function (dictPursxToElement) {
              return function (dictIsEvent) {
                  return function (px) {
                      return makePursx(dictIsSymbol)()()(dictPursxToElement)(dictIsEvent)(px)({});
                  };
              };
          };
      };
  };
  exports["nut"] = nut;
  exports["psx"] = psx;
  exports["makePursx"] = makePursx;
  exports["makePursx'"] = makePursx$prime;
  exports["pursxToElementConsElt"] = pursxToElementConsElt;
  exports["pursxToElementConsAttr"] = pursxToElementConsAttr;
  exports["pursxToElementNil"] = pursxToElementNil;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Component"] = $PS["Deku.Example.Docs.Component"] || {};
  var exports = $PS["Deku.Example.Docs.Component"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var components = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>A Simple Component</h1>\x0a\x0a  <h3>Slightly more bells and whistles</h3>\x0a  <p>\x0a    Let's look at an example with several different DOM tags. There are also a few different syntax options depending on what tune your fingers wish to type.\x0a  </p>\x0a\x0a  ~code~\x0a\x0a  <p>And here's what it produces:</p>\x0a\x0a  <blockquote> ~result~ </blockquote>\x0a\x0a  <h1>Elements all the way down</h1>\x0a  <p>Deku encodes the DOM using functions that represent elements. To create an element with a custom tag called <code>foo</code>, you can call <code>elementify \"foo\"</code> and that will creat a custom <code>foo</code> tag in your DOM.</p>\x0a  <p>The encoding of elements in Deku is not unlike that in React or Halogen. It's a tree, like the Deku tree. So go nuts!</p>\x0a\x0a  <h1>Attributes</h1>\x0a  <p>Elements postfixed with an underscore do not take attributes. That is un-fun, so in this example, you see attributes as well! Attributes like an element's style or id are specified as the first argument to an underscore-less element. Note that, if you have multiple attributes, you have to separate them with <code>alt</code>, aka \"the tie fighter.\"</p>\x0a\x0a  <p>As an example, we made the input a range slider using <code>pure (Xtype := \"range\")</code>. Unlike Halogen, there are no checks to make sure you give a valid string. So if you want your range slider to have the value of true, you can. One day, I may build some validators, but passing strings works decently well here.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, we built a simple component. In the next section, we'll recreate the exact same element using a different input syntax called <a ~next~ style=\"cursor:pointer;\">Pursx</a>.</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Deku.Control (flatten, text_)\x0aimport Deku.DOM as D\x0aimport Deku.Attribute ((:=))\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0a\x0amain :: Effect Unit\x0amain = unit \ud83d\ude80 \\_ _ ->\x0a  flatten\x0a    [ D.button_ [ text_ \"I do nothing\" ]\x0a    , D.ul_ $ map (D.li_ <<< pure <<< text_) [ \"A\", \"B\", \"C\" ]\x0a    , D.div_\x0a        [ D.a (pure $ D.Href := \"https://example.com\")\x0a            [ text_ \"foo \" ]\x0a        , D.i_ [ text_ \" bar \" ]\x0a        , D.span (pure $ D.Style := \"font-weight: 800;\")\x0a            [ text_ \" baz\" ]\x0a        ]\x0a    , D.div_\x0a        [ D.div_\x0a            [ D.div_ [ D.input (pure $ D.Xtype := \"range\") [] ]\x0a            ]\x0a        ]\x0a    ]") ]) ])),
                  result: Deku_Pursx.nut(Deku_DOM.div_(dictIsEvent)([ Deku_DOM.button_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("I do nothing") ]), Deku_DOM.ul_(dictIsEvent)(Data_Functor.map(Data_Functor.functorArray)((function () {
                      var $2 = Deku_DOM.li_(dictIsEvent);
                      var $3 = Control_Applicative.pure(Control_Applicative.applicativeArray);
                      var $4 = Deku_Control.text_(dictIsEvent);
                      return function ($5) {
                          return $2($3($4($5)));
                      };
                  })())([ "A", "B", "C" ])), Deku_DOM.div_(dictIsEvent)([ Deku_DOM.a(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrA_HrefString)(Deku_DOM.Href.value)("https://example.com")))([ Deku_Control.text_(dictIsEvent)("foo ") ]), Deku_DOM.i_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)(" bar ") ]), Deku_DOM.span(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrSpan_StyleString)(Deku_DOM.Style.value)("font-weight: 800;")))([ Deku_Control.text_(dictIsEvent)(" baz") ]) ]), Deku_DOM.div_(dictIsEvent)([ Deku_DOM.div_(dictIsEvent)([ Deku_DOM.div_(dictIsEvent)([ Deku_DOM.input(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrInput_XtypeString)(Deku_DOM.Xtype.value)("range")))([  ]) ]) ]) ]) ])),
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.PURSX1.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["components"] = components;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Subgraph"] = $PS["Deku.Subgraph"] || {};
  var exports = $PS["Deku.Subgraph"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Unit = $PS["Data.Unit"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];                
  var InsertOrUpdate = (function () {
      function InsertOrUpdate(value0) {
          this.value0 = value0;
      };
      InsertOrUpdate.create = function (value0) {
          return new InsertOrUpdate(value0);
      };
      return InsertOrUpdate;
  })();
  var SendToTop = (function () {
      function SendToTop() {

      };
      SendToTop.value = new SendToTop();
      return SendToTop;
  })();
  var Remove = (function () {
      function Remove() {

      };
      Remove.value = new Remove();
      return Remove;
  })();
  var subgraph = function (dictHashable) {
      return function (dictIsEvent) {
          return function (mods) {
              return function (scenes) {
                  var go = function (parent) {
                      return function (v) {
                          return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (id) {
                              return Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(v.makeSubgraph({
                                  id: id,
                                  parent: parent,
                                  scenes: scenes
                              })))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (v1) {
                                  if (v1.value1 instanceof Remove) {
                                      return v.removeSubgraph({
                                          id: id,
                                          pos: Data_Hashable.hash(dictHashable)(v1.value0),
                                          index: v1.value0
                                      });
                                  };
                                  if (v1.value1 instanceof SendToTop) {
                                      return v.sendSubgraphToTop({
                                          id: id,
                                          pos: Data_Hashable.hash(dictHashable)(v1.value0),
                                          index: v1.value0
                                      });
                                  };
                                  if (v1.value1 instanceof InsertOrUpdate) {
                                      return v.insertOrUpdateSubgraph({
                                          id: id,
                                          pos: Data_Hashable.hash(dictHashable)(v1.value0),
                                          index: v1.value0,
                                          env: v1.value1.value0
                                      });
                                  };
                                  throw new Error("Failed pattern match at Deku.Subgraph (line 39, column 36 - line 43, column 54): " + [ v1.value1.constructor.name ]);
                              })(mods));
                          })(FRP_Behavior.sample_(dictIsEvent)(v.ids)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Unit.unit))));
                      };
                  };
                  return go;
              };
          };
      };
  };
  exports["InsertOrUpdate"] = InsertOrUpdate;
  exports["Remove"] = Remove;
  exports["subgraph"] = subgraph;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Effects"] = $PS["Deku.Example.Docs.Effects"] || {};
  var exports = $PS["Deku.Example.Docs.Effects"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Deku_Subgraph = $PS["Deku.Subgraph"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Result = (function () {
      function Result(value0) {
          this.value0 = value0;
      };
      Result.create = function (value0) {
          return new Result(value0);
      };
      return Result;
  })();
  var px = Type_Proxy["Proxy"].value;
  var clickText = "Click to get some random user data.";
  var clickCb = function (push) {
      return Deku_Attribute.cb(Data_Function["const"](function __do() {
          push(Loading.value)();
          return Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request({
              method: new Data_Either.Left(Data_HTTP_Method.GET.value),
              url: "https://randomuser.me/api/",
              headers: Affjax.defaultRequest.headers,
              content: Affjax.defaultRequest.content,
              username: Affjax.defaultRequest.username,
              password: Affjax.defaultRequest.password,
              withCredentials: Affjax.defaultRequest.withCredentials,
              responseFormat: Affjax_ResponseFormat.json,
              timeout: Affjax.defaultRequest.timeout
          }))(function (result) {
              if (result instanceof Data_Either.Left) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(push(new Result("GET /api response failed to decode: " + Affjax.printError(result.value0))));
              };
              if (result instanceof Data_Either.Right) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(push(Result.create(Data_Argonaut_Core.stringifyWithIndent(2)(result.value0.body))));
              };
              throw new Error("Failed pattern match at Deku.Example.Docs.Effects (line 43, column 9 - line 50, column 48): " + [ result.constructor.name ]);
          }))();
      }));
  };
  var effects = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>Effects</h1>\x0a\x0a  <h2>Let's make a network call</h2>\x0a  <p>\x0a    This example is similar to the previous one in its design: the looping function is called in response to an event. The difference is that the response isn't immediate. Instead, we wait for the result of a network call.\x0a  </p>\x0a\x0a  ~code~\x0a\x0a  <p>And here's what it produces:</p>\x0a\x0a  <blockquote> ~result~ </blockquote>\x0a\x0a  <h2>Arbitrary effects</h2>\x0a  <p>Because all event listeners execute in the effect monad, you can do more or less whatever you want. Make a network call, run a monad transformer stack just for fun, play music using purescript-wags. The sky's the limit!</p>\x0a\x0a  <p>Another useful pattern when working with effects is to throttle input. For example, if we are making a network call, we may want to show a loading indicator and prevent additional network calls. This can be achieved by setting the callback to a no-op while the network call is executing, as shown in the example above.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>It is also possible to handle events (and by extension effectful actions in events, like network calls) in Pursx. Let's see how in the <a ~next~ style=\"cursor:pointer;\">second Pursx section</a>.</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Affjax as AX\x0aimport Affjax.ResponseFormat as ResponseFormat\x0aimport Control.Alt ((<|>))\x0aimport Data.Argonaut.Core (stringifyWithIndent)\x0aimport Data.Either (Either(..))\x0aimport Data.Filterable (compact, filterMap)\x0aimport Data.HTTP.Method (Method(..))\x0aimport Data.Maybe (Maybe(..))\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Deku.Attribute (Cb, cb, (:=))\x0aimport Deku.Control (flatten, text)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0aimport Effect.Aff (launchAff_)\x0aimport Effect.Class (liftEffect)\x0aimport FRP.Event (mapAccum)\x0a\x0adata UIAction = Initial | Loading | Result String\x0a\x0aclickCb :: (UIAction -> Effect Unit) -> Cb\x0aclickCb push = cb\x0a  ( const do\x0a      push Loading\x0a      launchAff_ $ do\x0a        result <- AX.request\x0a          ( AX.defaultRequest\x0a              { url = \"https://randomuser.me/api/\"\x0a              , method = Left GET\x0a              , responseFormat = ResponseFormat.json\x0a              }\x0a          )\x0a        case result of\x0a          Left err -> liftEffect $ push\x0a            $ Result\x0a              ( \"GET /api response failed to decode: \" <>\x0a                  AX.printError err\x0a              )\x0a          Right response -> liftEffect $ push $ Result $\x0a            stringifyWithIndent 2 response.body\x0a  )\x0a\x0aclickText = \"Click to get some random user data.\" :: String\x0a\x0amain :: Effect Unit\x0amain = Initial \ud83d\ude80 \\push event ->\x0a  let\x0a    loadingOrResult = filterMap\x0a      ( case _ of\x0a          Loading -> Just $ Left unit\x0a          Result s -> Just $ Right s\x0a          _ -> Nothing\x0a      )\x0a      event\x0a    loading = filterMap\x0a      ( case _ of\x0a          Left _ -> Just unit\x0a          _ -> Nothing\x0a      )\x0a      loadingOrResult\x0a    result = filterMap\x0a      ( case _ of\x0a          Right s -> Just s\x0a          _ -> Nothing\x0a      )\x0a      loadingOrResult\x0a  in\x0a    flatten\x0a      [ D.div_\x0a          [ D.button (pure (D.OnClick := clickCb push))\x0a              [ text\x0a                  ( pure clickText\x0a                      <|> (loading $> \"Loading...\")\x0a                      <|> (result $> clickText)\x0a                  )\x0a              ]\x0a          ]\x0a      , D.div\x0a          ( (pure (D.Style := \"display: none;\")) <|>\x0a              ( compact\x0a                  ( mapAccum\x0a                      ( \\_ b -> (b && false) /\\\x0a                          if b then Just unit else Nothing\x0a                      )\x0a                      result\x0a                      true\x0a                  ) $> (D.Style := \"display: block;\")\x0a              )\x0a          )\x0a          [ D.pre_ [ D.code_ [ text (pure \"\" <|> result) ] ] ]\x0a      ]\x0a") ]) ])),
                  result: Deku_Pursx.nut(Deku_Subgraph.subgraph(Data_Hashable.hashableUnit)(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Data_Unit.unit, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))))(function (v) {
                      return function (push) {
                          return function (event$prime) {
                              var event = Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Either.hush)(event$prime));
                              var loadingOrResult = Data_Filterable.filterMap(dictIsEvent.Filterable1())(function (v1) {
                                  if (v1 instanceof Loading) {
                                      return Data_Maybe.Just.create(new Data_Either.Left(Data_Unit.unit));
                                  };
                                  if (v1 instanceof Result) {
                                      return Data_Maybe.Just.create(new Data_Either.Right(v1.value0));
                                  };
                                  return Data_Maybe.Nothing.value;
                              })(event);
                              var loading = Data_Filterable.filterMap(dictIsEvent.Filterable1())(function (v1) {
                                  if (v1 instanceof Data_Either.Left) {
                                      return new Data_Maybe.Just(Data_Unit.unit);
                                  };
                                  return Data_Maybe.Nothing.value;
                              })(loadingOrResult);
                              var result = Data_Filterable.filterMap(dictIsEvent.Filterable1())(function (v1) {
                                  if (v1 instanceof Data_Either.Right) {
                                      return new Data_Maybe.Just(v1.value0);
                                  };
                                  return Data_Maybe.Nothing.value;
                              })(loadingOrResult);
                              return Deku_Control.flatten((dictIsEvent.Alternative0()).Plus1())([ Deku_DOM.div_(dictIsEvent)([ Deku_DOM.button(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(clickCb(push))))([ Deku_Control.text(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(clickText))(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor1())(loading)("Loading...")))(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor1())(result)(clickText))) ]) ]), Deku_DOM.div(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrDiv_StyleString)(Deku_DOM.Style.value)("display: none;")))(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor1())(Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(FRP_Event_Class.mapAccum(dictIsEvent)(function (v1) {
                                  return function (b) {
                                      return new Data_Tuple.Tuple(b && false, (function () {
                                          if (b) {
                                              return new Data_Maybe.Just(Data_Unit.unit);
                                          };
                                          return Data_Maybe.Nothing.value;
                                      })());
                                  };
                              })(result)(true)))(Deku_Attribute.attr(Deku_DOM.attrDiv_StyleString)(Deku_DOM.Style.value)("display: block;"))))([ Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(""))(result)) ]) ]) ]) ]);
                          };
                      };
                  })),
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.PURSX2.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["effects"] = effects;
})(PS);
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                  
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  exports["fromEventTarget"] = fromEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports._target = function (e) {
    return e.target;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var target = function ($1) {
      return Data_Nullable.toMaybe($foreign["_target"]($1));
  };
  exports["target"] = target;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.valueAsNumber = function (input) {
    return function () {
      return input.valueAsNumber;
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                  
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromElement"] = fromElement;
  exports["valueAsNumber"] = $foreign.valueAsNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Events"] = $PS["Deku.Example.Docs.Events"] || {};
  var exports = $PS["Deku.Example.Docs.Events"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Deku_Subgraph = $PS["Deku.Subgraph"];
  var Effect = $PS["Effect"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];                
  var UIShown = (function () {
      function UIShown() {

      };
      UIShown.value = new UIShown();
      return UIShown;
  })();
  var ButtonClicked = (function () {
      function ButtonClicked() {

      };
      ButtonClicked.value = new ButtonClicked();
      return ButtonClicked;
  })();
  var SliderMoved = (function () {
      function SliderMoved(value0) {
          this.value0 = value0;
      };
      SliderMoved.create = function (value0) {
          return new SliderMoved(value0);
      };
      return SliderMoved;
  })();
  var eqUIEvents = {
      eq: function (x) {
          return function (y) {
              if (x instanceof UIShown && y instanceof UIShown) {
                  return true;
              };
              if (x instanceof ButtonClicked && y instanceof ButtonClicked) {
                  return true;
              };
              if (x instanceof SliderMoved && y instanceof SliderMoved) {
                  return x.value0 === y.value0;
              };
              return false;
          };
      }
  };
  var px = Type_Proxy["Proxy"].value;
  var events = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>Events</h1>\x0a\x0a  <h2>Listening to the DOM</h2>\x0a  <p>\x0a    We'll spice up the previous example by adding an event listener to our button. When we do, Deku will keep track of how many times we clicked it. The same goes for a range slider, whose current value is displayed underneath it.\x0a  </p>\x0a\x0a  ~code~\x0a\x0a  <p>And here's what it produces:</p>\x0a\x0a  <blockquote> ~result~ </blockquote>\x0a\x0a  <h1>Event handling</h1>\x0a  <p>All DOM event handlers, like <code>OnClick</code> and <code>OnInput</code>, can be set with a value of type <code>Cb</code>. This type is a newtype around <code>(Event -> Effect Boolean)</code>. In order to actually trigger the event, you'll use the <code>push</code> function passed to the creation function. The push function has a signature of <code>(push -> Effect Unit)</code>. Here, the type one can push in to <code>push</code> is UIEvents. Whenever a push happens, our `Event` receives it and all attributes are updated accordingly.</p>\x0a\x0a  <h1>Attribute updates</h1>\x0a  <p>In Deku, attributes are `Event`-s. This means that, when you send something to `push`, if you want an attribute to change, the event being pushed to needs to be used to create the attribute event. That's what's happening in our example: the event is used <i>both</i> to control the click and the range slider.</p>\x0a\x0a  <p>If every attribute responded to every event, Deku would become very slow. Thankfully, there's a solution. `Event` implements the `Filterable` typeclass, and when you filter an `Event`, you mute the filtered-out parts for downstream consumers.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, saw how to react to events using the looping function in combination with change. In the next section, we'll use a similar mechanism to deal with arbitrary <a ~next~ style=\"cursor:pointer;\">effects</a>.</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Filterable (filter, filterMap)\x0aimport Data.Foldable (for_, oneOfMap)\x0aimport Data.Maybe (Maybe(..))\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Deku.Attribute (cb, (:=))\x0aimport Deku.Control (text, text_)\x0aimport Deku.DOM as D\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0aimport FRP.Event (mapAccum)\x0aimport Web.DOM.Element (fromEventTarget)\x0aimport Web.Event.Event (target)\x0aimport Web.HTML.HTMLInputElement (fromElement, valueAsNumber)\x0a\x0adata UIEvents = UIShown | ButtonClicked | SliderMoved Number\x0aderive instance Eq UIEvents\x0a\x0amain :: Effect Unit\x0amain = UIShown \ud83d\ude80 \\push event ->\x0a  D.div_\x0a    [ D.button\x0a        (pure (D.OnClick := cb (const $ push ButtonClicked)))\x0a        [ text_ \"Click\" ]\x0a    , D.div_\x0a        [ text\x0a            ( (pure \"Val: 0\") <|>\x0a                ( mapAccum (const $ \\x -> (x + 1) /\\ x)\x0a                    (filter (eq ButtonClicked) event)\x0a                    0\x0a                    # map (append \"Val: \" <<< show)\x0a                )\x0a            )\x0a        ]\x0a    , D.div_\x0a        [ D.input\x0a            ( oneOfMap pure\x0a                [ D.Xtype := \"range\"\x0a                , D.OnInput := cb \\e -> for_\x0a                    ( target e\x0a                        >>= fromEventTarget\x0a                        >>= fromElement\x0a                    )\x0a                    ( valueAsNumber\x0a                        >=> push <<< SliderMoved\x0a                    )\x0a                ]\x0a            )\x0a            []\x0a        , D.div_\x0a            [ text\x0a                ( (pure \"Val: 50\") <|>\x0a                    ( filterMap\x0a                        ( case _ of\x0a                            SliderMoved n -> Just n\x0a                            _ -> Nothing\x0a                        )\x0a                        event\x0a                        # map (append \"Val: \" <<< show)\x0a                    )\x0a                )\x0a            ]\x0a        ]\x0a    ]\x0a") ]) ])),
                  result: Deku_Pursx.nut(Deku_Subgraph.subgraph(Data_Hashable.hashableUnit)(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Data_Unit.unit, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))))(function (v) {
                      return function (push) {
                          return function (event$prime) {
                              var event = Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Either.hush)(event$prime));
                              return Deku_Control.flatten((dictIsEvent.Alternative0()).Plus1())([ Deku_DOM.button(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](push(ButtonClicked.value))))))([ Deku_Control.text_(dictIsEvent)("Click") ]), Deku_DOM.div_(dictIsEvent)([ Deku_Control.text(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())("Val: 0"))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())((function () {
                                  var $15 = Data_Semigroup.append(Data_Semigroup.semigroupString)("Val: ");
                                  var $16 = Data_Show.show(Data_Show.showInt);
                                  return function ($17) {
                                      return $15($16($17));
                                  };
                              })())(FRP_Event_Class.mapAccum(dictIsEvent)(Data_Function["const"](function (x) {
                                  return new Data_Tuple.Tuple(x + 1 | 0, x);
                              }))(Data_Filterable.filter(dictIsEvent.Filterable1())(Data_Eq.eq(eqUIEvents)(ButtonClicked.value))(event))(1)))) ]), Deku_DOM.div_(dictIsEvent)([ Deku_DOM.input(dictIsEvent)(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)((dictIsEvent.Alternative0()).Plus1())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0()))([ Deku_Attribute.attr(Deku_DOM.attrInput_XtypeString)(Deku_DOM.Xtype.value)("range"), Deku_Attribute.attr(Deku_DOM.attrOnInputCb)(Deku_DOM.OnInput.value)(Deku_Attribute.cb(function (e) {
                                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Web_Event_Event.target(e))(Web_DOM_Element.fromEventTarget))(Web_HTML_HTMLInputElement.fromElement))(Control_Bind.composeKleisli(Effect.bindEffect)(Web_HTML_HTMLInputElement.valueAsNumber)(function ($18) {
                                      return push(SliderMoved.create($18));
                                  }));
                              })) ]))([  ]), Deku_DOM.div_(dictIsEvent)([ Deku_Control.text(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())("Val: 50"))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())((function () {
                                  var $19 = Data_Semigroup.append(Data_Semigroup.semigroupString)("Val: ");
                                  var $20 = Data_Show.show(Data_Show.showNumber);
                                  return function ($21) {
                                      return $19($20($21));
                                  };
                              })())(Data_Filterable.filterMap(dictIsEvent.Filterable1())(function (v1) {
                                  if (v1 instanceof SliderMoved) {
                                      return new Data_Maybe.Just(v1.value0);
                                  };
                                  return Data_Maybe.Nothing.value;
                              })(event)))) ]) ]) ]);
                          };
                      };
                  })),
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Effects.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["events"] = events;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.HelloWorld"] = $PS["Deku.Example.Docs.HelloWorld"] || {};
  var exports = $PS["Deku.Example.Docs.HelloWorld"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var helloWorld = function (dictPlus) {
      return function (dictIsEvent) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>Hello world</h1>\x0a\x0a  <h3>A small example</h3>\x0a\x0a  <p>Here is \"hello world\" in Deku. In this and all the following sections, we'll start with a full example, and we'll pick it apart afterwards.</p>\x0a\x0a  ~code~\x0a\x0a  <p>And here's what it produces:</p>\x0a\x0a  <blockquote> ~result~ </blockquote>\x0a\x0a  <p>You gotta start somewhere!</p>\x0a\x0a  <h2>Our top-level component</h2>\x0a\x0a  <p>Deku sets up shop in an arbitrary DOM component. In the main function above, we use \ud83d\ude80 to automatically insert our Deku tree into the body.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>Now that we have our setup running, let's make a more interesting <a ~next~ style=\"cursor:pointer;\">component</a>.</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Deku.Control (text_)\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0a\x0amain :: Effect Unit\x0amain = unit \ud83d\ude80 \\_ _ -> text_ \"Hello world\"") ]) ])),
                  result: Deku_Pursx.nut(Deku_DOM.div_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("Hello world") ])),
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.SimpleComponent.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["helloWorld"] = helloWorld;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Intro"] = $PS["Deku.Example.Docs.Intro"] || {};
  var exports = $PS["Deku.Example.Docs.Intro"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var intro = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>Deku</h1>\x0a\x0a  <h3>A web micro-framework written in PureScript</h3>\x0a\x0a  <p>Hi! You've found <a href=\"https://github.com/mikesol/purescript-deku\">Deku</a>.</p>\x0a\x0a  <p>Deku is the coolest web micro-framework that no one knows about yet. Except you, of course, as you're here. So welcome!</p>\x0a\x0a  <p>The main goal of Deku is speed. I made it for the purpose of creating interactive web-based musical instruments, but it's equally useful as a general-purpose web framework. Its standard event-handling patterns tend to outperform those of React and Vue by a factor of 1.5-2x.</p>\x0a\x0a  <p>This is the Deku documentation. Like most documentation, it's radically incomplete, hopelessly biased, and full of unfounded assumptions. That said, I hope it gets you started off on the right foot. If you have any questions, feel free ping me on the PureScript Discord.</p>\x0a\x0a  <p>This documentation is written in Deku and can be found <a href=\"https://github.com/mikesol/purescript-deku/tree/main/examples/docs\">here</a>. One good way to follow along is by using the Deku starter repo, which you can clone <a href=\"https://github.com/mikesol/purescript-deku-starter\">here</a>.</p>\x0a\x0a  <p>And now, without further ado, check out the <a ~next~ style=\"cursor:pointer;\">hello world section</a>!</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))(dictIsEvent)(px)({
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.HelloWorld.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["intro"] = intro;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Portal"] = $PS["Deku.Portal"] || {};
  var exports = $PS["Deku.Portal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];                
  var portal = function (dictIsEvent) {
      return function (elt) {
          return function (cf) {
              var go = function (parent) {
                  return function (v) {
                      return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v.ids)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Unit.unit)))(function (portalId) {
                          var cont = cf(function (eb) {
                              var gogo = function (par) {
                                  return function (v1) {
                                      return FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.mapFlipped((dictIsEvent.Filterable1()).Functor1())(FRP_Behavior.sample_(dictIsEvent)(v1.ids)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Data_Unit.unit)))(function (gatewayId) {
                                          return Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(v1.makeGateway({
                                              id: gatewayId,
                                              parent: par,
                                              portal: portalId
                                          })))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function ($15) {
                                              return v1.setPortal((function (v2) {
                                                  return {
                                                      id: gatewayId,
                                                      on: v2
                                                  };
                                              })($15));
                                          })(eb));
                                      }));
                                  };
                              };
                              return gogo;
                          });
                          return Data_Foldable.oneOf(Data_Foldable.foldableArray)((dictIsEvent.Alternative0()).Plus1())([ Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(v.makePortal({
                              id: portalId
                          })), elt(portalId)(v), cont(parent)(v) ]);
                      }));
                  };
              };
              return go;
          };
      };
  };
  exports["portal"] = portal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Portals"] = $PS["Deku.Example.Docs.Portals"] || {};
  var exports = $PS["Deku.Example.Docs.Portals"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Portal = $PS["Deku.Portal"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Deku_Subgraph = $PS["Deku.Subgraph"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Sg0 = (function () {
      function Sg0() {

      };
      Sg0.value = new Sg0();
      return Sg0;
  })();
  var Sg1 = (function () {
      function Sg1() {

      };
      Sg1.value = new Sg1();
      return Sg1;
  })();
  var showSgs = {
      show: function (v) {
          if (v instanceof Sg0) {
              return "Sg0";
          };
          if (v instanceof Sg1) {
              return "Sg1";
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Portals (line 30, column 1 - line 32, column 19): " + [ v.constructor.name ]);
      }
  };
  var eqSgs = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Sg0 && y instanceof Sg0) {
                  return true;
              };
              if (x instanceof Sg1 && y instanceof Sg1) {
                  return true;
              };
              return false;
          };
      }
  };
  var hashableSgs = {
      hash: (function () {
          var $31 = Data_Hashable.hash(Data_Hashable.hashableString);
          var $32 = Data_Show.show(showSgs);
          return function ($33) {
              return $31($32($33));
          };
      })(),
      Eq0: function () {
          return eqSgs;
      }
  };
  var px = Type_Proxy["Proxy"].value;
  var mySub = function (dictIsEvent) {
      return function (event) {
          return function (gateway0) {
              return function (gateway1) {
                  return function (sg) {
                      return function (v) {
                          return function (v1) {
                              return Deku_DOM.div_(dictIsEvent)([ gateway0(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())((function () {
                                  if (sg instanceof Sg0) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (sg instanceof Sg1) {
                                      return Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                                  };
                                  throw new Error("Failed pattern match at Deku.Example.Docs.Portals (line 51, column 13 - line 53, column 25): " + [ sg.constructor.name ]);
                              })())(event)), gateway1(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())((function () {
                                  if (sg instanceof Sg0) {
                                      return Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                                  };
                                  if (sg instanceof Sg1) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  throw new Error("Failed pattern match at Deku.Example.Docs.Portals (line 59, column 13 - line 61, column 30): " + [ sg.constructor.name ]);
                              })())(event)) ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var portals = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>Portals</h1>\x0a\x0a  <h2>Sending elements to distant lands</h2>\x0a  <p>\x0a    There are several common cases where you'll need to send part of the DOM from one location to another. These include:</p>\x0a  <ul>\x0a    <li>Videos that pop out to the side as a user scrolls.</li>\x0a    <li>Drag and drop.</li>\x0a    <li>Online HTML and SVG editors where elements need to change parents.</li>\x0a  </ul>\x0a  <p>In these cases, you can use portals to ship part of the DOM from one destination to another. In the code below, a portal containing an image is shifted between two subgraphs.</p>\x0a\x0a  ~code~\x0a\x0a  <p>And here's what it produces:</p>\x0a\x0a  <blockquote> ~result~ </blockquote>\x0a\x0a  <h2>The anatomy of a portal</h2>\x0a\x0a  <p>The <code>portal</code> function takes two arguments</p>\x0a\x0a  <ul>\x0a    <li><code>element</code> - the element that comprises the portal</li>\x0a    <li><code>continuation</code> - a function yielding element that potentially uses the portal</li>\x0a  </ul>\x0a  <p>The element yielded by the continuation will be displayed on the screen.</p>\x0a  <p>The continuation takes one argument: an <code>event Boolean</code> that indicates whether or not to display the portal. The portal will jump to whichever place in the DOM yielded true most recently. Be careful - you must send at least one true event to see your portal!</p>\x0a  <h2>Parting shot</h2>\x0a  <p>Thanks for checking out Deku! I had a blast writing it, I hope you have fun using it too \ud83d\ude0a</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Hashable (class Hashable, hash)\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Deku.Attribute (Attribute, cb, (:=))\x0aimport Deku.Control (flatten, text_)\x0aimport Deku.Core (Element, Subgraph)\x0aimport Deku.DOM as D\x0aimport Deku.Portal (portal)\x0aimport Deku.Subgraph (SubgraphAction(..), (@@))\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0aimport FRP.Event (class IsEvent)\x0a\x0adata UIEvents = UIShown | ButtonClicked | SliderMoved Number\x0aderive instance Eq UIEvents\x0a\x0adata Sgs = Sg0 | Sg1\x0aderive instance Eq Sgs\x0aderive instance Ord Sgs\x0ainstance Show Sgs where\x0a  show Sg0 = \"Sg0\"\x0a  show Sg1 = \"Sg1\"\x0ainstance Hashable Sgs where\x0a  hash = show >>> hash\x0a\x0amySub\x0a  :: forall env push event payload\x0a   . IsEvent event => event Boolean\x0a  -> (event Boolean -> Element event payload)\x0a  -> (event Boolean -> Element event payload)\x0a  -> Subgraph Sgs env push event payload\x0amySub event gateway0 gateway1 sg _ _ = D.div_\x0a  [ gateway0\x0a      ( map\x0a          ( case sg of\x0a              Sg0 -> identity\x0a              Sg1 -> not\x0a          )\x0a          event\x0a      )\x0a  , gateway1\x0a      ( map\x0a          ( case sg of\x0a              Sg0 -> not\x0a              Sg1 -> identity\x0a          )\x0a          event\x0a      )\x0a  ]\x0a\x0aimg0' :: forall event. Applicative event => event (Attribute D.Img_)\x0aimg0' = pure $ D.Src := \"https://picsum.photos/200\"\x0aimg1' :: forall event. Applicative event => event (Attribute D.Img_)\x0aimg1' = pure $ D.Src := \"https://picsum.photos/300\"\x0a\x0amain :: Effect Unit\x0amain = false \ud83d\ude80 \\push event ->\x0a  portal (D.img img0' []) \\img0 ->\x0a    portal (D.img img1' []) \\img1 ->\x0a      let eventBool = event <|> pure false in\x0a      flatten\x0a        [ ( pure (Sg0 /\\ InsertOrUpdate unit)\x0a              <|> pure (Sg1 /\\ InsertOrUpdate unit)\x0a          ) @@ mySub eventBool img0 img1\x0a        , D.button (map (\\e -> D.OnClick :=\x0a        cb (const (push $ not e))) eventBool)\x0a            [ text_ \"Shift images between portals\" ]\x0a        ]") ]) ])),
                  result: Deku_Pursx.nut(Deku_Subgraph.subgraph(Data_Hashable.hashableUnit)(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Data_Unit.unit, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))))(function (v) {
                      return function (push) {
                          return function (event$prime) {
                              var event = Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Either.hush)(event$prime));
                              return Deku_Portal.portal(dictIsEvent)(Deku_DOM.img(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrImg_SrcString)(Deku_DOM.Src.value)("https://picsum.photos/200")))([  ]))(function (img0) {
                                  return Deku_Portal.portal(dictIsEvent)(Deku_DOM.img(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrImg_SrcString)(Deku_DOM.Src.value)("https://picsum.photos/300")))([  ]))(function (img1) {
                                      var eventBool = Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(event)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(false));
                                      return Deku_Control.flatten((dictIsEvent.Alternative0()).Plus1())([ Deku_Subgraph.subgraph(hashableSgs)(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Sg0.value, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))))(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Sg1.value, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit)))))(mySub(dictIsEvent)(eventBool)(img0)(img1)), Deku_DOM.button(dictIsEvent)(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (e) {
                                          return Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](push(!e))));
                                      })(eventBool))([ Deku_Control.text_(dictIsEvent)("Shift images between portals") ]) ]);
                                  });
                              });
                          };
                      };
                  }))
              });
          };
      };
  };
  exports["portals"] = portals;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Pursx1"] = $PS["Deku.Example.Docs.Pursx1"] || {};
  var exports = $PS["Deku.Example.Docs.Pursx1"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Effect = $PS["Effect"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var myDom = Type_Proxy["Proxy"].value;
  var pursx1 = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>PursX 1</h1>\x0a\x0a  <h2>Like JSX... but better!</h2>\x0a\x0a  <p>Writing out PureScript code for the DOM only really makes sense if you're doing some sort of interesting manipulations on the JS layer. Otherwise, it's pretty tedious and longer than HTML. Thankfully, there's a solution: PursX.</p>\x0a\x0a  <p>PursX takes its name from JSX and it accomplishes a similar goal: the ability to embed HTML in your document. In the example below, we create the same exact component from the previous article, but in PursX.</p>\x0a\x0a  ~code~\x0a\x0a  <p>Here's what it produces:</p>\x0a\x0a  <blockquote> ~result~ </blockquote>\x0a\x0a  <h2>Puurrrrrr ...sx</h2>\x0a\x0a  <p>Static Pursx (meaning Pursx without any dynamic content) can be activated with the function <code>psx</code>.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In this section, we PursX to build the same component as the previous section. In the next section, we'll learn how to respond to <a ~next~ style=\"cursor:pointer;\">events</a>.</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Deku.Pursx (psx)\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0aimport Type.Proxy (Proxy(..))\x0a\x0amyDom = Proxy :: Proxy " + ("\"\"\"" + ("<div>\x0a    <button>I do nothing</button>\x0a    <ul>\x0a        <li>A</li>\x0a        <li>B</li>\x0a        <li>C</li>\x0a    </ul>\x0a    <div>\x0a        <a href=\"https://example.com\">foo</a>\x0a        <i>bar</i>\x0a        <span style=\"font-weight:800;\">baz</span>\x0a    </div>\x0a    <div><div></div><div><input type=\"range\"/></div></div>\x0a    </div>\x0a" + ("\"\"\"" + "\x0a\x0amain :: Effect Unit\x0amain = unit \ud83d\ude80 \\_ _ -> psx myDom")))) ]) ])),
                  result: Deku_Pursx.nut(Deku_Pursx.psx({
                      reflectSymbol: function () {
                          return "<div>\x0a    <button>I do nothing</button>\x0a    <ul>\x0a        <li>A</li>\x0a        <li>B</li>\x0a        <li>C</li>\x0a    </ul>\x0a    <div>\x0a        <a href=\"https://example.com\">foo</a>\x0a        <i>bar</i>\x0a        <span style=\"font-weight:800;\">baz</span>\x0a    </div>\x0a    <div><div></div><div><input type=\"range\"/></div></div>\x0a    </div>\x0a";
                      }
                  })()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))(dictIsEvent)(myDom)),
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Events.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["pursx1"] = pursx1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Pursx2"] = $PS["Deku.Example.Docs.Pursx2"] || {};
  var exports = $PS["Deku.Example.Docs.Pursx2"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Deku_Subgraph = $PS["Deku.Subgraph"];
  var Effect = $PS["Effect"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var px = Type_Proxy["Proxy"].value;
  var myDom = Type_Proxy["Proxy"].value;
  var pursx2 = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx["makePursx'"]({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>Pursx 2</h1>\x0a\x0a  <h2>Working with events and effects</h2>\x0a  <p>\x0a    PursX would be of limited utility if it could only render static content. In this section, we'll see how to make it dynamic, both by modifying existing elements and inserting entirely new ones.\x0a  </p>\x0a\x0a  <p>The example below is the same one from the Pursx 1 section with two differences. The first is that the background color of the second list item is set dynamically. The second is that there is a new button that is dynamically inserted.\x0a  </p>\x0a\x0a  ?code?\x0a\x0a  <p>And here's what it produces:</p>\x0a\x0a  <blockquote> ?result? </blockquote>\x0a\x0a  <h2>Dynamism in static content</h2>\x0a  <p>Named slots for dynamic content are added to PursX with between two tildes, like <code>~foo~</code>. This separator doesn't have to be a tilde - it can be set programatically as well (see the Deku/Pursx.purs module for an example of how that is done). Also, we no longer use the <code>psx</code> command. Instead, we use the infix operator <code>~~</code> followed by arguments to our template. In the case of dynamic attributes, the argument is a stream of attributes. In the case of a dynamic section, the arguments are of type <code>Element</code>.</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>In more complicated apps, like this documentation, we'll want to split up our components into sub-components and create a way for them to communicate back and forth. In the next section, we'll see one way to do this via <a ?next? style=\"cursor:pointer;\">subgraphs</a>.</p>\x0a</div>";
                  }
              })({
                  reflectSymbol: function () {
                      return "?";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(Type_Proxy["Proxy"].value)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Compactable (compact)\x0aimport Data.Maybe (Maybe(..))\x0aimport Deku.Attribute (cb, (:=))\x0aimport Deku.Control (text)\x0aimport Deku.DOM as D\x0aimport Deku.Pursx (nut, (~~))\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0aimport Type.Proxy (Proxy(..))\x0a\x0amyDom = Proxy :: Proxy " + ("\"\"\"" + ("<div>\x0a        <button>I do nothing</button>\x0a        <ul>\x0a          <li>A</li>\x0a          <li ~myli~>B</li>\x0a          <li>C</li>\x0a        </ul>\x0a        <div>\x0a          <a href=\"https://github.com/mikesol/purescript-deku\"></a>\x0a          <i>bar</i>\x0a          ~somethingNew~\x0a          <span style=\"font-weight:800;\">baz</span>\x0a        </div>\x0a        <div><div></div><div><input type=\"range\"/></div></div>\x0a      </div>\x0a" + ("\"\"\"" + "\x0a\x0amain :: Effect Unit\x0amain = Nothing \ud83d\ude80 \\push event -> myDom ~~\x0a  { myli: pure (D.Style := \"background-color:rgb(200,240,210);\")\x0a  , somethingNew: nut\x0a      ( D.button (pure (D.OnClick := cb (const $ push (Just unit))))\x0a          [ text\x0a              $ (compact event $> \"Thanks for clicking me!\") <|>\x0a                  pure \"I was dynamically inserted\"\x0a          ]\x0a      )\x0a  }")))) ]) ])),
                  result: Deku_Pursx.nut(Deku_Subgraph.subgraph(Data_Hashable.hashableUnit)(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Data_Unit.unit, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))))(function (v) {
                      return function (push) {
                          return function (event$prime) {
                              var event = Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Either.hush)(event$prime));
                              return Deku_Pursx.makePursx({
                                  reflectSymbol: function () {
                                      return "<div>\x0a        <button>I do nothing</button>\x0a        <ul>\x0a          <li>A</li>\x0a          <li ~myli~>B</li>\x0a          <li>C</li>\x0a        </ul>\x0a        <div>\x0a          <a href=\"https://github.com/mikesol/purescript-deku\"></a>\x0a          <i>bar</i>\x0a          ~somethingNew~\x0a          <span style=\"font-weight:800;\">baz</span>\x0a        </div>\x0a        <div><div></div><div><input type=\"range\"/></div></div>\x0a      </div>\x0a";
                                  }
                              })()()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                                  reflectSymbol: function () {
                                      return "somethingNew";
                                  }
                              }))({
                                  reflectSymbol: function () {
                                      return "myli";
                                  }
                              }))(dictIsEvent)(myDom)({
                                  myli: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrLi_StyleString)(Deku_DOM.Style.value)("background-color:rgb(200,240,210);")),
                                  somethingNew: Deku_Pursx.nut(Deku_DOM.button(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](push(new Data_Maybe.Just(Data_Unit.unit)))))))([ Deku_Control.text(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Data_Functor.voidLeft((dictIsEvent.Filterable1()).Functor1())(Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(event))("Thanks for clicking me!"))(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())("I was dynamically inserted"))) ]))
                              });
                          };
                      };
                  })),
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Subgraph.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["pursx2"] = pursx2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Subgraphs"] = $PS["Deku.Example.Docs.Subgraphs"] || {};
  var exports = $PS["Deku.Example.Docs.Subgraphs"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Pursx = $PS["Deku.Pursx"];
  var Deku_Subgraph = $PS["Deku.Subgraph"];
  var Effect = $PS["Effect"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Sg0 = (function () {
      function Sg0() {

      };
      Sg0.value = new Sg0();
      return Sg0;
  })();
  var Sg1 = (function () {
      function Sg1() {

      };
      Sg1.value = new Sg1();
      return Sg1;
  })();
  var showSgs = {
      show: function (v) {
          if (v instanceof Sg0) {
              return "Sg0";
          };
          if (v instanceof Sg1) {
              return "Sg1";
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 31, column 1 - line 33, column 19): " + [ v.constructor.name ]);
      }
  };
  var eqSgs = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Sg0 && y instanceof Sg0) {
                  return true;
              };
              if (x instanceof Sg1 && y instanceof Sg1) {
                  return true;
              };
              return false;
          };
      }
  };
  var hashableSgs = {
      hash: (function () {
          var $44 = Data_Hashable.hash(Data_Hashable.hashableString);
          var $45 = Data_Show.show(showSgs);
          return function ($46) {
              return $44($45($46));
          };
      })(),
      Eq0: function () {
          return eqSgs;
      }
  };
  var px = Type_Proxy["Proxy"].value;
  var counter = function (dictIsEvent) {
      return function (event) {
          var f = function (a) {
              return function (b) {
                  return new Data_Tuple.Tuple(b + 1 | 0, new Data_Tuple.Tuple(a, b));
              };
          };
          return Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Tuple.snd)(FRP_Event_Class.mapAccum(dictIsEvent)(f)(event)(0));
      };
  };
  var mySub = function (dictFilterable) {
      return function (dictIsEvent) {
          return function (raise) {
              return function (v) {
                  return function (push) {
                      return function (event) {
                          if (v instanceof Sg0) {
                              var v1 = Data_Filterable.partitionMap(dictFilterable)(Control_Category.identity(Control_Category.categoryFn))(event);
                              return Deku_DOM.div_(dictIsEvent)([ Deku_DOM.div_(dictIsEvent)([ Deku_DOM.button(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](raise(Sg0.value))))))([ Deku_Control.text_(dictIsEvent)("Send to B") ]), Deku_DOM.div_(dictIsEvent)([ Deku_Control.text(dictIsEvent)(Data_Functor.map(dictFilterable.Functor1())((function () {
                                  var $47 = Data_Semigroup.append(Data_Semigroup.semigroupString)("A: ");
                                  var $48 = Data_Show.show(Data_Show.showInt);
                                  return function ($49) {
                                      return $47($48($49));
                                  };
                              })())(counter(dictIsEvent)(v1.left))) ]), Deku_DOM.button(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](push(Data_Unit.unit))))))([ Deku_Control.text_(dictIsEvent)("Send to C") ]), Deku_DOM.div_(dictIsEvent)([ Deku_Control.text(dictIsEvent)(Data_Functor.map(dictFilterable.Functor1())((function () {
                                  var $50 = Data_Semigroup.append(Data_Semigroup.semigroupString)("C: ");
                                  var $51 = Data_Show.show(Data_Show.showInt);
                                  return function ($52) {
                                      return $50($51($52));
                                  };
                              })())(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Data_Functor.map(dictFilterable.Functor1())(Data_Semiring.add(Data_Semiring.semiringInt)(1))(counter(dictIsEvent)(v1.right)))(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(0)))) ]), Deku_DOM.hr_(dictIsEvent)([  ]) ]) ]);
                          };
                          if (v instanceof Sg1) {
                              var v1 = Data_Filterable.partitionMap(dictFilterable)(Control_Category.identity(Control_Category.categoryFn))(event);
                              return Deku_DOM.div_(dictIsEvent)([ Deku_DOM.div_(dictIsEvent)([ Deku_DOM.button(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](raise(Sg1.value))))))([ Deku_Control.text_(dictIsEvent)("Send to A") ]), Deku_DOM.div_(dictIsEvent)([ Deku_Control.text(dictIsEvent)(Data_Functor.map(dictFilterable.Functor1())((function () {
                                  var $53 = Data_Semigroup.append(Data_Semigroup.semigroupString)("B: ");
                                  var $54 = Data_Show.show(Data_Show.showInt);
                                  return function ($55) {
                                      return $53($54($55));
                                  };
                              })())(counter(dictIsEvent)(v1.left))) ]), Deku_DOM.button(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](push(Data_Unit.unit))))))([ Deku_Control.text_(dictIsEvent)("Send to D") ]), Deku_DOM.div_(dictIsEvent)([ Deku_Control.text(dictIsEvent)(Data_Functor.map(dictFilterable.Functor1())((function () {
                                  var $56 = Data_Semigroup.append(Data_Semigroup.semigroupString)("D: ");
                                  var $57 = Data_Show.show(Data_Show.showInt);
                                  return function ($58) {
                                      return $56($57($58));
                                  };
                              })())(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Data_Functor.map(dictFilterable.Functor1())(Data_Semiring.add(Data_Semiring.semiringInt)(1))(counter(dictIsEvent)(v1.right)))(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(0)))) ]) ]) ]);
                          };
                          throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 42, column 1 - line 47, column 42): " + [ raise.constructor.name, v.constructor.name, push.constructor.name, event.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var subgraphs = function (dictIsEvent) {
      return function (dictPlus) {
          return function (dpage) {
              return Deku_Pursx.makePursx({
                  reflectSymbol: function () {
                      return "<div>\x0a  <h1>Subgraphs</h1>\x0a\x0a  <h2>Inter-component communication</h2>\x0a  <p>\x0a    As your app gets larger, you'll want to split up your code into logical components. Besides making the code easier to work with, in Deku, this allows us to change child components on the fly without changing the type of the parent graph. We call these subgraphs.</p>\x0a\x0a  <p>In the code below, two subgraphs are divided by a horizontal line. They communicate with each other via message passing, and they also have internal messaging.</p>\x0a\x0a  ~code~\x0a\x0a  <p>And here's what it produces:</p>\x0a\x0a  <blockquote> ~result~ </blockquote>\x0a\x0a  <h2>Subgraph anatomy</h2>\x0a\x0a  <p>Subgraphs are not unlike the root components we've been working with all along. There are, however, a few key differences to be aware of.</p>\x0a\x0a  <h3>The event</h3>\x0a\x0a  <code>Subgraph</code>-s, like <code>Element</code>-s, receive an <code>Event</code> as their first arguemnt. However, unlike <code>Element</code>-s, this <code>Event</code> contains a <code>Tuple</code> of shape <code>Tuple index  (SubgraphAction env)</code>.\x0a\x0a  The first part of the <code>Tuple</code> is the index of the subgraph. Each subgraph has a unique hashable index.\x0a\x0a  The second part of the <code>Tuple</code> is a <code>SubgraphAction</code>, which is one of the three following things:\x0a\x0a  <ul>\x0a    <li><code>InsertOrUpdate env</code>: Inserts or updates a subgraph, pushing the contents of <code>env</code> to it. We'll see how the subgraph receives this content in a bit.</li>\x0a    <li><code>SendToTop</code>: Sends the subgraph to the top of its enclosing element. Note that, if the enclosing element contains other elements besides the subgraph, it will leapfrog those as well, which is not what you want in most cases. To avoid this, as standard practice, a subgraph should be the unique child of its enclosing element.</li>\x0a    <li><code>Remove</code>: Remove a subgraph from the DOM.</li>\x0a  </ul>\x0a\x0a  <h3>The creation function</h3>\x0a  The second and last argument to <code>subgraph</code> is the subgraph creation function. This takes three arguments:\x0a\x0a  <ul>\x0a    <li>The index of this particular subgraph</li>\x0a    <li>A pusher for this subgraph. Things pushed to this pusher will be propagated <i>only</i> to this particular subgraph, meaning its parent and its siblings will not receive these pushes.</li>\x0a    <li>An event of type <code>Event (Either env push)</code>. It responds to <i>both</i> external communication when created and updated (on the <code>Left</code>) <i>and</i> to input from the pusher (on the <code>Right</code>).</li>\x0a  </ul>\x0a\x0a  <p>Using this pattern, you can create the behavior of dynamic websites with little or no overhead. For example, the navigation links on this page are implemented as subgraph, and as you can see, they are quite fast!</p>\x0a\x0a  <h2>Next steps</h2>\x0a  <p>Subgraphs are a great way to bring elements in and out of the DOM, but what if you want to take an existing element and ship it somewhere else? In these cases, the best bet is often to use CSS, but if CSS won't cut it, there are <a ~next~ style=\"cursor:pointer;\">portals</a>.</p>\x0a</div>";
                  }
              })()()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementConsAttr()(Deku_Pursx.pursxToElementConsElt()(Deku_Pursx.pursxToElementNil((dictIsEvent.Alternative0()).Plus1()))({
                  reflectSymbol: function () {
                      return "result";
                  }
              }))({
                  reflectSymbol: function () {
                      return "next";
                  }
              }))({
                  reflectSymbol: function () {
                      return "code";
                  }
              }))(dictIsEvent)(px)({
                  code: Deku_Pursx.nut(Deku_DOM.pre_(dictIsEvent)([ Deku_DOM.code_(dictIsEvent)([ Deku_Control.text_(dictIsEvent)("module Main where\x0a\x0aimport Prelude\x0a\x0aimport Control.Alt ((<|>))\x0aimport Data.Filterable (class Filterable, compact, partitionMap)\x0aimport Data.Hashable (class Hashable, hash)\x0aimport Data.Maybe (Maybe(..))\x0aimport Data.Tuple (snd)\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Deku.Attribute (cb, (:=))\x0aimport Deku.Control (text, text_)\x0aimport Deku.Core (Subgraph)\x0aimport Deku.DOM as D\x0aimport Deku.Subgraph (SubgraphAction(..), (@@))\x0aimport Deku.Toplevel ((\ud83d\ude80))\x0aimport Effect (Effect)\x0aimport FRP.Event (class IsEvent, mapAccum)\x0a\x0adata UIevents = UIShown | ButtonClicked | SliderMoved Number\x0aderive instance Eq UIevents\x0a\x0adata Sgs = Sg0 | Sg1\x0aderive instance Eq Sgs\x0aderive instance Ord Sgs\x0ainstance Show Sgs where\x0a  show Sg0 = \"Sg0\"\x0a  show Sg1 = \"Sg1\"\x0ainstance Hashable Sgs where\x0a  hash = show >>> hash\x0a\x0acounter :: forall event a. IsEvent event => event a \u2192 event Int\x0acounter event = map snd $ mapAccum f event 0\x0a  where\x0a  f a b = (b + 1) /\\ (a /\\ b)\x0a\x0amySub\x0a  :: forall event payload\x0a   . Filterable event\x0a  => IsEvent event\x0a  => (Sgs -> Effect Unit)\x0a  -> Subgraph Sgs Unit Unit event payload\x0amySub raise Sg0 push event =\x0a  let\x0a    { left, right } = partitionMap identity event\x0a  in\x0a    D.div_\x0a      [ D.div_\x0a          [ D.button\x0a              (pure $ D.OnClick := cb (const $ raise Sg0))\x0a              [ text_ \"Send to B\" ]\x0a          , D.div_ [ text (map (append \"A: \" <<< show) (counter left)) ]\x0a          , D.button\x0a              (pure $ D.OnClick := cb (const $ push unit))\x0a              [ text_ \"Send to C\" ]\x0a          , D.div_ [ text (map (append \"C: \" <<< show) (counter right)) ]\x0a          , D.hr_ []\x0a          ]\x0a      ]\x0amySub raise Sg1 push event =\x0a  let\x0a    { left, right } = partitionMap identity event\x0a  in\x0a    D.div_\x0a      [ D.div_\x0a          [ D.button\x0a              (pure $ D.OnClick := cb (const $ raise Sg0))\x0a              [ text_ \"Send to A\" ]\x0a          , D.div_ [ text (map (append \"B: \" <<< show) (counter (left))) ]\x0a          , D.button\x0a              (pure $ D.OnClick := cb (const $ push unit))\x0a              [ text_ \"Send to D\" ]\x0a          , D.div_ [ text (map (append \"D: \" <<< show) (counter right)) ]\x0a          ]\x0a      ]\x0a\x0amain :: Effect Unit\x0amain = Nothing \ud83d\ude80 \\push event ->\x0a  ( pure (Sg0 /\\ InsertOrUpdate unit)\x0a      <|> pure (Sg1 /\\ InsertOrUpdate unit)\x0a      <|>\x0a        ( compact event # map\x0a            ( case _ of\x0a                Sg0 -> Sg1 /\\ InsertOrUpdate unit\x0a                Sg1 -> Sg0 /\\ InsertOrUpdate unit\x0a            )\x0a        )\x0a  ) @@ mySub (push <<< Just)") ]) ])),
                  result: Deku_Pursx.nut(Deku_Subgraph.subgraph(Data_Hashable.hashableUnit)(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Data_Unit.unit, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))))(function (v) {
                      return function (push) {
                          return function (event$prime) {
                              var event = Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Either.hush)(event$prime));
                              return Deku_Subgraph.subgraph(hashableSgs)(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Sg0.value, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))))(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(Sg1.value, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit)))))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (v1) {
                                  if (v1 instanceof Sg0) {
                                      return new Data_Tuple.Tuple(Sg1.value, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit));
                                  };
                                  if (v1 instanceof Sg1) {
                                      return new Data_Tuple.Tuple(Sg0.value, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit));
                                  };
                                  throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 250, column 25 - line 252, column 60): " + [ v1.constructor.name ]);
                              })(Data_Compactable.compact((dictIsEvent.Filterable1()).Compactable0())(event))))(mySub(dictIsEvent.Filterable1())(dictIsEvent)(function ($59) {
                                  return push(Data_Maybe.Just.create($59));
                              }));
                          };
                      };
                  })),
                  next: Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Portals.value))(Deku_Example_Docs_Util.scrollToTop)))))
              });
          };
      };
  };
  exports["subgraphs"] = subgraphs;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };

  var connectXToY_ = function (x) {
	  return function (y) {
		  return function (state) {
			  return function () {
				  state.units[y].main.appendChild(state.units[x].main);
			  };
		  };
	  };
  };

  var disconnectXFromY_ = function (x) {
	  return function (y) {
		  return function (state) {
			  return function () {
				  state.units[y].main.removeChild(state.units[x].main);
			  };
		  };
	  };
  };
  var makeElement = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  listeners: {},
				  parent: a.parent,
				  main: document.createElement(a.tag),
			  };
			  if (a.parent === state.terminus) {
				  state.terminalPtrs.push(a.id);
			  }
			  connectXToY_(ptr)(a.parent)(state)();
		  };
	  };
  };
  exports.makeElement = makeElement;
  exports.makeText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  main: document.createTextNode(""),
				  parent: a.parent,
			  };
			  connectXToY_(ptr)(a.parent)(state)();
		  };
	  };
  };
  exports.makeFFIDOMSnapshot = function () {
	  return {
		  units: {},
		  portals: {},
		  unqidfr: makeid(10),
		  terminalPtrs: [],
	  };
  };
  exports.setAttribute_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var avv = a.value.value;
			  if (a.value.type === "cb") {
				  if (state.units[ptr].listeners[a.key]) {
					  state.units[ptr].main.removeEventListener(
						  a.key,
						  state.units[ptr].listeners[a.key]
					  );
				  }
				  var el = (e) => avv(e)();
				  state.units[ptr].main.addEventListener(a.key, el);
				  state.units[ptr].listeners[a.key] = el;
			  } else {
				  if (state.units[ptr].main.tagName === "INPUT" && a.key === "value") {
					  state.units[ptr].main.value = avv;
				  } else if (state.units[ptr].main.tagName === "INPUT" && a.key === "checked") {
					  state.units[ptr].main.checked = avv === "true" ;
				  } else {
					  state.units[ptr].main.setAttribute(a.key, avv);
				  }
			  }
		  };
	  };
  };
  exports.setText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr].main.nodeValue = a.text; //.replace(/\n/g, "<br>");
		  };
	  };
  };

  exports.makeSubgraph = function (ptr) {
	  return function (parent) {
		  return function (sceneM) {
			  return function (state) {
				  return function () {
					  var children = {};
					  var pushers = {};
					  var unsu = {};
					  state.units[ptr] = {
						  parent: parent,
						  sceneM: sceneM,
						  pushers: pushers,
						  children: children,
						  unsu: unsu,
					  };
				  };
			  };
		  };
	  };
  };

  exports.removeSubgraph = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var j = a.pos;
			  var children = state.units[ptr].children;
			  var unsu = state.units[ptr].unsu;
			  if (children[j] === undefined) {
				  return;
			  }
			  for (var k = 0; k < children[j].terminalPtrs.length; k++) {
				  disconnectXFromY_(children[j].terminalPtrs[k])(state.units[ptr].parent)(
					  children[j]
				  )();
			  }
			  // unsubscribe
			  unsu[j]();
			  // delete unused
			  delete children[j];
			  delete unsu[j];
		  };
	  };
  };

  var insertOrUpdateSubgraph = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var env = a.env;
			  var j = a.pos;
			  var index = a.index;
			  var children = state.units[ptr].children;
			  var unsu = state.units[ptr].unsu;
			  var pushers = state.units[ptr].pushers;
			  var needsConnecting = false;
			  if (env !== null && unsu[j] === undefined) {
				  children[j] = {
					  units: {},
					  portals: state.portals,
					  terminus: state.units[ptr].parent,
					  unqidfr: makeid(10),
					  parent: ptr,
					  terminalPtrs: [],
				  };
				  children[j].units[state.units[ptr].parent] =
					  state.units[state.units[ptr].parent];
				  var sg = state.units[ptr].sceneM(index)();
				  unsu[j] = sg.actualized(
					  (
						  (jIs) => (instr) => () =>
							  instr(children[jIs])()
					  )(j)
				  )();
				  pushers[j] = sg.pusher;
				  needsConnecting = true;
			  }
			  pushers[j](env)();
			  if (needsConnecting) {
				  for (var k = 0; k < children[j].terminalPtrs.length; k++) {
					  connectXToY_(children[j].terminalPtrs[k])(state.units[ptr].parent)(
						  children[j]
					  )();
				  }
			  }
		  };
	  };
  };
  var makePursx_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var html = a.html;
			  var verb = a.verb;
			  var cache = a.cache;
			  var parent = a.parent;
			  if (a.parent === state.terminus) {
				  state.terminalPtrs.push(a.id);
			  }
			  var entries = Object.entries(cache);
			  for (var i = 0; i < entries.length; i++) {
				  var key = entries[i][0];
				  if (entries[i][1] === true) {
					  // it is an attribute
					  html = html.replace(
						  verb + key + verb,
						  "data-deku-attr-internal=" + '"' + key + '"'
					  );
				  } else {
					  html = html.replace(
						  verb + key + verb,
						  '<span style="display:contents;" data-deku-elt-internal=' +
							  '"' +
							  key +
							  '"></span>'
					  );
				  }
			  }
			  var tmp = document.createElement("div");
			  tmp.innerHTML = html.trim();
			  state.units[ptr] = {
				  listeners: {},
				  parent: parent,
				  main: tmp.firstChild,
			  };
			  tmp.querySelectorAll("[data-deku-attr-internal]").forEach(function (e) {
				  var key = e.getAttribute("data-deku-attr-internal");
				  state.units[key] = {
					  listeners: {},
					  main: e,
				  };
			  });
			  tmp.querySelectorAll("[data-deku-elt-internal]").forEach(function (e) {
				  var key = e.getAttribute("data-deku-elt-internal");
				  state.units[key] = {
					  listeners: {},
					  main: e,
				  };
			  });
			  connectXToY_(ptr)(parent)(state)();
		  };
	  };
  };
  exports.makePursx_ = makePursx_;
  exports.insertOrUpdateSubgraph = insertOrUpdateSubgraph;
  exports.sendSubgraphToTop_ = function (a) {
	  return function (state) {
		  return function () {
			  var child = state.units[a.id].children[a.pos];
			  if (child === undefined) {
				  return;
			  }
			  var l = child.terminalPtrs.length;
			  for (var i = 0; i < child.terminalPtrs.length; i++) {
				  state.units[state.units[a.id].parent].main.prepend(
					  child.units[child.terminalPtrs[l - i - 1]].main
				  );
			  }
		  };
	  };
  };
  exports.makeRoot_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  main: a.root,
			  };
		  };
	  };
  };
  exports.makePortal_ = function (a) {
	  return function (state) {
		  return function () {
			  var main = document.createElement("div");
			  state.portals[a.id] = {
				  main: main,
			  };
			  state.units[a.id] = {
				  main: main,
			  };
			  main.setAttribute("style", "display:contents;");
		  };
	  };
  };
  exports.makeGateway_ = function (a) {
	  return function (state) {
		  return function () {
			  var main = document.createElement("div");
			  state.units[a.id] = {
				  main: main,
				  portal: a.portal
			  };
			  main.setAttribute("style", "display:contents;");
			  connectXToY_(a.id)(a.parent)(state)();
		  };
	  };
  };
  exports.setPortal_ = function (a) {
	  return function(state) {
		  return function() {
			  if (a.on) {
				  state.units[a.id].main.prepend(state.portals[state.units[a.id].portal].main);
			  } else {
				  state.units[a.id].main.innerHTML = "";
			  }
		  }
	  }
  };
})(PS["Deku.Interpret"] = PS["Deku.Interpret"] || {});
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  exports["random"] = $foreign.random;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                  })();
                  var c2 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($53) {
                          return k(f($53));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var cancelOuter = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var c = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return cancelOuter();
              };
          };
      };
  };
  var functorEvent = {
      map: function (f) {
          return function (v) {
              return function (k) {
                  return v(function ($54) {
                      return k(f($54));
                  });
              };
          };
      }
  };
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var result = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var v1 = p(a);
                  if (v1 instanceof Data_Maybe.Just) {
                      return k(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 134, column 13 - line 136, column 27): " + [ v1.constructor.name ]);
              });
          };
      };
  };
  var filter$prime = function (f) {
      return filter(function (a) {
          var v = f(a);
          if (v) {
              return new Data_Maybe.Just(a);
          };
          if (!v) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at FRP.Event (line 64, column 13 - line 66, column 25): " + [ v.constructor.name ]);
      });
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  Effect_Ref.modify(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return function __do() {
                      Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var c1 = subscribe(v1.input)(v.push)();
              var c2 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
          };
      };
  };
  var compactableEvent = {
      compact: filter(Control_Category.identity(Control_Category.categoryFn)),
      separate: function (xs) {
          return {
              left: filter(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 47, column 13 - line 49, column 33): " + [ v.constructor.name ]);
              })(xs),
              right: filter(function (v) {
                  if (v instanceof Data_Either.Right) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Left) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 54, column 13 - line 56, column 32): " + [ v.constructor.name ]);
              })(xs)
          };
      }
  };
  var filterableEvent = {
      filter: filter$prime,
      filterMap: filter,
      partition: function (p) {
          return function (xs) {
              return {
                  yes: filter$prime(p)(xs),
                  no: filter$prime((function () {
                      var $55 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                      return function ($56) {
                          return $55(p($56));
                      };
                  })())(xs)
              };
          };
      },
      partitionMap: function (f) {
          return function (xs) {
              return {
                  left: Data_Filterable.filterMap(filterableEvent)((function () {
                      var $57 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                      return function ($58) {
                          return $57(f($58));
                      };
                  })())(xs),
                  right: Data_Filterable.filterMap(filterableEvent)(function ($59) {
                      return Data_Either.hush(f($59));
                  })(xs)
              };
          };
      },
      Compactable0: function () {
          return compactableEvent;
      },
      Functor1: function () {
          return functorEvent;
      }
  };
  var applyEvent = {
      apply: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var c1 = v(function (a) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($60) {
                                  return k(a($60));
                              }))();
                          };
                      })();
                      var c2 = v1(function (b) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($61) {
                                  return k((function (v2) {
                                      return v2(b);
                                  })($61));
                              }))();
                          };
                      })();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var applicativeEvent = {
      pure: function (a) {
          return function (k) {
              return function __do() {
                  k(a)();
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
          };
      },
      Apply0: function () {
          return applyEvent;
      }
  };
  var altEvent = {
      alt: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var c1 = v(k)();
                      var c2 = v1(k)();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var plusEvent = {
      empty: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      },
      Alt0: function () {
          return altEvent;
      }
  };
  var alternativeEvent = {
      Applicative0: function () {
          return applicativeEvent;
      },
      Plus1: function () {
          return plusEvent;
      }
  };
  var eventIsEvent = {
      fold: fold,
      keepLatest: keepLatest,
      sampleOn: sampleOn,
      fix: fix,
      Alternative0: function () {
          return alternativeEvent;
      },
      Filterable1: function () {
          return filterableEvent;
      }
  };
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["altEvent"] = altEvent;
  exports["plusEvent"] = plusEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Interpret"] = $PS["Deku.Interpret"] || {};
  var exports = $PS["Deku.Interpret"];
  var $foreign = $PS["Deku.Interpret"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Random = $PS["Effect.Random"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];                
  var effectfulDOMInterpret = {
      ids: Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_Show.show(Data_Show.showNumber))(FRP_Behavior.behavior(function (f) {
          return FRP_Event.makeEvent(function (k) {
              return function __do() {
                  var r = Effect_Random.random();
                  return FRP_Event.subscribe(f)(function (x) {
                      return k(x(r));
                  })();
              };
          });
      })),
      makeElement: $foreign.makeElement,
      makeRoot: $foreign.makeRoot_,
      makeText: $foreign.makeText_,
      makePursx: $foreign.makePursx_,
      makePortal: $foreign.makePortal_,
      makeGateway: $foreign.makeGateway_,
      setPortal: $foreign.setPortal_,
      makeSubgraph: function (v) {
          return function (dom) {
              return Data_Function.flip($foreign.makeSubgraph(v.id)(v.parent))(dom)(function (index) {
                  return function __do() {
                      var evtL = FRP_Event.create();
                      var evtR = FRP_Event.create();
                      var event = Control_Alt.alt(FRP_Event.altEvent)(Data_Functor.map(FRP_Event.functorEvent)(Data_Either.Left.create)(evtL.event))(Data_Functor.map(FRP_Event.functorEvent)(Data_Either.Right.create)(evtR.event));
                      var actualized = (function () {
                          var v1 = v.scenes(index)(evtR.push)(event);
                          return v1(v.parent)(effectfulDOMInterpret);
                      })();
                      return {
                          actualized: actualized,
                          pusher: evtL.push
                      };
                  };
              });
          };
      },
      setAttribute: $foreign.setAttribute_,
      setText: $foreign.setText_,
      sendSubgraphToTop: $foreign.sendSubgraphToTop_,
      insertOrUpdateSubgraph: $foreign.insertOrUpdateSubgraph,
      removeSubgraph: $foreign.removeSubgraph
  };
  exports["effectfulDOMInterpret"] = effectfulDOMInterpret;
  exports["makeFFIDOMSnapshot"] = $foreign.makeFFIDOMSnapshot;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var body = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_body"]($9));
      };
  })();
  exports["body"] = body;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toElement"] = toElement;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs"] = $PS["Deku.Example.Docs"] || {};
  var exports = $PS["Deku.Example.Docs"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Attribute = $PS["Deku.Attribute"];
  var Deku_Control = $PS["Deku.Control"];
  var Deku_DOM = $PS["Deku.DOM"];
  var Deku_Example_Docs_Component = $PS["Deku.Example.Docs.Component"];
  var Deku_Example_Docs_Effects = $PS["Deku.Example.Docs.Effects"];
  var Deku_Example_Docs_Events = $PS["Deku.Example.Docs.Events"];
  var Deku_Example_Docs_HelloWorld = $PS["Deku.Example.Docs.HelloWorld"];
  var Deku_Example_Docs_Intro = $PS["Deku.Example.Docs.Intro"];
  var Deku_Example_Docs_Portals = $PS["Deku.Example.Docs.Portals"];
  var Deku_Example_Docs_Pursx1 = $PS["Deku.Example.Docs.Pursx1"];
  var Deku_Example_Docs_Pursx2 = $PS["Deku.Example.Docs.Pursx2"];
  var Deku_Example_Docs_Subgraphs = $PS["Deku.Example.Docs.Subgraphs"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Deku_Subgraph = $PS["Deku.Subgraph"];
  var Effect = $PS["Effect"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var scene = function (dictIsEvent) {
      return function (dictPlus) {
          return function (push) {
              return function (event) {
                  var page = function (dpage) {
                      return function (v) {
                          return function (v1) {
                              return function (v2) {
                                  if (v instanceof Deku_Example_Docs_Types.Intro) {
                                      return Deku_Example_Docs_Intro.intro(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.HelloWorld) {
                                      return Deku_Example_Docs_HelloWorld.helloWorld((dictIsEvent.Alternative0()).Plus1())(dictIsEvent)(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.SimpleComponent) {
                                      return Deku_Example_Docs_Component.components(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.PURSX1) {
                                      return Deku_Example_Docs_Pursx1.pursx1(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.Events) {
                                      return Deku_Example_Docs_Events.events(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.Effects) {
                                      return Deku_Example_Docs_Effects.effects(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.PURSX2) {
                                      return Deku_Example_Docs_Pursx2.pursx2(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.Subgraph) {
                                      return Deku_Example_Docs_Subgraphs.subgraphs(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  if (v instanceof Deku_Example_Docs_Types.Portals) {
                                      return Deku_Example_Docs_Portals.portals(dictIsEvent)((dictIsEvent.Alternative0()).Plus1())(dpage);
                                  };
                                  throw new Error("Failed pattern match at Deku.Example.Docs (line 100, column 3 - line 100, column 73): " + [ dpage.constructor.name, v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                              };
                          };
                      };
                  };
                  return Deku_Control.flatten((dictIsEvent.Alternative0()).Plus1())([ Deku_DOM.div_(dictIsEvent)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                      return Deku_DOM.span_(dictIsEvent)([ Deku_DOM.a(dictIsEvent)(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)((dictIsEvent.Alternative0()).Plus1())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0()))([ Deku_Attribute.attr(Deku_DOM.attrOnClickCb)(Deku_DOM.OnClick.value)(Deku_Attribute.cb(Data_Function["const"](push(v.value0)))), Deku_Attribute.attr(Deku_DOM.attrA_StyleString)(Deku_DOM.Style.value)("cursor:pointer;") ]))([ Deku_Control.text_(dictIsEvent)(v.value1.value0) ]), Deku_DOM.span(dictIsEvent)(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(Deku_Attribute.attr(Deku_DOM.attrSpan_StyleString)(Deku_DOM.Style.value)((function () {
                          if (v.value1.value1) {
                              return "";
                          };
                          return "display:none;";
                      })())))([ Deku_Control.text_(dictIsEvent)(" | ") ]) ]);
                  })([ new Data_Tuple.Tuple(Deku_Example_Docs_Types.Intro.value, new Data_Tuple.Tuple("Home", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.HelloWorld.value, new Data_Tuple.Tuple("Hello world", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.SimpleComponent.value, new Data_Tuple.Tuple("Component", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.PURSX1.value, new Data_Tuple.Tuple("Pursx 1", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.Events.value, new Data_Tuple.Tuple("Events", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.Effects.value, new Data_Tuple.Tuple("Effects", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.PURSX2.value, new Data_Tuple.Tuple("Pursx 2", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.Subgraph.value, new Data_Tuple.Tuple("Subgraphs", true)), new Data_Tuple.Tuple(Deku_Example_Docs_Types.Portals.value, new Data_Tuple.Tuple("Portals", false)) ])), Deku_Subgraph.subgraph(Deku_Example_Docs_Types.hashablePage)(dictIsEvent)(FRP_Event_Class.keepLatest(dictIsEvent)(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(function (v) {
                      return Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())((function () {
                          if (v.value0 instanceof Data_Maybe.Nothing) {
                              return Control_Plus.empty((dictIsEvent.Alternative0()).Plus1());
                          };
                          if (v.value0 instanceof Data_Maybe.Just) {
                              return Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(v.value0.value0, Deku_Subgraph.Remove.value));
                          };
                          throw new Error("Failed pattern match at Deku.Example.Docs (line 89, column 19 - line 91, column 49): " + [ v.value0.constructor.name ]);
                      })())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(new Data_Tuple.Tuple(v.value1, new Deku_Subgraph.InsertOrUpdate(Data_Unit.unit))));
                  })(FRP_Event_Class.mapAccum(dictIsEvent)(function (a) {
                      return function (b) {
                          return new Data_Tuple.Tuple(new Data_Maybe.Just(a), new Data_Tuple.Tuple(b, a));
                      };
                  })(event)(Data_Maybe.Nothing.value))))(page(push)) ]);
              };
          };
      };
  };
  var main = function __do() {
      var b$prime = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.body)();
      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLElement.toElement)(b$prime))(function (b) {
          return function __do() {
              var ffi = Deku_Interpret.makeFFIDOMSnapshot();
              var v = FRP_Event.create();
              var evt = Deku_Control.deku(FRP_Event.eventIsEvent)(b)(scene(FRP_Event.eventIsEvent)(FRP_Event.plusEvent)(v.push)(v.event))(Deku_Interpret.effectfulDOMInterpret);
              Data_Functor["void"](Effect.functorEffect)(FRP_Event.subscribe(evt)(function (i) {
                  return i(ffi);
              }))();
              return v.push(Deku_Example_Docs_Types.Intro.value)();
          };
      })();
  };
  exports["scene"] = scene;
  exports["main"] = main;
})(PS);
PS["Deku.Example.Docs"].main();