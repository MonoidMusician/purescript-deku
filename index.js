// Generated by purs bundle 0.14.4
var PS = {};
(function(exports) {
  /* global XMLHttpRequest */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url, xhr) {
        if (xhr.nodejsBaseUrl === null) {
          var urllib = module.require("url");
          var u = urllib.parse(url);
          u.protocol = u.protocol || "http:";
          u.hostname = u.hostname || "localhost";
          return urllib.format(u);
        } else {
          return url || "/";
        }
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            // eslint-disable-next-line no-eq-null,eqeqeq
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        var onerror = function (msgIdent) {
          return function () {
            errback(new Error(msgIdent));
          };
        };
        xhr.onerror = onerror(requestFailedMessageIdent);
        xhr.ontimeout = onerror(timeoutErrorMessageIdent);
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            body: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.timeout = options.timeout;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Affjax"] = PS["Affjax"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqRowNil = {
      eqRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return true;
              };
          };
      }
  };
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return {
              eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return {
          eq: $foreign.eqArrayImpl(eq(dictEq))
      };
  };
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return {
                      eqRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return eq(dictEq)(get(ra))(get(rb)) && tail;
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof LT && v1 instanceof LT) {
                  return true;
              };
              if (v instanceof GT && v1 instanceof GT) {
                  return true;
              };
              if (v instanceof EQ && v1 instanceof EQ) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordRecordNil = {
      compareRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return Data_Ordering.EQ.value;
              };
          };
      },
      EqRecord0: function () {
          return Data_Eq.eqRowNil;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return {
              compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
              Eq0: function () {
                  return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
              }
          };
      };
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var ordArray = function (dictOrd) {
      return {
          compare: (function () {
              var toDelta = function (x) {
                  return function (y) {
                      var v = compare(dictOrd)(x)(y);
                      if (v instanceof Data_Ordering.EQ) {
                          return 0;
                      };
                      if (v instanceof Data_Ordering.LT) {
                          return 1;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return -1 | 0;
                      };
                      throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [ v.constructor.name ]);
                  };
              };
              return function (xs) {
                  return function (ys) {
                      return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
                  };
              };
          })(),
          Eq0: function () {
              return Data_Eq.eqArray(dictOrd.Eq0());
          }
      };
  };
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return {
                      compareRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                                  var $58 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                                  if ($58) {
                                      return left;
                                  };
                                  return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              };
                          };
                      },
                      EqRecord0: function () {
                          return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                      }
                  };
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordArray"] = ordArray;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  var ordMaybe = function (dictOrd) {
      return {
          compare: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return Data_Ordering.EQ.value;
                  };
                  if (x instanceof Nothing) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Nothing) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [ x.constructor.name, y.constructor.name ]);
              };
          },
          Eq0: function () {
              return eqMaybe(dictOrd.Eq0());
          }
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.MediaType.Common"] = $PS["Data.MediaType.Common"] || {};
  var exports = $PS["Data.MediaType.Common"];          
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.RequestBody"] = $PS["Affjax.RequestBody"] || {};
  var exports = $PS["Affjax.RequestBody"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["toMediaType"] = toMediaType;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["alaF"] = alaF;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.RequestHeader"] = $PS["Affjax.RequestHeader"] || {};
  var exports = $PS["Affjax.RequestHeader"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var value = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
  };
  var name = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["name"] = name;
  exports["value"] = value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.ResponseFormat"] = $PS["Affjax.ResponseFormat"] || {};
  var exports = $PS["Affjax.ResponseFormat"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Affjax.ResponseFormat (line 44, column 3 - line 50, column 19): " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };                                                                                
  var json = new Json(Control_Category.identity(Control_Category.categoryFn));
  var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["json"] = json;
  exports["ignore"] = ignore;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax.ResponseHeader"] = $PS["Affjax.ResponseHeader"] || {};
  var exports = $PS["Affjax.ResponseHeader"];      
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  exports["ResponseHeader"] = ResponseHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var throwError = function (dict) {
      return dict.throwError;
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return {
              alt: function (v) {
                  return function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                          if (rm instanceof Data_Either.Right) {
                              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                          };
                          if (rm instanceof Data_Either.Left) {
                              return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                                  if (rn instanceof Data_Either.Right) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                                  };
                                  if (rn instanceof Data_Either.Left) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                      });
                  };
              },
              Functor0: function () {
                  return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  exports["runExceptT"] = runExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }                      
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  exports.stringifyWithIndent = function (i) {
    return function (j) {
      return JSON.stringify(j, null, i);
    };
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports.empty = {};
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Foreign_Object = $PS["Foreign.Object"];   
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["stringify"] = $foreign.stringify;
  exports["stringifyWithIndent"] = $foreign.stringifyWithIndent;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";                                                                                      

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };   

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupDisj(dictHeytingAlgebra);
          }
      };
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["any"] = any;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["deleteBy"] = deleteBy;
  exports["length"] = $foreign.length;
  exports["slice"] = $foreign.slice;
})(PS);
(function(exports) {
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  // A helper which transforms the result ofencodeURIComponent to be compliant
  // with RFC3896, as described in the MDN documentation here:
  //
  // https://web.archive.org/web/20201206001047/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
  function toRFC3896(input) {
    return input.replace(/[!'()*]/g, function (c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  } 

  exports._encodeFormURLComponent = function encode(fail, succeed, input) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input)).replace(/%20/g, "+"));
    } catch (err) {
      return fail(err);
    }
  };
})(PS["JSURI"] = PS["JSURI"] || {});
(function(exports) {
  "use strict";

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn3"] = $foreign.runFn3;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["JSURI"] = $PS["JSURI"] || {};
  var exports = $PS["JSURI"];
  var $foreign = $PS["JSURI"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                                                                                  
  var encodeFormURLComponent = Data_Function_Uncurried.runFn3($foreign["_encodeFormURLComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["encodeFormURLComponent"] = encodeFormURLComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.FormURLEncoded"] = $PS["Data.FormURLEncoded"] || {};
  var exports = $PS["Data.FormURLEncoded"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var JSURI = $PS["JSURI"];
  var toArray = function (v) {
      return v;
  };                                                                                                                 
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return JSURI.encodeFormURLComponent(v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                  return function (val) {
                      return key + ("=" + val);
                  };
              })(JSURI.encodeFormURLComponent(v.value0)))(JSURI.encodeFormURLComponent(v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 18 - line 39, column 116): " + [ v.constructor.name ]);
      };
      var $16 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_Common.joinWith("&"));
      var $17 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(encodePart);
      return function ($18) {
          return $16($17(toArray($18)));
      };
  })();
  exports["encode"] = encode;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];                   
  var showString = {
      show: $foreign.showStringImpl
  };
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.HTTP.Method"] = $PS["Data.HTTP.Method"] || {};
  var exports = $PS["Data.HTTP.Method"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];                                  
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = {
      show: function (v) {
          if (v instanceof OPTIONS) {
              return "OPTIONS";
          };
          if (v instanceof GET) {
              return "GET";
          };
          if (v instanceof HEAD) {
              return "HEAD";
          };
          if (v instanceof POST) {
              return "POST";
          };
          if (v instanceof PUT) {
              return "PUT";
          };
          if (v instanceof DELETE) {
              return "DELETE";
          };
          if (v instanceof TRACE) {
              return "TRACE";
          };
          if (v instanceof CONNECT) {
              return "CONNECT";
          };
          if (v instanceof PROPFIND) {
              return "PROPFIND";
          };
          if (v instanceof PROPPATCH) {
              return "PROPPATCH";
          };
          if (v instanceof MKCOL) {
              return "MKCOL";
          };
          if (v instanceof COPY) {
              return "COPY";
          };
          if (v instanceof MOVE) {
              return "MOVE";
          };
          if (v instanceof LOCK) {
              return "LOCK";
          };
          if (v instanceof UNLOCK) {
              return "UNLOCK";
          };
          if (v instanceof PATCH) {
              return "PATCH";
          };
          throw new Error("Failed pattern match at Data.HTTP.Method (line 43, column 1 - line 59, column 23): " + [ v.constructor.name ]);
      }
  };
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["GET"] = GET;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                      
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var semigroupNonEmptyList = {
      append: function (v) {
          return function (as$prime) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var head = function (v) {
      return v.value0;
  };
  exports["singleton"] = singleton;
  exports["head"] = head;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function(exports) {
  "use strict";

  exports.message = function (e) {
    return e.message;
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["message"] = $foreign.message;
})(PS);
(function(exports) {
  "use strict";

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [ v.constructor.name ]);
  };
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  exports["ForeignError"] = ForeignError;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["fail"] = fail;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Affjax"] = $PS["Affjax"] || {};
  var exports = $PS["Affjax"];
  var $foreign = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Affjax_ResponseHeader = $PS["Affjax.ResponseHeader"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FormURLEncoded = $PS["Data.FormURLEncoded"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var RequestContentError = (function () {
      function RequestContentError(value0) {
          this.value0 = value0;
      };
      RequestContentError.create = function (value0) {
          return new RequestContentError(value0);
      };
      return RequestContentError;
  })();
  var ResponseBodyError = (function () {
      function ResponseBodyError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseBodyError.create = function (value0) {
          return function (value1) {
              return new ResponseBodyError(value0, value1);
          };
      };
      return ResponseBodyError;
  })();
  var TimeoutError = (function () {
      function TimeoutError() {

      };
      TimeoutError.value = new TimeoutError();
      return TimeoutError;
  })();
  var RequestFailedError = (function () {
      function RequestFailedError() {

      };
      RequestFailedError.value = new RequestFailedError();
      return RequestFailedError;
  })();
  var XHROtherError = (function () {
      function XHROtherError(value0) {
          this.value0 = value0;
      };
      XHROtherError.create = function (value0) {
          return new XHROtherError(value0);
      };
      return XHROtherError;
  })();
  var request = function (req) {
      var parseJSON = function (v) {
          if (v === "") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
          };
          return Data_Either.either((function () {
              var $51 = Foreign.fail(Data_Identity.monadIdentity);
              return function ($52) {
                  return $51(Foreign.ForeignError.create($52));
              };
          })())(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
      };
      var fromResponse = (function () {
          if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("ArrayBuffer");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Blob");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
              return function (x) {
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Document")(x))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("XMLDocument")(x)))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("HTMLDocument")(x));
              };
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($53) {
                  return req.responseFormat.value0(parseJSON($53));
              })(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String"));
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
              return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
          };
          throw new Error("Failed pattern match at Affjax (line 257, column 18 - line 265, column 57): " + [ req.responseFormat.constructor.name ]);
      })();
      var extractContent = function (v) {
          if (v instanceof Affjax_RequestBody.ArrayView) {
              return Data_Either.Right.create(v.value0(Foreign.unsafeToForeign));
          };
          if (v instanceof Affjax_RequestBody.Blob) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.Document) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody["String"]) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormData) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormURLEncoded) {
              return Data_Either.note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(Data_Functor.map(Data_Maybe.functorMaybe)(Foreign.unsafeToForeign)(Data_FormURLEncoded.encode(v.value0)));
          };
          if (v instanceof Affjax_RequestBody.Json) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 217, column 20 - line 232, column 69): " + [ v.constructor.name ]);
      };
      var addHeader = function (mh) {
          return function (hs) {
              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                  return Data_Array.snoc(hs)(mh.value0);
              };
              return hs;
          };
      };
      var headers = function (reqContent) {
          return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
      };
      var ajaxRequest = function (v) {
          return {
              method: Data_HTTP_Method.print(req.method),
              url: req.url,
              headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                  return {
                      field: Affjax_RequestHeader.name(h),
                      value: Affjax_RequestHeader.value(h)
                  };
              })(headers(req.content)),
              content: v,
              responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
              username: Data_Nullable.toNullable(req.username),
              password: Data_Nullable.toNullable(req.password),
              withCredentials: req.withCredentials,
              timeout: Data_Maybe.fromMaybe(0.0)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1;
              })(req.timeout))
          };
      };
      var send = function (content) {
          return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"]("AffjaxTimeoutErrorMessageIdent", "AffjaxRequestFailedMessageIdent", Affjax_ResponseHeader.ResponseHeader.create, ajaxRequest(content)))))(function (v) {
              if (v instanceof Data_Either.Right) {
                  var v1 = Control_Monad_Except.runExcept(fromResponse(v.value0.body));
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(new ResponseBodyError(Data_List_NonEmpty.head(v1.value0), v.value0));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          body: v1.value0,
                          headers: v.value0.headers,
                          status: v.value0.status,
                          statusText: v.value0.statusText
                      });
                  };
                  throw new Error("Failed pattern match at Affjax (line 193, column 9 - line 195, column 52): " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Left) {
                  var message = Effect_Exception.message(v.value0);
                  return Data_Either.Left.create((function () {
                      var $38 = message === "AffjaxTimeoutErrorMessageIdent";
                      if ($38) {
                          return TimeoutError.value;
                      };
                      var $39 = message === "AffjaxRequestFailedMessageIdent";
                      if ($39) {
                          return RequestFailedError.value;
                      };
                      return new XHROtherError(v.value0);
                  })());
              };
              throw new Error("Failed pattern match at Affjax (line 191, column 137 - line 201, column 33): " + [ v.constructor.name ]);
          });
      };
      if (req.content instanceof Data_Maybe.Nothing) {
          return send(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
      };
      if (req.content instanceof Data_Maybe.Just) {
          var v = extractContent(req.content.value0);
          if (v instanceof Data_Either.Right) {
              return send(Data_Nullable.toNullable(new Data_Maybe.Just(v.value0)));
          };
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(new RequestContentError(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 183, column 7 - line 187, column 48): " + [ v.constructor.name ]);
      };
      throw new Error("Failed pattern match at Affjax (line 179, column 3 - line 187, column 48): " + [ req.content.constructor.name ]);
  };
  var printError = function (v) {
      if (v instanceof RequestContentError) {
          return "There was a problem with the request content: " + v.value0;
      };
      if (v instanceof ResponseBodyError) {
          return "There was a problem with the response body: " + Foreign.renderForeignError(v.value0);
      };
      if (v instanceof TimeoutError) {
          return "There was a problem making the request: timeout";
      };
      if (v instanceof RequestFailedError) {
          return "There was a problem making the request: request failed";
      };
      if (v instanceof XHROtherError) {
          return "There was a problem making the request: " + Effect_Exception.message(v.value0);
      };
      throw new Error("Failed pattern match at Affjax (line 97, column 14 - line 107, column 66): " + [ v.constructor.name ]);
  };
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false,
      responseFormat: Affjax_ResponseFormat.ignore,
      timeout: Data_Maybe.Nothing.value
  };
  exports["defaultRequest"] = defaultRequest;
  exports["printError"] = printError;
  exports["request"] = request;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative.Indexed"] = $PS["Control.Applicative.Indexed"] || {};
  var exports = $PS["Control.Applicative.Indexed"];
  var ipure = function (dict) {
      return dict.ipure;
  };
  exports["ipure"] = ipure;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply.Indexed"] = $PS["Control.Apply.Indexed"] || {};
  var exports = $PS["Control.Apply.Indexed"];                            
  var iapply = function (dict) {
      return dict.iapply;
  };
  exports["iapply"] = iapply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Comonad"] = $PS["Control.Comonad"] || {};
  var exports = $PS["Control.Comonad"];                  
  var extract = function (dict) {
      return dict.extract;
  };
  exports["extract"] = extract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array.Partial"] = $PS["Data.Array.Partial"] || {};
  var exports = $PS["Data.Array.Partial"];
  var Data_Array = $PS["Data.Array"];                
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var unInstant = function (v) {
      return v;
  };
  exports["unInstant"] = unInstant;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  exports["filterMap"] = filterMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var from = function (dict) {
      return dict.from;
  };
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function(exports) {
  // This Source Code Form is subject to the terms of the Mozilla Public
  // License, v. 2.0. If a copy of the MPL was not distributed with this
  // file, You can obtain one at http://mozilla.org/MPL/2.0/.

  "use strict";

  exports.hashString = function (s) {
      var h = 0;
      for (var i = 0; i < s.length; i++) {
          h = (31 * h + s.charCodeAt(i)) | 0;
      }
      return h;
  };
})(PS["Data.Hashable"] = PS["Data.Hashable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Hashable"] = $PS["Data.Hashable"] || {};
  var exports = $PS["Data.Hashable"];
  var $foreign = $PS["Data.Hashable"];
  var Data_Eq = $PS["Data.Eq"];
  var hashableString = {
      hash: $foreign.hashString,
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var hashableInt = {
      hash: function (n) {
          return n;
      },
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var hash = function (dict) {
      return dict.hash;
  };
  exports["hash"] = hash;
  exports["hashableInt"] = hashableInt;
  exports["hashableString"] = hashableString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var fst = function (v) {
      return v.value0;
  };
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (x) {
                  return function (y) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
              }
          };
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (x) {
                  return function (y) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
              },
              Eq0: function () {
                  return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (m1) {
                  return function (m2) {
                      return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
                  };
              }
          };
      };
  };
  var ordMap = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (m1) {
                  return function (m2) {
                      return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
                  };
              },
              Eq0: function () {
                  return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $777 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($778) {
                                  return Data_Maybe.Just.create($777($778));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["toUnfoldable"] = toUnfoldable;
  exports["keys"] = keys;
  exports["union"] = union;
  exports["eqMap"] = eqMap;
  exports["ordMap"] = ordMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid.Additive"] = $PS["Data.Monoid.Additive"] || {};
  var exports = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var semigroupAdditive = function (dictSemiring) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Semiring.add(dictSemiring)(v)(v1);
              };
          }
      };
  };
  var monoidAdditive = function (dictSemiring) {
      return {
          mempty: Data_Semiring.zero(dictSemiring),
          Semigroup0: function () {
              return semigroupAdditive(dictSemiring);
          }
      };
  };
  exports["monoidAdditive"] = monoidAdditive;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };                  
  var foldableSet = {
      foldMap: function (dictMonoid) {
          return function (f) {
              var $68 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
              return function ($69) {
                  return $68(toList($69));
              };
          };
      },
      foldl: function (f) {
          return function (x) {
              var $70 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
              return function ($71) {
                  return $70(toList($71));
              };
          };
      },
      foldr: function (f) {
          return function (x) {
              var $72 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
              return function ($73) {
                  return $72(toList($73));
              };
          };
      }
  };
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["union"] = union;
  exports["foldableSet"] = foldableSet;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var genericShowArgsNoArguments = {
      genericShowArgs: function (v) {
          return [  ];
      }
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return {
              "genericShow'": function (v) {
                  var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var v1 = genericShowArgs(dictGenericShowArgs)(v);
                  if (v1.length === 0) {
                      return ctor;
                  };
                  return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
              }
          };
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  };
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return {
              "genericShow'": function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return genericShow$prime(dictGenericShow)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return genericShow$prime(dictGenericShow1)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Typelevel.Undefined"] = $PS["Data.Typelevel.Undefined"] || {};
  var exports = $PS["Data.Typelevel.Undefined"];
  var Data_Unit = $PS["Data.Unit"];                
  var $$undefined = Data_Unit.unit;
  exports["undefined"] = $$undefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Typelevel.Num.Sets"] = $PS["Data.Typelevel.Num.Sets"] || {};
  var exports = $PS["Data.Typelevel.Num.Sets"];
  var Data_Typelevel_Undefined = $PS["Data.Typelevel.Undefined"];
  var toInt = function (dict) {
      return dict.toInt;
  };
  var natD9 = {
      toInt: function (v) {
          return 9;
      }
  };
  var posD9 = {
      Nat0: function () {
          return natD9;
      }
  };
  var natD8 = {
      toInt: function (v) {
          return 8;
      }
  };
  var posD8 = {
      Nat0: function () {
          return natD8;
      }
  };
  var natD7 = {
      toInt: function (v) {
          return 7;
      }
  };
  var posD7 = {
      Nat0: function () {
          return natD7;
      }
  };
  var natD6 = {
      toInt: function (v) {
          return 6;
      }
  };
  var posD6 = {
      Nat0: function () {
          return natD6;
      }
  };
  var natD5 = {
      toInt: function (v) {
          return 5;
      }
  };
  var posD5 = {
      Nat0: function () {
          return natD5;
      }
  };
  var natD4 = {
      toInt: function (v) {
          return 4;
      }
  };
  var posD4 = {
      Nat0: function () {
          return natD4;
      }
  };
  var natD3 = {
      toInt: function (v) {
          return 3;
      }
  };
  var posD3 = {
      Nat0: function () {
          return natD3;
      }
  };
  var natD2 = {
      toInt: function (v) {
          return 2;
      }
  };
  var posD2 = {
      Nat0: function () {
          return natD2;
      }
  };
  var natD1 = {
      toInt: function (v) {
          return 1;
      }
  };
  var posD1 = {
      Nat0: function () {
          return natD1;
      }
  };
  var natD0 = {
      toInt: function (v) {
          return 0;
      }
  };
  var div10Dec = function (dictNat) {
      return function (v) {
          return Data_Typelevel_Undefined["undefined"];
      };
  };
  var subLastDec = function (dictNat) {
      return function (dictNat1) {
          var $78 = toInt(dictNat1);
          var $79 = div10Dec(dictNat);
          return function ($80) {
              return (function (v) {
                  return 10 * v | 0;
              })($78($79($80)));
          };
      };
  };
  var posNatD0 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD0(dictPos))(dictPos.Nat0())(n);
          }
      };
  };
  var posPosD0 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD0(dictPos);
          }
      };
  };
  var posNatD1 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD1(dictPos))(dictPos.Nat0())(n) + 1 | 0;
          }
      };
  };
  var posPosD1 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD1(dictPos);
          }
      };
  };
  var posNatD2 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD2(dictPos))(dictPos.Nat0())(n) + 2 | 0;
          }
      };
  };
  var posPosD2 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD2(dictPos);
          }
      };
  };
  var posNatD3 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD3(dictPos))(dictPos.Nat0())(n) + 3 | 0;
          }
      };
  };
  var posPosD3 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD3(dictPos);
          }
      };
  };
  var posNatD4 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD4(dictPos))(dictPos.Nat0())(n) + 4 | 0;
          }
      };
  };
  var posPosD4 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD4(dictPos);
          }
      };
  };
  var posNatD5 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD5(dictPos))(dictPos.Nat0())(n) + 5 | 0;
          }
      };
  };
  var posPosD5 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD5(dictPos);
          }
      };
  };
  var posNatD6 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD6(dictPos))(dictPos.Nat0())(n) + 6 | 0;
          }
      };
  };
  var posPosD6 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD6(dictPos);
          }
      };
  };
  var posNatD7 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD7(dictPos))(dictPos.Nat0())(n) + 7 | 0;
          }
      };
  };
  var posPosD7 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD7(dictPos);
          }
      };
  };
  var posNatD8 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD8(dictPos))(dictPos.Nat0())(n) + 8 | 0;
          }
      };
  };
  var posPosD8 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD8(dictPos);
          }
      };
  };
  var posNatD9 = function (dictPos) {
      return {
          toInt: function (n) {
              return subLastDec(posNatD9(dictPos))(dictPos.Nat0())(n) + 9 | 0;
          }
      };
  };
  var posPosD9 = function (dictPos) {
      return {
          Nat0: function () {
              return posNatD9(dictPos);
          }
      };
  };
  exports["natD0"] = natD0;
  exports["natD1"] = natD1;
  exports["natD2"] = natD2;
  exports["natD3"] = natD3;
  exports["natD4"] = natD4;
  exports["natD5"] = natD5;
  exports["natD6"] = natD6;
  exports["natD7"] = natD7;
  exports["natD8"] = natD8;
  exports["natD9"] = natD9;
  exports["posNatD0"] = posNatD0;
  exports["posNatD1"] = posNatD1;
  exports["posNatD2"] = posNatD2;
  exports["posNatD3"] = posNatD3;
  exports["posNatD4"] = posNatD4;
  exports["posNatD5"] = posNatD5;
  exports["posNatD6"] = posNatD6;
  exports["posNatD7"] = posNatD7;
  exports["posNatD8"] = posNatD8;
  exports["posNatD9"] = posNatD9;
  exports["posD1"] = posD1;
  exports["posD2"] = posD2;
  exports["posD3"] = posD3;
  exports["posD4"] = posD4;
  exports["posD5"] = posD5;
  exports["posD6"] = posD6;
  exports["posD7"] = posD7;
  exports["posD8"] = posD8;
  exports["posD9"] = posD9;
  exports["posPosD0"] = posPosD0;
  exports["posPosD1"] = posPosD1;
  exports["posPosD2"] = posPosD2;
  exports["posPosD3"] = posPosD3;
  exports["posPosD4"] = posPosD4;
  exports["posPosD5"] = posPosD5;
  exports["posPosD6"] = posPosD6;
  exports["posPosD7"] = posPosD7;
  exports["posPosD8"] = posPosD8;
  exports["posPosD9"] = posPosD9;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Typelevel.Num.Ops"] = $PS["Data.Typelevel.Num.Ops"] || {};
  var exports = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];                  
  var typelevelSucc = function (dictPos) {
      return function (dictIsZero) {
          return function (dictDivMod10) {
              return function (dictSuccP) {
                  return function (dictDivMod101) {
                      return {
                          Nat0: dictDivMod10.Nat1,
                          Pos1: function () {
                              return dictPos;
                          }
                      };
                  };
              };
          };
      };
  };                     
  var succPred = function (dictSucc) {
      return {
          Pos0: dictSucc.Pos1
      };
  };
  var divMod10D9D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD9;
      }
  };
  var divMod10D8D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var divMod10D7D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD7;
      }
  };
  var divMod10D6D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD6;
      }
  };
  var divMod10D5D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var divMod10D4D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD4;
      }
  };
  var divMod10D3D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD3;
      }
  };
  var divMod10D2x = function (dictNat) {
      return {
          Nat0: function () {
              return Data_Typelevel_Num_Sets.natD2;
          },
          Nat1: function () {
              return dictNat;
          }
      };
  };
  var divMod10D2D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD2;
      }
  };
  var divMod10D1x = function (dictNat) {
      return {
          Nat0: function () {
              return Data_Typelevel_Num_Sets.natD1;
          },
          Nat1: function () {
              return dictNat;
          }
      };
  };
  var divMod10D1D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD1;
      }
  };
  var divMod10D0D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD0;
      }
  };
  exports["typelevelSucc"] = typelevelSucc;
  exports["succPred"] = succPred;
  exports["divMod10D0D0"] = divMod10D0D0;
  exports["divMod10D1D0"] = divMod10D1D0;
  exports["divMod10D2D0"] = divMod10D2D0;
  exports["divMod10D3D0"] = divMod10D3D0;
  exports["divMod10D4D0"] = divMod10D4D0;
  exports["divMod10D5D0"] = divMod10D5D0;
  exports["divMod10D6D0"] = divMod10D6D0;
  exports["divMod10D7D0"] = divMod10D7D0;
  exports["divMod10D8D0"] = divMod10D8D0;
  exports["divMod10D9D0"] = divMod10D9D0;
  exports["divMod10D1x"] = divMod10D1x;
  exports["divMod10D2x"] = divMod10D2x;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Variant.Internal"] = $PS["Data.Variant.Internal"] || {};
  var exports = $PS["Data.Variant.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var variantTagsNil = {
      variantTags: function (v) {
          return Data_List_Types.Nil.value;
      }
  };
  var variantTags = function (dict) {
      return dict.variantTags;
  };
  var variantTagsCons = function (dictVariantTags) {
      return function (dictIsSymbol) {
          return {
              variantTags: function (v) {
                  return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value), variantTags(dictVariantTags)(Type_Proxy["Proxy"].value));
              }
          };
      };
  };   
  var impossible = function (str) {
      return Partial_Unsafe.unsafeCrashWith("Data.Variant: impossible `" + (str + "`"));
  };
  var lookup = function (name) {
      return function (tag) {
          var go = function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1) {
                      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                          if (v.value0 === tag) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (Data_Boolean.otherwise) {
                              $tco_var_v = v.value1;
                              $copy_v1 = v1.value1;
                              return;
                          };
                      };
                      $tco_done = true;
                      return impossible(name);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
          return go;
      };
  };
  var lookupEq = function (tags) {
      return function (eqs) {
          return function (v) {
              return function (v1) {
                  if (v.type === v1.type) {
                      return lookup("eq")(v.type)(tags)(eqs)(v.value)(v1.value);
                  };
                  if (Data_Boolean.otherwise) {
                      return false;
                  };
                  throw new Error("Failed pattern match at Data.Variant.Internal (line 96, column 1 - line 101, column 12): " + [ tags.constructor.name, eqs.constructor.name, v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var lookupOrd = function (tags) {
      return function (ords) {
          return function (v) {
              return function (v1) {
                  var v3 = Data_Ord.compare(Data_Ord.ordString)(v.type)(v1.type);
                  if (v3 instanceof Data_Ordering.EQ) {
                      return lookup("compare")(v.type)(tags)(ords)(v.value)(v1.value);
                  };
                  return v3;
              };
          };
      };
  };
  exports["variantTags"] = variantTags;
  exports["lookupEq"] = lookupEq;
  exports["lookupOrd"] = lookupOrd;
  exports["variantTagsNil"] = variantTagsNil;
  exports["variantTagsCons"] = variantTagsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Variant_Internal = $PS["Data.Variant.Internal"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var variantOrds = function (dict) {
      return dict.variantOrds;
  };
  var variantEqs = function (dict) {
      return dict.variantEqs;
  };
  var ordVariantNil = {
      variantOrds: function (v) {
          return Data_List_Types.Nil.value;
      }
  };
  var ordVariantCons = function (dictVariantOrds) {
      return function (dictOrd) {
          return {
              variantOrds: function (v) {
                  return new Data_List_Types.Cons(Data_Ord.compare(dictOrd), variantOrds(dictVariantOrds)(Type_Proxy["Proxy"].value));
              }
          };
      };
  };
  var onMatch = function (dictRowToList) {
      return function (dictVariantMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var on = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (f) {
                  return function (g) {
                      return function (r) {
                          if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                              return f(r.value);
                          };
                          return g(r);
                      };
                  };
              };
          };
      };
  };
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  var eqVariantNil = {
      variantEqs: function (v) {
          return Data_List_Types.Nil.value;
      }
  };
  var eqVariantCons = function (dictVariantEqs) {
      return function (dictEq) {
          return {
              variantEqs: function (v) {
                  return new Data_List_Types.Cons(Data_Eq.eq(dictEq), variantEqs(dictVariantEqs)(Type_Proxy["Proxy"].value));
              }
          };
      };
  };
  var eqVariant = function (dictRowToList) {
      return function (dictVariantTags) {
          return function (dictVariantEqs) {
              return {
                  eq: function (v1) {
                      return function (v2) {
                          var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                          var eqs = variantEqs(dictVariantEqs)(Type_Proxy["Proxy"].value);
                          return Data_Variant_Internal.lookupEq(tags)(eqs)(v1)(v2);
                      };
                  }
              };
          };
      };
  };
  var ordVariant = function (dictRowToList) {
      return function (dictVariantTags) {
          return function (dictVariantEqs) {
              return function (dictVariantOrds) {
                  return {
                      compare: function (v1) {
                          return function (v2) {
                              var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                              var ords = variantOrds(dictVariantOrds)(Type_Proxy["Proxy"].value);
                              return Data_Variant_Internal.lookupOrd(tags)(ords)(v1)(v2);
                          };
                      },
                      Eq0: function () {
                          return eqVariant()(dictVariantTags)(dictVariantEqs);
                      }
                  };
              };
          };
      };
  };
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
  };
  var match = function (dictRowToList) {
      return function (dictVariantMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch()()()(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["on"] = on;
  exports["match"] = match;
  exports["eqVariantNil"] = eqVariantNil;
  exports["eqVariantCons"] = eqVariantCons;
  exports["eqVariant"] = eqVariant;
  exports["ordVariantNil"] = ordVariantNil;
  exports["ordVariantCons"] = ordVariantCons;
  exports["ordVariant"] = ordVariant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Vec"] = $PS["Data.Vec"] || {};
  var exports = $PS["Data.Vec"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_Partial = $PS["Data.Array.Partial"];
  var Data_Functor = $PS["Data.Functor"];
  var uncons = function (dictPred) {
      return function (v) {
          return {
              head: Data_Array_Partial.head()(v),
              tail: Data_Array_Partial.tail()(v)
          };
      };
  };
  var tail = function (dictPred) {
      return function (v) {
          return Data_Array_Partial.tail()(v);
      };
  };
  var head = function (dictPos) {
      return function (v) {
          return Data_Array_Partial.head()(v);
      };
  };                                                                    
  var functorVec = Data_Functor.functorArray;
  var empty = [  ];
  var cons = function (dictSucc) {
      return function (x) {
          return function (v) {
              return Data_Array.cons(x)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["cons"] = cons;
  exports["uncons"] = uncons;
  exports["functorVec"] = functorVec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Types"] = $PS["Deku.Control.Types"] || {};
  var exports = $PS["Deku.Control.Types"];           
  var SubScene = function (x) {
      return x;
  };
  var Scene = function (x) {
      return x;
  };
  var DOM = function (x) {
      return x;
  };
  var unsafeUnDOM = function (v) {
      return {
          context: v.context,
          value: v.value
      };
  };
  var unsafeDOM = DOM;
  var unFrame = function (dict) {
      return dict.unFrame;
  };
  var oneSubFrame = function (v) {
      return v;
  };
  var oneFrame = function (v) {
      return v;
  };
  var isSceneSubScene = {
      getFrame: oneSubFrame,
      unFrame: SubScene
  };
  var isSceneScene = {
      getFrame: oneFrame,
      unFrame: Scene
  };
  var getFrame = function (dict) {
      return dict.getFrame;
  };
  var functorDOM = {
      map: function (f) {
          return function (m) {
              return {
                  value: f(m.value),
                  context: m.context
              };
          };
      }
  };
  var extendDOM = {
      extend: function (f) {
          return function (v) {
              return {
                  context: v.context,
                  value: f(v)
              };
          };
      },
      Functor0: function () {
          return functorDOM;
      }
  };
  var comonadDOM = {
      extract: function (v) {
          return v.value;
      },
      Extend0: function () {
          return extendDOM;
      }
  };
  exports["oneFrame"] = oneFrame;
  exports["oneSubFrame"] = oneSubFrame;
  exports["unsafeUnDOM"] = unsafeUnDOM;
  exports["unsafeDOM"] = unsafeDOM;
  exports["getFrame"] = getFrame;
  exports["unFrame"] = unFrame;
  exports["functorDOM"] = functorDOM;
  exports["comonadDOM"] = comonadDOM;
  exports["isSceneScene"] = isSceneScene;
  exports["isSceneSubScene"] = isSceneSubScene;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Graph.Attribute"] = $PS["Deku.Graph.Attribute"] || {};
  var exports = $PS["Deku.Graph.Attribute"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Variant = $PS["Data.Variant"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Attribute = function (x) {
      return x;
  };
  var unsafeUnAttribute = function (v) {
      return v;
  };
  var unsafeAttribute = Attribute;
  var prop = Data_Variant.inj()({
      reflectSymbol: function () {
          return "prop";
      }
  })(Type_Proxy["Proxy"].value);
  var eqCb = {
      eq: function (v) {
          return function (v1) {
              return false;
          };
      }
  };
  var ordCb = {
      compare: function (v) {
          return function (v1) {
              return Data_Ordering.LT.value;
          };
      },
      Eq0: function () {
          return eqCb;
      }
  };
  var cb = Data_Variant.inj()({
      reflectSymbol: function () {
          return "cb";
      }
  })(Type_Proxy["Proxy"].value);
  exports["unsafeUnAttribute"] = unsafeUnAttribute;
  exports["unsafeAttribute"] = unsafeAttribute;
  exports["prop"] = prop;
  exports["cb"] = cb;
  exports["eqCb"] = eqCb;
  exports["ordCb"] = ordCb;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Graph.DOM"] = $PS["Deku.Graph.DOM"] || {};
  var exports = $PS["Deku.Graph.DOM"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Xtype = (function () {
      function Xtype() {

      };
      Xtype.value = new Xtype();
      return Xtype;
  })();
  var Ul_ = function (x) {
      return x;
  };
  var Text = function (x) {
      return x;
  };
  var Style = (function () {
      function Style() {

      };
      Style.value = new Style();
      return Style;
  })();
  var Span_ = function (x) {
      return x;
  };   
  var Root = function (x) {
      return x;
  };   
  var Pre_ = function (x) {
      return x;
  };
  var P_ = function (x) {
      return x;
  };   
  var OnInput = (function () {
      function OnInput() {

      };
      OnInput.value = new OnInput();
      return OnInput;
  })();
  var OnClick = (function () {
      function OnClick() {

      };
      OnClick.value = new OnClick();
      return OnClick;
  })();
  var Nav_ = function (x) {
      return x;
  };
  var Map_ = function (x) {
      return x;
  };   
  var Main_ = function (x) {
      return x;
  };
  var Li_ = function (x) {
      return x;
  };   
  var Input_ = function (x) {
      return x;
  };   
  var I_ = function (x) {
      return x;
  };   
  var Href = (function () {
      function Href() {

      };
      Href.value = new Href();
      return Href;
  })();
  var Hr_ = function (x) {
      return x;
  };   
  var Header_ = function (x) {
      return x;
  };
  var H3_ = function (x) {
      return x;
  };
  var H2_ = function (x) {
      return x;
  };
  var H1_ = function (x) {
      return x;
  };
  var Element = function (x) {
      return x;
  };
  var Div_ = function (x) {
      return x;
  };   
  var Code_ = function (x) {
      return x;
  };
  var Button_ = function (x) {
      return x;
  };
  var Blockquote_ = function (x) {
      return x;
  };
  var A_ = function (x) {
      return x;
  };
  var attrSpan_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Graph_Attribute.prop(value)
              });
          };
      }
  };
  var attrOnInputCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "input",
                  value: Deku_Graph_Attribute.cb(value)
              });
          };
      }
  };
  var attrOnClickCb = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "click",
                  value: Deku_Graph_Attribute.cb(value)
              });
          };
      }
  };
  var attrInput_XtypeString = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "type",
                  value: Deku_Graph_Attribute.prop(value)
              });
          };
      }
  };
  var attrDiv_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Graph_Attribute.prop(value)
              });
          };
      }
  };
  var attrA_StyleString = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "style",
                  value: Deku_Graph_Attribute.prop(value)
              });
          };
      }
  };
  var attrA_HrefString = {
      attr: function (v) {
          return function (value) {
              return Deku_Graph_Attribute.unsafeAttribute({
                  key: "href",
                  value: Deku_Graph_Attribute.prop(value)
              });
          };
      }
  };
  var xsubgraph = function (dictHashable) {
      return function (envs) {
          return {
              envs: Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  return {
                      index: v.value0,
                      env: v.value1,
                      pos: Data_Hashable.hash(dictHashable)(v.value0)
                  };
              })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(envs))
          };
      };
  };
  var unsafeUnXSubgraph = function (v) {
      return v;
  };                                                                              
  var text = function ($12251) {
      return Element((function (v) {
          return {
              element: v,
              children: {}
          };
      })(Text((function (v) {
          return {
              text: v
          };
      })($12251))));
  };                                                                             
  var subgraph = function (dictIsSymbol) {
      return function (dictHashable) {
          return function (envs) {
              return function (subgraphMaker) {
                  return {
                      element: {
                          envs: Data_Functor.map(Data_Functor.functorArray)(function (v) {
                              return {
                                  index: v.value0,
                                  env: v.value1,
                                  pos: Data_Hashable.hash(dictHashable)(v.value0)
                              };
                          })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(envs)),
                          subgraphMaker: subgraphMaker,
                          terminus: Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value)
                      },
                      children: {}
                  };
              };
          };
      };
  };                                                                        
  var root = (function () {
      var $12252 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(function ($12254) {
          return (function (v) {
              return {
                  root: v
              };
          })(Element($12254));
      });
      return function ($12253) {
          return $12252((function (v) {
              return function (v1) {
                  return {
                      element: v,
                      children: v1
                  };
              };
          })(Root((function (v) {
              return {
                  element: v
              };
          })($12253))));
      };
  })();                                                                      
  var makeElt = function (elt) {
      return function (tag) {
          var $12255 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Element);
          return function ($12256) {
              return $12255((function (v) {
                  return function (v1) {
                      return {
                          element: v,
                          children: v1
                      };
                  };
              })(elt((function (v) {
                  return {
                      tag: tag,
                      attributes: v
                  };
              })($12256))));
          };
      };
  };
  var map = makeElt(Map_)("map");      
  var nav = makeElt(Nav_)("nav");         
  var p = makeElt(P_)("p");                  
  var pre = makeElt(Pre_)("pre");         
  var span = makeElt(Span_)("span");
  var ul = makeElt(Ul_)("ul");                                                
  var main = makeElt(Main_)("main");                                        
  var li = makeElt(Li_)("li");                                                 
  var input = makeElt(Input_)("input");                                    
  var i = makeElt(I_)("i");                                                 
  var hr = makeElt(Hr_)("hr");                                                  
  var header = makeElt(Header_)("header");                                  
  var h3 = makeElt(H3_)("h3");                                              
  var h2 = makeElt(H2_)("h2");                                              
  var h1 = makeElt(H1_)("h1");
  var div$primeattr = Control_Category.identity(Control_Category.categoryFn);
  var div = makeElt(Div_)("div");                                             
  var code = makeElt(Code_)("code");                                            
  var button = makeElt(Button_)("button");                                          
  var blockquote = makeElt(Blockquote_)("blockquote");
  var attr = function (dict) {
      return dict.attr;
  };                                                                       
  var a = makeElt(A_)("a");
  exports["attr"] = attr;
  exports["text"] = text;
  exports["root"] = root;
  exports["subgraph"] = subgraph;
  exports["xsubgraph"] = xsubgraph;
  exports["unsafeUnXSubgraph"] = unsafeUnXSubgraph;
  exports["Href"] = Href;
  exports["Style"] = Style;
  exports["Xtype"] = Xtype;
  exports["OnClick"] = OnClick;
  exports["OnInput"] = OnInput;
  exports["a"] = a;
  exports["blockquote"] = blockquote;
  exports["button"] = button;
  exports["code"] = code;
  exports["div"] = div;
  exports["div'attr"] = div$primeattr;
  exports["h1"] = h1;
  exports["h2"] = h2;
  exports["h3"] = h3;
  exports["header"] = header;
  exports["hr"] = hr;
  exports["i"] = i;
  exports["input"] = input;
  exports["li"] = li;
  exports["main"] = main;
  exports["nav"] = nav;
  exports["p"] = p;
  exports["pre"] = pre;
  exports["span"] = span;
  exports["ul"] = ul;
  exports["attrA_HrefString"] = attrA_HrefString;
  exports["attrA_StyleString"] = attrA_StyleString;
  exports["attrDiv_StyleString"] = attrDiv_StyleString;
  exports["attrSpan_StyleString"] = attrSpan_StyleString;
  exports["attrInput_XtypeString"] = attrInput_XtypeString;
  exports["attrOnClickCb"] = attrOnClickCb;
  exports["attrOnInputCb"] = attrOnInputCb;
})(PS);
(function(exports) {
  var makeid = function (length) {
	  var result = "";
	  var characters =
		  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	  var charactersLength = characters.length;
	  for (var i = 0; i < length; i++) {
		  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	  }
	  return result;
  };

  var connectXToY = function (calledExternally) {
	  return function (x) {
		  return function (y) {
			  return function (stateX) {
				  return function (stateY) {
					  return function () {
						  // if (
						  // 	calledExternally &&
						  // 	(stateY.units[y].isSubgraph || stateY.units[y].isTumult)
						  // ) {
						  // 	return;
						  // }
						  stateY.units[y].main.appendChild(stateX.units[x].main);
						  stateX.units[x].outgoing.push({ unit: y, state: stateY });
						  stateY.units[y].incoming.push({ unit: x, state: stateX });
					  };
				  };
			  };
		  };
	  };
  };
  var connectXToY_ = function (x) {
	  return function (state) {
		  return connectXToY(true)(x.fromId)(x.toId)(state)(state);
	  };
  };
  exports.connectXToY_ = connectXToY_;
  var disconnectXFromY = function (calledExternally) {
	  return function (x) {
		  return function (y) {
			  return function (stateX) {
				  return function (stateY) {
					  return function () {
						  // if (
						  // 	calledExternally &&
						  // 	(stateY.units[y].isSubgraph || stateY.units[y].isTumult)
						  // ) {
						  // 	return;
						  // }
						  stateY.units[y].main.removeChild(stateX.units[x].main);
						  stateX.units[x].outgoing = stateX.units[x].outgoing.filter(
							  function (i) {
								  return !(i.unit === y && i.state.unqidfr === stateY.unqidfr);
							  }
						  );
						  stateY.units[y].incoming = stateY.units[y].incoming.filter(
							  function (i) {
								  return !(i.unit === x && i.state.unqidfr === stateX.unqidfr);
							  }
						  );
					  };
				  };
			  };
		  };
	  };
  };
  exports.disconnectXFromY_ = function (x) {
	  return function (state) {
		  return disconnectXFromY(true)(x.fromId)(x.toId)(state)(state);
	  };
  };
  exports.destroyUnit_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  delete state.units[ptr];
		  };
	  };
  };
  exports.renderDOM = function (arrayToApply) {
	  return function () {
		  for (var i = 0; i < arrayToApply.length; i++) {
			  arrayToApply[i]();
		  }
	  };
  };
  exports.makeElement_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  listeners: {},
				  main: document.createElement(a.tag),
			  };
			  for (var i = 0; i < a.attributes.length; i++) {
				  if (a.attributes[i].value.type === "cb") {
					  var atty = a.attributes[i];
					  var el = (e) => atty.value.value(e)();
					  state.units[ptr].main.addEventListener(atty.key, el);
					  state.units[ptr].listeners[a.attributes[i].key] = el;
				  } else {
					  state.units[ptr].main.setAttribute(
						  a.attributes[i].key,
						  a.attributes[i].value.value
					  );
				  }
			  }
		  };
	  };
  };
  exports.makeText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: document.createElement("span"),
			  };
			  state.units[ptr].main.setAttribute("style", "white-space: pre-wrap;");
			  state.units[ptr].main.innerText = a.text;
				  //.replace(/\n/g, "<br>")
				  //.replace(/ /g, "&nbsp;");
		  };
	  };
  };
  exports.makeFFIDOMSnapshot = function () {
	  return {
		  units: {},
		  unqidfr: makeid(10),
	  };
  };
  exports.setAttribute_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  var avv = a.value.value;
			  if (a.value.type === "cb") {
				  if (state.units[ptr].listeners[a.key]) {
					  state.units[ptr].main.removeEventListener(
						  a.key,
						  state.units[ptr].listeners[a.key]
					  );
				  }
				  var el = (e) => avv(e)();
				  state.units[ptr].main.addEventListener(a.key, el);
				  state.units[ptr].listeners[a.key] = el;
			  } else {
				  state.units[ptr].main.setAttribute(a.key, avv);
			  }
		  };
	  };
  };
  exports.setText_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr].main.innerHTML = a.text.
				   replace(/\n/g, "<br>")
				  .replace(/ /g, "&nbsp;");
		  };
	  };
  };
  var doSortingOnSubgraphs = function (unit, sorting) {
	  for (var i = 0; i < sorting.length; i++) {
		  unit.main.insertBefore(
			  unit.children[sorting[i][0]].units[unit.terminalPtr].main,
			  unit.main.firstChild
		  );
	  }
  };
  exports.makeSubgraph_ = function (ptr) {
	  return function (terminalPtr) {
		  return function (sceneM) {
			  return function (envs) {
				  return function (funkyFx) {
					  return function (state) {
						  return function () {
							  var children = {};
							  var scenes = {};
							  var funk = {};
							  var unsu = {};
							  state.units[ptr] = {
								  outgoing: [],
								  incoming: [],
								  sceneM: sceneM,
								  main: document.createElement("div"),
								  funkyFx: funkyFx,
								  terminalPtr: terminalPtr,
								  isSubgraph: true,
								  scenes: scenes,
								  children: children,
								  funk: funk,
								  unsu: unsu,
							  };
							  state.units[ptr].main.setAttribute("style", "display:contents;");
							  setSubgraph_(ptr)(envs)(state)();
						  };
					  };
				  };
			  };
		  };
	  };
  };
  exports.makeTumult_ = function (ptr) {
	  return function (terminalPtr) {
		  return function (scenes) {
			  return function (nothing) {
				  return function (just) {
					  return function (arrMaker) {
						  return function (state) {
							  return function () {
								  state.units[ptr] = {
									  outgoing: [],
									  incoming: [],
									  main: document.createElement("div"),
									  isTumult: true,
									  terminalPtr: terminalPtr,
									  children: {},
									  scenes: {},
								  };
								  state.units[ptr].main.setAttribute(
									  "style",
									  "display:contents;"
								  );
								  setTumult_(ptr)(terminalPtr)(scenes)(nothing)(just)(arrMaker)(
									  state
								  )();
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  var setTumult_ = function (ptr) {
	  return function (terminalPtr) {
		  return function (newScenes) {
			  return function (nothing) {
				  return function (just) {
					  return function (arrMaker) {
						  return function (state) {
							  return function () {
								  var scenes = state.units[ptr].scenes;
								  var children = state.units[ptr].children;
								  var needsConnecting = [];
								  var newScenesAsObj = {};
								  var preserved = [];
								  for (var i = 0; i < newScenes.length; i++) {
									  var j = newScenes[i].pos;
									  if (newScenes[i].instructions !== null) {
										  newScenesAsObj[j] = newScenes[i].instructions;
									  }
									  if (
										  newScenes[i].instructions === null &&
										  scenes[j] === undefined
									  ) {
									  } else if (
										  newScenes[i].instructions !== null &&
										  scenes[j] !== undefined
									  ) {
										  preserved.push(j);
									  } else if (
										  newScenes[i].instructions !== null &&
										  scenes[j] === undefined
									  ) {
										  children[j] = {
											  units: {},
											  unqidfr: makeid(10),
											  parent: state,
										  };
										  scenes[j] = newScenes[i].instructions;
										  needsConnecting.push(j);
									  } else {
										  disconnectXFromY(false)(state.units[ptr].terminalPtr)(ptr)(
											  children[j]
										  )(state)();
										  // delete unused
										  delete scenes[j];
										  delete children[j];
									  }
								  }
								  for (var i = 0; i < newScenes.length; i++) {
									  if (newScenes[i].instructions === null) {
										  continue;
									  }
									  var oldScene =
										  // if it does not need connecting
										  needsConnecting.indexOf(newScenes[i].pos) === -1
											  ? // then we use the scene as the old scene
											    just(scenes[newScenes[i].pos])
											  : // otherwise we use nothing
											    nothing;
									  var curScene = arrMaker(newScenes[i].instructions)(oldScene);
									  for (var j = 0; j < curScene.length; j++) {
										  // thunk
										  curScene[j](children[newScenes[i].pos])();
									  }
								  }
								  state.units[ptr].scenes = newScenesAsObj;
								  // todo - add this logic to subgraph
								  var heads = {};
								  for (var m = 0; m < preserved.length; m++) {
									  var i = preserved[m];
									  heads[i] = children[i].units[terminalPtr];
									  if (state.units[ptr].heads[i] !== heads[i]) {
										  var tmp = { units: {} };
										  tmp.units[terminalPtr] = state.units[ptr].heads[i];
										  disconnectXFromY(false)(terminalPtr)(ptr)(tmp)(state)();
										  connectXToY(false)(terminalPtr)(ptr)(children[i])(state)();
									  }
								  }
								  for (var i = 0; i < needsConnecting.length; i++) {
									  var j = needsConnecting[i];
									  connectXToY(false)(terminalPtr)(ptr)(children[j])(state)();
									  heads[j] = children[j].units[terminalPtr];
								  }
								  state.units[ptr].heads = heads;
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  exports.setTumult_ = setTumult_;
  var setSubgraph_ = function (ptr) {
	  return function (envs) {
		  return function (state) {
			  return function () {
				  var scenes = state.units[ptr].scenes;
				  var children = state.units[ptr].children;
				  var funk = state.units[ptr].funk;
				  var unsu = state.units[ptr].unsu;
				  var needsConnecting = [];
				  for (var i = 0; i < envs.length; i++) {
					  var j = envs[i].pos;
					  if (envs[i].env === null && scenes[j] === undefined) {
					  } else if (envs[i].env !== null && scenes[j] !== undefined) {
					  } else if (envs[i].env !== null && scenes[j] === undefined) {
						  children[j] = {
							  units: {},
							  unqidfr: makeid(10),
							  parent: state,
						  };
						  scenes[j] = state.units[ptr].sceneM(envs[i].index);
						  var funkworthy = state.units[ptr].funkyFx(j)(envs[i].index)();
						  funk[j] = funkworthy.loop;
						  unsu[j] = funkworthy.unsubscribe;
						  needsConnecting.push(j);
					  } else {
						  disconnectXFromY(false)(state.units[ptr].terminalPtr)(ptr)(
							  children[j]
						  )(state)();
						  // unsubscribe
						  unsu[j]();
						  // delete unused
						  delete scenes[j];
						  delete children[j];
						  delete funk[j];
						  delete unsu[j];
					  }
				  }
				  var sortable = [];
				  var needsSorting = false;
				  for (var m = 0; m < envs.length; m++) {
					  if (envs[m].env === null) {
						  continue;
					  }
					  var i = envs[m].pos;
					  var applied = funk[i](envs[m].env)(scenes[i]);
					  for (var j = 0; j < applied.instructions.length; j++) {
						  // thunk
						  applied.instructions[j](children[i])();
					  }
					  needsSorting = needsSorting || applied.forOrdering !== 0;
					  sortable.push([i, applied.forOrdering]);
					  scenes[i] = applied.nextScene;
				  }
				  if (needsSorting) {
					  sortable.sort((a, b) => b[1] - a[1]);
					  doSortingOnSubgraphs(state.units[ptr], sortable);
				  }
				  for (var i = 0; i < needsConnecting.length; i++) {
					  var j = needsConnecting[i];
					  connectXToY(false)(state.units[ptr].terminalPtr)(ptr)(children[j])(
						  state
					  )();
				  }
			  };
		  };
	  };
  };
  exports.setSubgraph_ = setSubgraph_;
  exports.massiveCreate_ = function ($unSubgraph) {
	  return function ($makeSubgraph) {
		  return function ($makeTumult) {
			  return function ($makeRoot) {
				  return function ($makeElement) {
					  return function ($makeText) {
						  return function (a) {
							  return function (state) {
								  return function () {
									  massiveCreateCreateStep_("")($unSubgraph)($makeSubgraph)(
										  $makeTumult
									  )($makeRoot)($makeElement)($makeText)(a)(state)();
									  massiveCreateConnectStep_("")(a)(state)();
								  };
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  var massiveCreateConnectStep_ = function ($prefix) {
	  return function (a) {
		  return function (state) {
			  return function () {
				  var entries = Object.entries(a.toCreate);
				  for (var i = 0; i < entries.length; i++) {
					  var children = Object.entries(entries[i][1].children);
					  for (var j = 0; j < children.length; j++) {
						  var fromId =
							  $prefix +
							  ($prefix === "" ? "" : ".") +
							  entries[i][0] +
							  "." +
							  children[j][0];
						  var toId = $prefix + ($prefix === "" ? "" : ".") + entries[i][0];
						  if (
							  state.units[fromId].isSubgraph ||
							  state.units[fromId].isTumult
						  ) {
							  // the connection has already occurred
							  //continue;
						  }
						  connectXToY_({
							  fromId: fromId,
							  toId: toId,
						  })(state)();
						  if (children[j][1].children !== {}) {
							  var toCreate = {};
							  toCreate[children[j][0]] = children[j][1];
							  massiveCreateConnectStep_(
								  $prefix + ($prefix === "" ? "" : ".") + entries[i][0]
							  )({
								  toCreate: toCreate,
							  })(state)();
						  }
					  }
				  }
			  };
		  };
	  };
  };
  var massiveCreateCreateStep_ = function ($prefix) {
	  return function ($unSubgraph) {
		  return function ($makeSubgraph) {
			  return function ($makeTumult) {
				  return function ($makeRoot) {
					  return function ($makeElement) {
						  return function ($makeText) {
							  return function (a) {
								  return function (state) {
									  return function () {
										  var entries = Object.entries(a.toCreate);
										  for (var i = 0; i < entries.length; i++) {
											  var key =
												  $prefix + ($prefix === "" ? "" : ".") + entries[i][0];
											  var value = entries[i][1];
											  if (value.element.element !== undefined) {
												  // it's a root
												  $makeRoot({ id: key, root: value.element.element })(
													  state
												  )();
											  } else if (value.element.tag !== undefined) {
												  // it's an element
												  $makeElement({
													  id: key,
													  tag: value.element.tag,
													  attributes: value.element.attributes,
												  })(state)();
											  } else if (value.element.text !== undefined) {
												  // it's an element
												  $makeText({
													  id: key,
													  text: value.element.text,
												  })(state)();
											  } else if (value.element.subgraphMaker !== undefined) {
												  // it's a subgraph
												  $makeSubgraph({
													  id: key,
													  terminus: value.element.terminus,
													  scenes: $unSubgraph(value.element.subgraphMaker),
													  envs: value.element.envs
												  })(state)();
											  } else if (value.element.tumult !== undefined) {
												  $makeTumult({
													  id: key,
													  instructions: value.element.tumult,
													  terminus: value.element.terminus,
												  })(state)();
											  } else {
												  throw new Error(
													  "Don't know how to handle " +
														  key +
														  " " +
														  Object.keys(value.element))
												   ;
											  }
											  massiveCreateCreateStep_(key)($unSubgraph)($makeSubgraph)(
												  $makeTumult
											  )($makeRoot)($makeElement)($makeText)({
												  toCreate: value.children,
											  })(state)();
										  }
									  };
								  };
							  };
						  };
					  };
				  };
			  };
		  };
	  };
  };
  exports.massiveChange_ = function ($setSubgraph) {
	  return function ($setAttribute) {
		  return function ($setText) {
			  return function ($setTumult) {
				  return function (a) {
					  return function (state) {
						  return function () {
							  var entries = Object.entries(a.toCreate);
							  for (var i = 0; i < entries.length; i++) {
								  var key = entries[i][0];
								  var value = entries[i][1];
								  if (value.element.element !== undefined) {
									  // it's a root, do nothing
								  } else if (value.element.tag !== undefined) {
									  // it's an element
									  for (var j = 0; j < value.element.attributes.length; j++) {
										  $setAttribute({
											  id: key,
											  key: value.element.attributes[j].key,
											  value: value.element.attributes[j].value,
										  })(state)();
									  }
								  } else if (value.element.text !== undefined) {
									  // it's an element
									  $setText({
										  id: key,
										  text: value.element.text,
									  })(state)();
								  } else if (value.element.envs !== undefined) {
									  // it's a subgraph
									  $setSubgraph({
										  id: key,
										  envs: value.element.envs,
									  })(state)();
								  } else if (value.element.tumult !== undefined) {
									  $setTumult({
										  id: key,
										  instructions: value.element.tumult,
									  })(state)();
								  } else {
									  throw new Error(
										  "Don't know how to handle " + key + " " + value)
									   ;
								  }
								  massiveChange_($changeSubgraph)($setAttribute)($setText)(
									  $setTumult
								  )({ toChange: value.children })(state)();
							  }
						  };
					  };
				  };
			  };
		  };
	  };
  };

  exports.makeRoot_ = function (a) {
	  return function (state) {
		  return function () {
			  var ptr = a.id;
			  state.units[ptr] = {
				  outgoing: [],
				  incoming: [],
				  main: a.root,
			  };
		  };
	  };
  };
})(PS["Deku.Interpret"] = PS["Deku.Interpret"] || {});
(function(exports) {
                                 

  exports._unsafeStringify = JSON.stringify;
})(PS["Simple.JSON"] = PS["Simple.JSON"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Simple.JSON"] = $PS["Simple.JSON"] || {};
  var exports = $PS["Simple.JSON"];
  var $foreign = $PS["Simple.JSON"];
  var Control_Category = $PS["Control.Category"];
  var writeImpl = function (dict) {
      return dict.writeImpl;
  };
  var writeJSON = function (dictWriteForeign) {
      var $93 = writeImpl(dictWriteForeign);
      return function ($94) {
          return $foreign["_unsafeStringify"]($93($94));
      };
  };
  var writeForeignForeign = {
      writeImpl: Control_Category.identity(Control_Category.categoryFn)
  };
  exports["writeJSON"] = writeJSON;
  exports["writeImpl"] = writeImpl;
  exports["writeForeignForeign"] = writeForeignForeign;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Rendered"] = $PS["Deku.Rendered"] || {};
  var exports = $PS["Deku.Rendered"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Variant = $PS["Data.Variant"];
  var Data_Variant_Internal = $PS["Data.Variant.Internal"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Simple_JSON = $PS["Simple.JSON"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var ToCreate = function (x) {
      return x;
  };
  var Instruction = function (x) {
      return x;
  };
  var eqRootDOMElement = {
      eq: function (v) {
          return function (v1) {
              return true;
          };
      }
  };
  var ordRootDOMElement = {
      compare: function (v) {
          return function (v1) {
              return Data_Ordering.EQ.value;
          };
      },
      Eq0: function () {
          return eqRootDOMElement;
      }
  };
  var writeJSONToCreate = {
      writeImpl: function (v) {
          return Simple_JSON.writeImpl(Simple_JSON.writeForeignForeign)(v);
      }
  };
  var writeJSONToChange = {
      writeImpl: function (v) {
          return Simple_JSON.writeImpl(Simple_JSON.writeForeignForeign)(v);
      }
  };
  var showToCreate = {
      show: Simple_JSON.writeJSON(writeJSONToCreate)
  };
  var eqToCreate = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showToCreate))
  };
  var ordToCreate = {
      compare: Data_Function.on(Data_Ord.compare(Data_Ord.ordString))(Data_Show.show(showToCreate)),
      Eq0: function () {
          return eqToCreate;
      }
  };
  var showToChange = {
      show: Simple_JSON.writeJSON(writeJSONToChange)
  };
  var eqToChange = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showToChange))
  };
  var ordToChange = {
      compare: Data_Function.on(Data_Ord.compare(Data_Ord.ordString))(Data_Show.show(showToChange)),
      Eq0: function () {
          return eqToChange;
      }
  };
  var instructionWeight = function (v) {
      return Data_Variant.match()()()({
          disconnectXFromY: Data_Function["const"](0),
          destroyUnit: Data_Function["const"](1),
          makeRoot: Data_Function["const"](2),
          makeElement: Data_Function["const"](2),
          massiveCreate: Data_Function["const"](2),
          makeText: Data_Function["const"](2),
          makeSubgraph: Data_Function["const"](3),
          makeTumult: Data_Function["const"](4),
          connectXToY: Data_Function["const"](5),
          setAttribute: Data_Function["const"](6),
          massiveChange: Data_Function["const"](6),
          setText: Data_Function["const"](6),
          setSubgraph: Data_Function["const"](7),
          setTumult: Data_Function["const"](8)
      })(v);
  };
  var instructionId = function (v) {
      return Data_Variant.match()()()({
          disconnectXFromY: function ($50) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.fromId;
              })($50));
          },
          destroyUnit: function ($51) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($51));
          },
          makeElement: function ($52) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($52));
          },
          makeText: function ($53) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($53));
          },
          makeRoot: function ($54) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($54));
          },
          makeSubgraph: function ($55) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($55));
          },
          massiveCreate: Data_Function["const"](Data_Maybe.Nothing.value),
          makeTumult: function ($56) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($56));
          },
          connectXToY: function ($57) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.fromId;
              })($57));
          },
          setAttribute: function ($58) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($58));
          },
          setText: function ($59) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($59));
          },
          setSubgraph: function ($60) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($60));
          },
          massiveChange: Data_Function["const"](Data_Maybe.Nothing.value),
          setTumult: function ($61) {
              return Data_Maybe.Just.create((function (v2) {
                  return v2.id;
              })($61));
          }
      })(v);
  };   
  var iSetText = (function () {
      var $64 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "setText";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($65) {
          return Instruction($64($65));
      };
  })();
  var iSetAttribute = (function () {
      var $68 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "setAttribute";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($69) {
          return Instruction($68($69));
      };
  })();
  var iDisconnectXFromY = (function () {
      var $84 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "disconnectXFromY";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($85) {
          return Instruction($84($85));
      };
  })();
  var iDestroyUnit = (function () {
      var $86 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "destroyUnit";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($87) {
          return Instruction($86($87));
      };
  })();
  var iConnectXToY = (function () {
      var $88 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "connectXToY";
          }
      })(Type_Proxy["Proxy"].value);
      return function ($89) {
          return Instruction($88($89));
      };
  })();
  var eqInstruction = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                  reflectSymbol: function () {
                      return "setTumult";
                  }
              }))({
                  reflectSymbol: function () {
                      return "setText";
                  }
              }))({
                  reflectSymbol: function () {
                      return "setSubgraph";
                  }
              }))({
                  reflectSymbol: function () {
                      return "setAttribute";
                  }
              }))({
                  reflectSymbol: function () {
                      return "massiveCreate";
                  }
              }))({
                  reflectSymbol: function () {
                      return "massiveChange";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeTumult";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeText";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeSubgraph";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeRoot";
                  }
              }))({
                  reflectSymbol: function () {
                      return "makeElement";
                  }
              }))({
                  reflectSymbol: function () {
                      return "disconnectXFromY";
                  }
              }))({
                  reflectSymbol: function () {
                      return "destroyUnit";
                  }
              }))({
                  reflectSymbol: function () {
                      return "connectXToY";
                  }
              }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "terminus";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "instructions";
                  }
              })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "text";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "value";
                  }
              })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                  reflectSymbol: function () {
                      return "prop";
                  }
              }))({
                  reflectSymbol: function () {
                      return "cb";
                  }
              }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                  reflectSymbol: function () {
                      return "key";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toCreate";
                  }
              })(eqToCreate))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toChange";
                  }
              })(eqToChange))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "terminus";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "instructions";
                  }
              })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "text";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "terminus";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "instructions";
                  }
              })(Data_Eq.eqArray(Data_Eq.eqArray(eqInstruction))))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "root";
                  }
              })(eqRootDOMElement))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "tag";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "attributes";
                  }
              })(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "value";
                  }
              })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                  reflectSymbol: function () {
                      return "prop";
                  }
              }))({
                  reflectSymbol: function () {
                      return "cb";
                  }
              }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                  reflectSymbol: function () {
                      return "key";
                  }
              })(Data_Eq.eqString)))))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "toId";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromId";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "unit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "id";
                  }
              })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                  reflectSymbol: function () {
                      return "toUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "toId";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromUnit";
                  }
              })(Data_Eq.eqString))()({
                  reflectSymbol: function () {
                      return "fromId";
                  }
              })(Data_Eq.eqString)))))(x)(y);
          };
      }
  };
  var ordInstruction = {
      compare: function (v) {
          return function (v1) {
              var w2 = instructionWeight(v1);
              var w1 = instructionWeight(v);
              var c2 = function (v3) {
                  var i2 = instructionId(v1);
                  var i1 = instructionId(v);
                  var v4 = Data_Ord.compare(Data_Maybe.ordMaybe(Data_Ord.ordString))(i1)(i2);
                  if (v4 instanceof Data_Ordering.EQ) {
                      return Data_Ord.compare(Data_Variant.ordVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "setTumult";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "setText";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "setSubgraph";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "setAttribute";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "massiveCreate";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "massiveChange";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeTumult";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeText";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeSubgraph";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeRoot";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "makeElement";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "disconnectXFromY";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "destroyUnit";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "connectXToY";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toCreate";
                          }
                      })(eqToCreate))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toChange";
                          }
                      })(eqToChange))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.eqMap(Data_Eq.eqInt)(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Eq.eqArray(Data_Eq.eqArray(eqInstruction))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "root";
                          }
                      })(eqRootDOMElement))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "tag";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "attributes";
                          }
                      })(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Eq.eqString)))))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "unit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Eq.eqString))))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Eq.eqString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Eq.eqString))))(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantNil)(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.ordMap(Data_Ord.ordInt)(Data_Maybe.ordMaybe(Data_Ord.ordArray(ordInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.ordVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantNil)(Data_Ord.ordString))(Deku_Graph_Attribute.ordCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toCreate";
                          }
                      })(ordToCreate))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toChange";
                          }
                      })(ordToChange))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Map_Internal.ordMap(Data_Ord.ordInt)(Data_Maybe.ordMaybe(Data_Ord.ordArray(ordInstruction)))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "text";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "terminus";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "instructions";
                          }
                      })(Data_Ord.ordArray(Data_Ord.ordArray(ordInstruction))))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "root";
                          }
                      })(ordRootDOMElement))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "tag";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "attributes";
                          }
                      })(Data_Ord.ordArray(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "value";
                          }
                      })(Data_Variant.ordVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)({
                          reflectSymbol: function () {
                              return "prop";
                          }
                      }))({
                          reflectSymbol: function () {
                              return "cb";
                          }
                      }))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqString))(Deku_Graph_Attribute.eqCb))(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantNil)(Data_Ord.ordString))(Deku_Graph_Attribute.ordCb))))()({
                          reflectSymbol: function () {
                              return "key";
                          }
                      })(Data_Ord.ordString)))))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "unit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "id";
                          }
                      })(Data_Ord.ordString))))(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "toUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "toId";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromUnit";
                          }
                      })(Data_Ord.ordString))()({
                          reflectSymbol: function () {
                              return "fromId";
                          }
                      })(Data_Ord.ordString)))))(v)(v1);
                  };
                  return v4;
              };
              var v3 = Data_Ord.compare(Data_Ord.ordInt)(w1)(w2);
              if (v3 instanceof Data_Ordering.EQ) {
                  return c2(Data_Unit.unit);
              };
              return v3;
          };
      },
      Eq0: function () {
          return eqInstruction;
      }
  };
  exports["ToCreate"] = ToCreate;
  exports["iDisconnectXFromY"] = iDisconnectXFromY;
  exports["iDestroyUnit"] = iDestroyUnit;
  exports["iConnectXToY"] = iConnectXToY;
  exports["iSetAttribute"] = iSetAttribute;
  exports["iSetText"] = iSetText;
  exports["ordInstruction"] = ordInstruction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Tumult.Reconciliation"] = $PS["Deku.Tumult.Reconciliation"] || {};
  var exports = $PS["Deku.Tumult.Reconciliation"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Set = $PS["Data.Set"];
  var Data_Variant = $PS["Data.Variant"];
  var Deku_Rendered = $PS["Deku.Rendered"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var du = function (u) {
      var $41 = Data_Set.insert(Deku_Rendered.ordInstruction);
      return function ($42) {
          return $41(Deku_Rendered.iDestroyUnit((function (v) {
              return {
                  unit: u,
                  id: v
              };
          })((function (v) {
              return v.id;
          })($42))));
      };
  };
  var derogative = (function () {
      var $43 = Data_Variant.match()()()({
          disconnectXFromY: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          destroyUnit: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          makeElement: function (i) {
              return du(i.tag)(i);
          },
          makeRoot: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          massiveCreate: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          makeSubgraph: du("Subgraph"),
          makeTumult: du("Tumult"),
          makeText: du("Text"),
          connectXToY: (function () {
              var $46 = Data_Set.insert(Deku_Rendered.ordInstruction);
              return function ($47) {
                  return $46(Deku_Rendered.iDisconnectXFromY($47));
              };
          })(),
          setAttribute: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          massiveChange: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          setSubgraph: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          setTumult: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)),
          setText: Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))
      });
      var $44 = Data_Newtype.unwrap();
      return function ($45) {
          return $43($44($45));
      };
  })();
  var reconcileTumult = function ($$new) {
      return function (old) {
          var secondus = Data_List.fromFoldable(Data_Set.foldableSet)(old);
          var primus = Data_List.fromFoldable(Data_Set.foldableSet)($$new);
          var usingDefault = function (l0) {
              return function (h0) {
                  return function (t0) {
                      return function (l1) {
                          return function (h1) {
                              return function (t1) {
                                  return function (set) {
                                      return function (v) {
                                          var v1 = Data_Ord.compare(Deku_Rendered.ordInstruction)(h0)(h1);
                                          if (v1 instanceof Data_Ordering.LT) {
                                              return go(t0)(l1)(Data_Set.insert(Deku_Rendered.ordInstruction)(h0)(set));
                                          };
                                          if (v1 instanceof Data_Ordering.GT) {
                                              return go(l0)(t1)(derogative(h1)(set));
                                          };
                                          if (v1 instanceof Data_Ordering.EQ) {
                                              return go(t0)(t1)(set);
                                          };
                                          throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 63, column 5 - line 66, column 25): " + [ v1.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
          var go = function (v) {
              return function (v1) {
                  return function (set) {
                      if (v instanceof Data_List_Types.Nil && v1 instanceof Data_List_Types.Nil) {
                          return set;
                      };
                      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Nil) {
                          return go(v.value1)(Data_List_Types.Nil.value)(Data_Set.insert(Deku_Rendered.ordInstruction)(v.value0)(set));
                      };
                      if (v instanceof Data_List_Types.Nil && v1 instanceof Data_List_Types.Cons) {
                          return go(Data_List_Types.Nil.value)(v1.value1)(derogative(v1.value0)(set));
                      };
                      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                          var udef = usingDefault(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set);
                          return Data_Variant.match()()()({
                              connectXToY: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "connectXToY";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      var o = (function () {
                                          if (a.fromId < b.fromId) {
                                              return go(v.value1)(v1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set));
                                          };
                                          if (a.fromId > b.fromId) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(set));
                                          };
                                          if (a.toId < b.toId) {
                                              return go(v.value1)(v1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set));
                                          };
                                          if (a.toId > b.toId) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(set));
                                          };
                                          if (a.fromUnit !== b.fromUnit) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set)));
                                          };
                                          if (a.toUnit !== b.toUnit) {
                                              return go(v)(v1.value1)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iDisconnectXFromY(b))(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iConnectXToY(a))(set)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return go(v.value1)(v1.value1)(set);
                                          };
                                          throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 108, column 21 - line 127, column 49): " + [  ]);
                                      })();
                                      return o;
                                  })(udef)(v1.value0);
                              },
                              makeElement: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeElement";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Data_Set.union(Deku_Rendered.ordInstruction)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Deku_Rendered.ordInstruction)(Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                                          return Deku_Rendered.iSetAttribute({
                                              id: a.id,
                                              key: v2.key,
                                              value: v2.value
                                          });
                                      })(a.attributes))));
                                  })(udef)(v1.value0);
                              },
                              makeText: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeText";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Data_Set.insert(Deku_Rendered.ordInstruction)(Deku_Rendered.iSetText({
                                          id: a.id,
                                          text: a.text
                                      })));
                                  })(udef)(v1.value0);
                              },
                              disconnectXFromY: function (v2) {
                                  return udef(v1.value0);
                              },
                              destroyUnit: function (v2) {
                                  return udef(v1.value0);
                              },
                              makeSubgraph: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeSubgraph";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Control_Category.identity(Control_Category.categoryFn));
                                  })(udef)(v1.value0);
                              },
                              makeTumult: function (a) {
                                  return Data_Variant.on()({
                                      reflectSymbol: function () {
                                          return "makeTumult";
                                      }
                                  })(Type_Proxy["Proxy"].value)(function (b) {
                                      return comparable(a)(b)(v)(v.value0)(v.value1)(v1)(v1.value0)(v1.value1)(set)(Control_Category.identity(Control_Category.categoryFn));
                                  })(udef)(v1.value0);
                              },
                              setAttribute: function (v2) {
                                  return udef(v1.value0);
                              },
                              setSubgraph: function (v2) {
                                  return udef(v1.value0);
                              },
                              setTumult: function (v2) {
                                  return udef(v1.value0);
                              },
                              setText: function (v2) {
                                  return udef(v1.value0);
                              },
                              makeRoot: function (v2) {
                                  return udef(v1.value0);
                              },
                              massiveChange: function (v2) {
                                  return udef(v1.value0);
                              },
                              massiveCreate: function (v2) {
                                  return udef(v1.value0);
                              }
                          })(v.value0);
                      };
                      throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 90, column 3 - line 94, column 23): " + [ v.constructor.name, v1.constructor.name, set.constructor.name ]);
                  };
              };
          };
          var comparable = function (a) {
              return function (b) {
                  return function (l0) {
                      return function (h0) {
                          return function (t0) {
                              return function (l1) {
                                  return function (h1) {
                                      return function (t1) {
                                          return function (set) {
                                              return function (setf) {
                                                  if (a.id < b.id) {
                                                      return go(t0)(l1)(Data_Set.insert(Deku_Rendered.ordInstruction)(h0)(set));
                                                  };
                                                  if (b.id < a.id) {
                                                      return go(l0)(t1)(derogative(h1)(set));
                                                  };
                                                  if (Data_Boolean.otherwise) {
                                                      return go(t0)(t1)(setf(set));
                                                  };
                                                  throw new Error("Failed pattern match at Deku.Tumult.Reconciliation (line 68, column 3 - line 84, column 23): " + [ a.constructor.name, b.constructor.name, l0.constructor.name, h0.constructor.name, t0.constructor.name, l1.constructor.name, h1.constructor.name, t1.constructor.name, set.constructor.name, setf.constructor.name ]);
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
          var result = go(primus)(secondus)(Data_Set.empty);
          return result;
      };
  };
  exports["reconcileTumult"] = reconcileTumult;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var c1 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
                  })();
                  var c2 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($53) {
                          return k(f($53));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var cancelOuter = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var c = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return cancelOuter();
              };
          };
      };
  };
  var functorEvent = {
      map: function (f) {
          return function (v) {
              return function (k) {
                  return v(function ($54) {
                      return k(f($54));
                  });
              };
          };
      }
  };
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var result = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var v1 = p(a);
                  if (v1 instanceof Data_Maybe.Just) {
                      return k(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 134, column 13 - line 136, column 27): " + [ v1.constructor.name ]);
              });
          };
      };
  };
  var filter$prime = function (f) {
      return filter(function (a) {
          var v = f(a);
          if (v) {
              return new Data_Maybe.Just(a);
          };
          if (!v) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at FRP.Event (line 64, column 13 - line 66, column 25): " + [ v.constructor.name ]);
      });
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  Effect_Ref.modify(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return function __do() {
                      Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var c1 = subscribe(v1.input)(v.push)();
              var c2 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
          };
      };
  };
  var compactableEvent = {
      compact: filter(Control_Category.identity(Control_Category.categoryFn)),
      separate: function (xs) {
          return {
              left: filter(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 47, column 13 - line 49, column 33): " + [ v.constructor.name ]);
              })(xs),
              right: filter(function (v) {
                  if (v instanceof Data_Either.Right) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_Either.Left) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at FRP.Event (line 54, column 13 - line 56, column 32): " + [ v.constructor.name ]);
              })(xs)
          };
      }
  };
  var filterableEvent = {
      filter: filter$prime,
      filterMap: filter,
      partition: function (p) {
          return function (xs) {
              return {
                  yes: filter$prime(p)(xs),
                  no: filter$prime((function () {
                      var $55 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                      return function ($56) {
                          return $55(p($56));
                      };
                  })())(xs)
              };
          };
      },
      partitionMap: function (f) {
          return function (xs) {
              return {
                  left: Data_Filterable.filterMap(filterableEvent)((function () {
                      var $57 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                      return function ($58) {
                          return $57(f($58));
                      };
                  })())(xs),
                  right: Data_Filterable.filterMap(filterableEvent)(function ($59) {
                      return Data_Either.hush(f($59));
                  })(xs)
              };
          };
      },
      Compactable0: function () {
          return compactableEvent;
      },
      Functor1: function () {
          return functorEvent;
      }
  };
  var applyEvent = {
      apply: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var c1 = v(function (a) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($60) {
                                  return k(a($60));
                              }))();
                          };
                      })();
                      var c2 = v1(function (b) {
                          return function __do() {
                              Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($61) {
                                  return k((function (v2) {
                                      return v2(b);
                                  })($61));
                              }))();
                          };
                      })();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var applicativeEvent = {
      pure: function (a) {
          return function (k) {
              return function __do() {
                  k(a)();
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
          };
      },
      Apply0: function () {
          return applyEvent;
      }
  };
  var altEvent = {
      alt: function (v) {
          return function (v1) {
              return function (k) {
                  return function __do() {
                      var c1 = v(k)();
                      var c2 = v1(k)();
                      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
                  };
              };
          };
      },
      Functor0: function () {
          return functorEvent;
      }
  };
  var plusEvent = {
      empty: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
      },
      Alt0: function () {
          return altEvent;
      }
  };
  var alternativeEvent = {
      Applicative0: function () {
          return applicativeEvent;
      },
      Plus1: function () {
          return plusEvent;
      }
  };
  var eventIsEvent = {
      fold: fold,
      keepLatest: keepLatest,
      sampleOn: sampleOn,
      fix: fix,
      Alternative0: function () {
          return alternativeEvent;
      },
      Filterable1: function () {
          return filterableEvent;
      }
  };
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["applicativeEvent"] = applicativeEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Interpret"] = $PS["Deku.Interpret"] || {};
  var exports = $PS["Deku.Interpret"];
  var $foreign = $PS["Deku.Interpret"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Set = $PS["Data.Set"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Variant = $PS["Data.Variant"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Deku_Rendered = $PS["Deku.Rendered"];
  var Deku_Tumult_Reconciliation = $PS["Deku.Tumult.Reconciliation"];
  var FRP_Event = $PS["FRP.Event"];
  var setTumult = function (dict) {
      return dict.setTumult;
  };
  var setText = function (dict) {
      return dict.setText;
  };
  var setSubgraph = function (dict) {
      return dict.setSubgraph;
  };
  var setAttribute = function (dict) {
      return dict.setAttribute;
  };
  var massiveCreate = function (dict) {
      return dict.massiveCreate;
  };
  var massiveChange = function (dict) {
      return dict.massiveChange;
  };
  var makeTumult = function (dict) {
      return dict.makeTumult;
  };
  var makeText = function (dict) {
      return dict.makeText;
  };
  var makeSubgraph = function (dict) {
      return dict.makeSubgraph;
  };
  var makeRoot = function (dict) {
      return dict.makeRoot;
  };
  var makeElement = function (dict) {
      return dict.makeElement;
  };
  var envsToFFI = (function () {
      var go = function (v) {
          return {
              pos: v.pos,
              index: v.index,
              env: Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create)(v.env))
          };
      };
      return Data_Functor.map(Data_Functor.functorArray)(go);
  })();
  var disconnectXFromY = function (dict) {
      return dict.disconnectXFromY;
  };
  var destroyUnit = function (dict) {
      return dict.destroyUnit;
  };
  var connectXToY = function (dict) {
      return dict.connectXToY;
  };
  var interpretInstruction = function (dictDOMInterpret) {
      var $182 = Data_Variant.match()()()({
          disconnectXFromY: function (a) {
              return disconnectXFromY(dictDOMInterpret)(a);
          },
          destroyUnit: function (a) {
              return destroyUnit(dictDOMInterpret)(a);
          },
          makeElement: function (a) {
              return makeElement(dictDOMInterpret)(a);
          },
          makeRoot: function (a) {
              return makeRoot(dictDOMInterpret)(a);
          },
          massiveCreate: function (a) {
              return massiveCreate(dictDOMInterpret)(a);
          },
          makeText: function (a) {
              return makeText(dictDOMInterpret)(a);
          },
          makeSubgraph: function (v) {
              return makeElement(dictDOMInterpret)({
                  id: v.id,
                  tag: "div",
                  attributes: [ {
                      key: "style",
                      value: Deku_Graph_Attribute.prop("display:content;")
                  } ]
              });
          },
          makeTumult: function (v) {
              return makeElement(dictDOMInterpret)({
                  id: v.id,
                  tag: "div",
                  attributes: [ {
                      key: "style",
                      value: Deku_Graph_Attribute.prop("display:content;")
                  } ]
              });
          },
          connectXToY: function (a) {
              return connectXToY(dictDOMInterpret)(a);
          },
          setText: function (a) {
              return setText(dictDOMInterpret)(a);
          },
          massiveChange: function (a) {
              return massiveChange(dictDOMInterpret)(a);
          },
          setAttribute: function (a) {
              return setAttribute(dictDOMInterpret)(a);
          },
          setSubgraph: function (v) {
              return setAttribute(dictDOMInterpret)({
                  id: v.id,
                  key: "devnull",
                  value: Deku_Graph_Attribute.prop("true")
              });
          },
          setTumult: function (v) {
              return setAttribute(dictDOMInterpret)({
                  id: v.id,
                  key: "devnull",
                  value: Deku_Graph_Attribute.prop("true")
              });
          }
      });
      var $183 = Data_Newtype.unwrap();
      return function ($184) {
          return $182($183($184));
      };
  };
  var mcUnsubgraph = function (v) {
      return v(effectfulDOMInterpret);
  };
  var makeInstructionsEffectful = function (a) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Functor.map(Data_Functor.functorArray)(interpretInstruction(effectfulDOMInterpret))(a);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(interpretInstruction(effectfulDOMInterpret))(Data_Array.fromFoldable(Data_Set.foldableSet)(Deku_Tumult_Reconciliation.reconcileTumult(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Deku_Rendered.ordInstruction)(a))(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Deku_Rendered.ordInstruction)(v.value0))));
          };
          throw new Error("Failed pattern match at Deku.Interpret (line 330, column 31 - line 335, column 6): " + [ v.constructor.name ]);
      };
  };
  var effectfulDOMInterpret = {
      connectXToY: $foreign.connectXToY_,
      disconnectXFromY: $foreign.disconnectXFromY_,
      destroyUnit: $foreign.destroyUnit_,
      makeElement: $foreign.makeElement_,
      makeRoot: $foreign.makeRoot_,
      massiveCreate: function (noEta) {
          return $foreign.massiveCreate_(mcUnsubgraph)(makeSubgraph(effectfulDOMInterpret))(makeTumult(effectfulDOMInterpret))(makeRoot(effectfulDOMInterpret))(makeElement(effectfulDOMInterpret))(makeText(effectfulDOMInterpret))(noEta);
      },
      makeText: $foreign.makeText_,
      makeSubgraph: function (v) {
          return function (dom) {
              return Data_Function.flip($foreign.makeSubgraph_(v.id)(v.terminus)(v.scenes)(envsToFFI(v.envs)))(dom)(function (pos) {
                  return function (index) {
                      return function __do() {
                          var evt = FRP_Event.create();
                          var loop = function (eop) {
                              return function (scene) {
                                  var res = Deku_Control_Types.oneSubFrame(scene)(eop)(evt.push);
                                  return {
                                      instructions: res.instructions,
                                      nextScene: res.next,
                                      forOrdering: Data_Newtype.unwrap()(res.res)
                                  };
                              };
                          };
                          var unsubscribe = FRP_Event.subscribe(evt.event)(function (p) {
                              return $foreign.setSubgraph_(v.id)([ {
                                  pos: pos,
                                  index: index,
                                  env: Data_Nullable.toNullable(new Data_Maybe.Just(new Data_Either.Right(p)))
                              } ])(dom);
                          })();
                          return {
                              loop: loop,
                              unsubscribe: unsubscribe
                          };
                      };
                  };
              });
          };
      },
      makeTumult: function (v) {
          return function (toFFI) {
              return $foreign.makeTumult_(v.id)(v.terminus)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return {
                      pos: v1.value0,
                      instructions: Data_Nullable.toNullable(v1.value1)
                  };
              })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.instructions)))(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(makeInstructionsEffectful)(toFFI);
          };
      },
      setAttribute: $foreign.setAttribute_,
      setText: $foreign.setText_,
      massiveChange: function (noEta) {
          return $foreign.massiveChange_(setSubgraph(effectfulDOMInterpret))(setAttribute(effectfulDOMInterpret))(setText(effectfulDOMInterpret))(setTumult(effectfulDOMInterpret))(noEta);
      },
      setSubgraph: function (v) {
          return function (dom) {
              return $foreign.setSubgraph_(v.id)(envsToFFI(v.envs))(dom);
          };
      },
      setTumult: function (v) {
          return function (toFFI) {
              return $foreign.setTumult_(v.id)(v.terminus)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return {
                      pos: v1.value0,
                      instructions: Data_Nullable.toNullable(v1.value1)
                  };
              })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.instructions)))(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(makeInstructionsEffectful)(toFFI);
          };
      }
  };
  exports["massiveCreate"] = massiveCreate;
  exports["setAttribute"] = setAttribute;
  exports["setSubgraph"] = setSubgraph;
  exports["setText"] = setText;
  exports["effectfulDOMInterpret"] = effectfulDOMInterpret;
  exports["makeFFIDOMSnapshot"] = $foreign.makeFFIDOMSnapshot;
  exports["renderDOM"] = $foreign.renderDOM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var insert = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["insert"] = insert;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Change"] = $PS["Deku.Change"] || {};
  var exports = $PS["Deku.Change"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Graph_Attribute = $PS["Deku.Graph.Attribute"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var unsafeChange$prime = function (dictDOMInterpret) {
      return function (dictIsSymbol) {
          return function (ptr) {
              return function (i) {
                  return function (attributes) {
                      var id = Data_Symbol.reflectSymbol(dictIsSymbol)(ptr);
                      var o = Deku_Control_Types.unsafeDOM({
                          context: {
                              res: i.res,
                              instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(i.instructions)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                                  return Deku_Interpret.setAttribute(dictDOMInterpret)({
                                      id: id,
                                      key: v1.key,
                                      value: v1.value
                                  });
                              })(Data_Functor.map(Data_Functor.functorArray)(Deku_Graph_Attribute.unsafeUnAttribute)(attributes)))
                          },
                          value: Data_Unit.unit
                      });
                      return o;
                  };
              };
          };
      };
  };
  var change_ = function (dict) {
      return dict.change_;
  };
  var ichange_ = function (dictDOMInterpret) {
      return function (dictChange_) {
          return function (r) {
              var $1076 = change_(dictChange_)(dictDOMInterpret);
              var $1077 = Data_Functor.voidRight(Deku_Control_Types.functorDOM)(r);
              return function ($1078) {
                  return $1076($1077($1078));
              };
          };
      };
  };
  var changeTextString = function (dictIsSymbol) {
      return function (dictCons) {
          return {
              "change'": function (dictDOMInterpret) {
                  return function (ptr) {
                      return function (w) {
                          var v = Deku_Control_Types.unsafeUnDOM(w);
                          var id = Data_Symbol.reflectSymbol(dictIsSymbol)(ptr);
                          var o = Deku_Control_Types.unsafeDOM({
                              context: {
                                  res: v.context.res,
                                  instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.context.instructions)([ Deku_Interpret.setText(dictDOMInterpret)({
                                      id: id,
                                      text: v.value
                                  }) ])
                              },
                              value: Data_Unit.unit
                          });
                          return o;
                      };
                  };
              }
          };
      };
  };
  var changeSubgraph1 = function (dictIsSymbol) {
      return function (dictIsSymbol1) {
          return function (dictCons) {
              return {
                  "change'": function (dictDOMInterpret) {
                      return function (ptr) {
                          return function (w) {
                              var v = Deku_Control_Types.unsafeUnDOM(w);
                              var id = Data_Symbol.reflectSymbol(dictIsSymbol)(ptr);
                              var v1 = Deku_Graph_DOM.unsafeUnXSubgraph(v.value);
                              var o = Deku_Control_Types.unsafeDOM({
                                  context: {
                                      res: v.context.res,
                                      instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.context.instructions)([ Deku_Interpret.setSubgraph(dictDOMInterpret)({
                                          id: id,
                                          envs: v1.envs
                                      }) ])
                                  },
                                  value: Data_Unit.unit
                              });
                              return o;
                          };
                      };
                  }
              };
          };
      };
  };
  var changeRL_Nil = {
      changeRL_: function (dictDOMInterpret) {
          return function (v) {
              return function (w) {
                  return Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(w)(Data_Unit.unit);
              };
          };
      }
  };
  var changeRL_ = function (dict) {
      return dict.changeRL_;
  };
  var change_All = function (dictRowToList) {
      return function (dictChangeRL_) {
          return {
              change_: function (dictDOMInterpret) {
                  return changeRL_(dictChangeRL_)(dictDOMInterpret)(Type_Proxy["Proxy"].value);
              }
          };
      };
  };
  var changeDiv_ = function (dictIsSymbol) {
      return function (dictCons) {
          return {
              "change'": function (dictDOMInterpret) {
                  return function (ptr) {
                      return function (w) {
                          var v = Deku_Control_Types.unsafeUnDOM(w);
                          return unsafeChange$prime(dictDOMInterpret)(dictIsSymbol)(ptr)(v.context)(v.value);
                      };
                  };
              }
          };
      };
  };
  var change$prime = function (dict) {
      return dict["change'"];
  };
  var changeRL_Cons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictLacks) {
              return function (dictChange$prime) {
                  return function (dictChangeRL_) {
                      return {
                          changeRL_: function (dictDOMInterpret) {
                              return function (v) {
                                  return function (w) {
                                      var v1 = Deku_Control_Types.unsafeUnDOM(w);
                                      return changeRL_(dictChangeRL_)(dictDOMInterpret)(Type_Proxy["Proxy"].value)(Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(change$prime(dictChange$prime)(dictDOMInterpret)(Type_Proxy["Proxy"].value)(Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(w)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(v1.value))))(v1.value));
                                  };
                              };
                          }
                      };
                  };
              };
          };
      };
  };
  exports["ichange_"] = ichange_;
  exports["changeRL_Cons"] = changeRL_Cons;
  exports["changeRL_Nil"] = changeRL_Nil;
  exports["change_All"] = change_All;
  exports["changeTextString"] = changeTextString;
  exports["changeSubgraph1"] = changeSubgraph1;
  exports["changeDiv_"] = changeDiv_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Functions"] = $PS["Deku.Control.Functions"] || {};
  var exports = $PS["Deku.Control.Functions"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var makeScene = function (dictMonoid) {
      return function (dictIsScene) {
          return function (dictDOMInterpret) {
              return function (m) {
                  return function (trans) {
                      var go = function (env) {
                          return function (push) {
                              var v = m(env)(push);
                              if (v instanceof Data_Either.Left) {
                                  return Deku_Control_Types.getFrame(dictIsScene)(v.value0)(env)(push);
                              };
                              if (v instanceof Data_Either.Right) {
                                  var v1 = Deku_Control_Types.unsafeUnDOM(v.value0);
                                  return {
                                      instructions: v1.context.instructions,
                                      res: v1.context.res,
                                      next: trans(Deku_Control_Types.unsafeDOM({
                                          context: {
                                              res: Data_Monoid.mempty(dictMonoid),
                                              instructions: [  ]
                                          },
                                          value: v1.value
                                      }))
                                  };
                              };
                              throw new Error("Failed pattern match at Deku.Control.Functions (line 94, column 17 - line 108, column 10): " + [ v.constructor.name ]);
                          };
                      };
                      return Deku_Control_Types.unFrame(dictIsScene)(go);
                  };
              };
          };
      };
  };
  var makeSceneR = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (a) {
                  return function (b) {
                      return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Either.Right.create))(a))(b);
                  };
              };
          };
      };
  };
  var makeSceneR$prime = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (a) {
                  return function (b) {
                      return makeSceneR(dictMonoid)(dictDOMInterpret)(dictIsScene)(Data_Function["const"](Data_Function["const"](a)))(b);
                  };
              };
          };
      };
  };
  var loop = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (fa) {
                  return function (ma) {
                      return makeSceneR(dictMonoid)(dictDOMInterpret)(dictIsScene)(fa(ma))(loop(dictMonoid)(dictDOMInterpret)(dictIsScene)(fa));
                  };
              };
          };
      };
  };
  var initialDOMState = function (dictMonoid) {
      return {
          res: Data_Monoid.mempty(dictMonoid),
          instructions: [  ]
      };
  };
  var start = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return Deku_Control_Types.unsafeDOM({
              context: initialDOMState(dictMonoid),
              value: Data_Unit.unit
          });
      };
  };
  var iloop = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (fa) {
                  return loop(dictMonoid)(dictDOMInterpret)(dictIsScene)(function (wa) {
                      return function (e) {
                          return function (p) {
                              var v = fa(e)(p)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(wa));
                              return v(wa);
                          };
                      };
                  });
              };
          };
      };
  };
  var freeze = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (s) {
                  return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(Data_Function["const"](Data_Function["const"](new Data_Either.Right(s))))(freeze(dictMonoid)(dictDOMInterpret)(dictIsScene));
              };
          };
      };
  };
  var istart = function (dictMonoid) {
      return function (dictDOMInterpret) {
          return function (dictIsScene) {
              return function (m) {
                  return function (ct) {
                      return makeScene(dictMonoid)(dictIsScene)(dictDOMInterpret)(function (e) {
                          return function (p) {
                              if (e instanceof Data_Either.Left) {
                                  var v = m(e.value0)(p);
                                  return Data_Either.Left.create(makeSceneR$prime(dictMonoid)(dictDOMInterpret)(dictIsScene)(v(start(dictMonoid)(dictDOMInterpret)))(ct));
                              };
                              if (e instanceof Data_Either.Right) {
                                  return new Data_Either.Right(start(dictMonoid)(dictDOMInterpret));
                              };
                              throw new Error("Failed pattern match at Deku.Control.Functions (line 146, column 13 - line 152, column 29): " + [ e.constructor.name ]);
                          };
                      })(freeze(dictMonoid)(dictDOMInterpret)(dictIsScene));
                  };
              };
          };
      };
  };
  exports["istart"] = istart;
  exports["iloop"] = iloop;
  exports["freeze"] = freeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Functions.Graph"] = $PS["Deku.Control.Functions.Graph"] || {};
  var exports = $PS["Deku.Control.Functions.Graph"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var istart = function (dictGraphIsRenderable) {
      return function (dictMonoid) {
          return function (dictDOMInterpret) {
              return Deku_Control_Functions.istart(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneScene);
          };
      };
  };
  var iloop = function (dictMonoid) {
      return function (dictGraphIsRenderable) {
          return function (dictDOMInterpret) {
              return Deku_Control_Functions.iloop(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneScene);
          };
      };
  };
  exports["iloop"] = iloop;
  exports["istart"] = istart;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Functions.Subgraph"] = $PS["Deku.Control.Functions.Subgraph"] || {};
  var exports = $PS["Deku.Control.Functions.Subgraph"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var istart = function (dictSubgraphIsRenderable) {
      return function (dictMonoid) {
          return function (dictDOMInterpret) {
              return Deku_Control_Functions.istart(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene);
          };
      };
  };
  var freeze = function (dictMonoid) {
      return function (dictSubgraphIsRenderable) {
          return function (dictDOMInterpret) {
              return Deku_Control_Functions.freeze(dictMonoid)(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene);
          };
      };
  };
  exports["istart"] = istart;
  exports["freeze"] = freeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Control.Indexed"] = $PS["Deku.Control.Indexed"] || {};
  var exports = $PS["Deku.Control.Indexed"];
  var Control_Applicative_Indexed = $PS["Control.Applicative.Indexed"];
  var Control_Apply_Indexed = $PS["Control.Apply.Indexed"];
  var Control_Comonad = $PS["Control.Comonad"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var ixFunctorIxDOM = {
      imap: function (f) {
          return function (v) {
              return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Deku_Control_Types.functorDOM)(f))(v);
          };
      }
  };
  var ixApplyIxDOM = {
      iapply: function (v) {
          return function (v1) {
              return function (i) {
                  var fab = v(i);
                  var a = v1(fab);
                  return Data_Functor.voidLeft(Deku_Control_Types.functorDOM)(a)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(fab)(Control_Comonad.extract(Deku_Control_Types.comonadDOM)(a)));
              };
          };
      },
      IxFunctor0: function () {
          return ixFunctorIxDOM;
      }
  };
  var ixApplicativeIxDOM = {
      ipure: function (a) {
          return Data_Functor.voidRight(Deku_Control_Types.functorDOM)(a);
      },
      IxApply0: function () {
          return ixApplyIxDOM;
      }
  };
  var functorIxDOM = {
      map: function (f) {
          return function (v) {
              return Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Deku_Control_Types.functorDOM)(f))(v);
          };
      }
  };
  var applyIxDOM = {
      apply: Control_Apply_Indexed.iapply(ixApplyIxDOM),
      Functor0: function () {
          return functorIxDOM;
      }
  };
  var applicativeIxDOM = {
      pure: Control_Applicative_Indexed.ipure(ixApplicativeIxDOM),
      Apply0: function () {
          return applyIxDOM;
      }
  };
  exports["functorIxDOM"] = functorIxDOM;
  exports["applyIxDOM"] = applyIxDOM;
  exports["applicativeIxDOM"] = applicativeIxDOM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Create"] = $PS["Deku.Create"] || {};
  var exports = $PS["Deku.Create"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Deku_Rendered = $PS["Deku.Rendered"];
  var createAll = function (dictCreateT) {
      return {
          create: function (dictDOMInterpret) {
              return function (w) {
                  var v = Deku_Control_Types.unsafeUnDOM(w);
                  var o = Deku_Control_Types.unsafeDOM({
                      context: {
                          res: v.context.res,
                          instructions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.context.instructions)([ Deku_Interpret.massiveCreate(dictDOMInterpret)({
                              toCreate: Deku_Rendered.ToCreate(v.value)
                          }) ])
                      },
                      value: Data_Unit.unit
                  });
                  return o;
              };
          }
      };
  };
  var create = function (dict) {
      return dict.create;
  };
  var icreate = function (dictDOMInterpret) {
      return function (dictCreate) {
          return function (r) {
              var $1669 = create(dictCreate)(dictDOMInterpret);
              var $1670 = Data_Functor.voidRight(Deku_Control_Types.functorDOM)(r);
              return function ($1671) {
                  return $1669($1670($1671));
              };
          };
      };
  };
  exports["icreate"] = icreate;
  exports["createAll"] = createAll;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Types"] = $PS["Deku.Example.Docs.Types"] || {};
  var exports = $PS["Deku.Example.Docs.Types"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];                
  var Intro = (function () {
      function Intro() {

      };
      Intro.value = new Intro();
      return Intro;
  })();
  var HelloWorld = (function () {
      function HelloWorld() {

      };
      HelloWorld.value = new HelloWorld();
      return HelloWorld;
  })();
  var SimpleComponent = (function () {
      function SimpleComponent() {

      };
      SimpleComponent.value = new SimpleComponent();
      return SimpleComponent;
  })();
  var Events = (function () {
      function Events() {

      };
      Events.value = new Events();
      return Events;
  })();
  var Effects = (function () {
      function Effects() {

      };
      Effects.value = new Effects();
      return Effects;
  })();
  var Subgraph = (function () {
      function Subgraph() {

      };
      Subgraph.value = new Subgraph();
      return Subgraph;
  })();
  var SSR = (function () {
      function SSR() {

      };
      SSR.value = new SSR();
      return SSR;
  })();
  var genericPage_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return Intro.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return HelloWorld.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return SimpleComponent.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return Events.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return Effects.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return Subgraph.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
              return SSR.value;
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Types (line 18, column 1 - line 18, column 31): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Intro) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof HelloWorld) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof SimpleComponent) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof Events) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
          };
          if (x instanceof Effects) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
          };
          if (x instanceof Subgraph) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
          };
          if (x instanceof SSR) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))));
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Types (line 18, column 1 - line 18, column 31): " + [ x.constructor.name ]);
      }
  };
  var eqPage = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Intro && y instanceof Intro) {
                  return true;
              };
              if (x instanceof HelloWorld && y instanceof HelloWorld) {
                  return true;
              };
              if (x instanceof SimpleComponent && y instanceof SimpleComponent) {
                  return true;
              };
              if (x instanceof Events && y instanceof Events) {
                  return true;
              };
              if (x instanceof Effects && y instanceof Effects) {
                  return true;
              };
              if (x instanceof Subgraph && y instanceof Subgraph) {
                  return true;
              };
              if (x instanceof SSR && y instanceof SSR) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordPage = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Intro && y instanceof Intro) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Intro) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Intro) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof HelloWorld && y instanceof HelloWorld) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof HelloWorld) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof HelloWorld) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SimpleComponent && y instanceof SimpleComponent) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SimpleComponent) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SimpleComponent) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Events && y instanceof Events) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Events) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Events) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Effects && y instanceof Effects) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Effects) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Effects) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Subgraph && y instanceof Subgraph) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Subgraph) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Subgraph) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SSR && y instanceof SSR) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Deku.Example.Docs.Types (line 17, column 1 - line 17, column 25): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqPage;
      }
  };
  var showPage = {
      show: function (s) {
          return Data_Show_Generic.genericShow(genericPage_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Intro";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "HelloWorld";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "SimpleComponent";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Events";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Effects";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "Subgraph";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "SSR";
              }
          }))))))))(s);
      }
  };
  var hashablePage = {
      hash: (function () {
          var $42 = Data_Hashable.hash(Data_Hashable.hashableString);
          var $43 = Data_Show.show(showPage);
          return function ($44) {
              return $42($43($44));
          };
      })(),
      Eq0: function () {
          return eqPage;
      }
  };
  exports["Intro"] = Intro;
  exports["HelloWorld"] = HelloWorld;
  exports["SimpleComponent"] = SimpleComponent;
  exports["Events"] = Events;
  exports["Effects"] = Effects;
  exports["Subgraph"] = Subgraph;
  exports["SSR"] = SSR;
  exports["eqPage"] = eqPage;
  exports["ordPage"] = ordPage;
  exports["hashablePage"] = hashablePage;
})(PS);
(function(exports) {
  exports.scrollToTop_ = function () {
	  window.scrollTo(0, 0);
  };
})(PS["Deku.Example.Docs.Util"] = PS["Deku.Example.Docs.Util"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Util"] = $PS["Deku.Example.Docs.Util"] || {};
  var exports = $PS["Deku.Example.Docs.Util"];
  var $foreign = $PS["Deku.Example.Docs.Util"];
  var scrollToTop = $foreign.scrollToTop_;
  exports["scrollToTop"] = scrollToTop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Graph.DOM.Shorthand"] = $PS["Deku.Graph.DOM.Shorthand"] || {};
  var exports = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var ul = function (attrs) {
      return function (children) {
          return (function (v) {
              return {
                  ul: v
              };
          })(Deku_Graph_DOM.ul(attrs)(children));
      };
  };
  var text = function ($123) {
      return (function (v) {
          return {
              t: v
          };
      })(Deku_Graph_DOM.text($123));
  };
  var span = function (attrs) {
      return function (children) {
          return (function (v) {
              return {
                  span: v
              };
          })(Deku_Graph_DOM.span(attrs)(children));
      };
  };
  var pre = function (attrs) {
      return function (children) {
          return (function (v) {
              return {
                  pre: v
              };
          })(Deku_Graph_DOM.pre(attrs)(children));
      };
  };
  var input = function (attrs) {
      return function (children) {
          return (function (v) {
              return {
                  input: v
              };
          })(Deku_Graph_DOM.input(attrs)(children));
      };
  };
  var div = function (attrs) {
      return function (children) {
          return (function (v) {
              return {
                  div: v
              };
          })(Deku_Graph_DOM.div(attrs)(children));
      };
  };
  var code = function (attrs) {
      return function (children) {
          return (function (v) {
              return {
                  code: v
              };
          })(Deku_Graph_DOM.code(attrs)(children));
      };
  };
  exports["text"] = text;
  exports["code"] = code;
  exports["div"] = div;
  exports["input"] = input;
  exports["pre"] = pre;
  exports["span"] = span;
  exports["ul"] = ul;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Util"] = $PS["Deku.Util"] || {};
  var exports = $PS["Deku.Util"];
  var Data_Vec = $PS["Data.Vec"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var vx0 = {
      vex: function (v) {
          return {};
      }
  };
  var vex = function (dict) {
      return dict.vex;
  };
  var vxneq = function (dictPred) {
      return function (dictVex) {
          return function (dictN2S) {
              return function (dictCons) {
                  return function (dictIsSymbol) {
                      return function (dictLacks) {
                          return {
                              vex: function (v) {
                                  var uc = Data_Vec.uncons(dictPred)(v);
                                  return Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(uc.head)(vex(dictVex)(uc.tail));
                              }
                          };
                      };
                  };
              };
          };
      };
  };                 
  var detupUnit = {
      "detup'": function (v) {
          return function (v1) {
              return {};
          };
      }
  };
  var detup$prime = function (dict) {
      return dict["detup'"];
  };
  var detupTuple = function (dictSucc) {
      return function (dictDetup) {
          return function (dictN2S) {
              return function (dictCons) {
                  return function (dictIsSymbol) {
                      return function (dictLacks) {
                          return {
                              "detup'": function (v) {
                                  return function (v1) {
                                      return Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(v1.value0)(detup$prime(dictDetup)(Type_Proxy["Proxy"].value)(v1.value1));
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  var detup = function (dictDetup) {
      return detup$prime(dictDetup)(Type_Proxy["Proxy"].value);
  };
  exports["vex"] = vex;
  exports["detup"] = detup;
  exports["detupTuple"] = detupTuple;
  exports["detupUnit"] = detupUnit;
  exports["vx0"] = vx0;
  exports["vxneq"] = vxneq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Effects"] = $PS["Deku.Example.Docs.Effects"] || {};
  var exports = $PS["Deku.Example.Docs.Effects"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Change = $PS["Deku.Change"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Indexed = $PS["Deku.Control.Indexed"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];                
  var clickCb = function (push) {
      return Data_Function["const"](Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request({
          method: new Data_Either.Left(Data_HTTP_Method.GET.value),
          url: "https://randomuser.me/api/",
          headers: Affjax.defaultRequest.headers,
          content: Affjax.defaultRequest.content,
          username: Affjax.defaultRequest.username,
          password: Affjax.defaultRequest.password,
          withCredentials: Affjax.defaultRequest.withCredentials,
          responseFormat: Affjax_ResponseFormat.json,
          timeout: Affjax.defaultRequest.timeout
      }))(function (result) {
          if (result instanceof Data_Either.Left) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(push("GET /api response failed to decode: " + Affjax.printError(result.value0)));
          };
          if (result instanceof Data_Either.Right) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(push(Data_Argonaut_Core.stringifyWithIndent(2)(result.value0.body)));
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Effects (line 209, column 9 - line 215, column 48): " + [ result.constructor.name ]);
      })));
  };
  var sg = function (dictDOMInterpret) {
      return function (v) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v1) {
              return function (push) {
                  return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())(Deku_Graph_DOM_Shorthand.div([  ])({
                      div1: Deku_Graph_DOM.div([  ])({
                          button: Deku_Graph_DOM.button([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(clickCb(push)) ])(Deku_Graph_DOM_Shorthand.text("Click to get some random user data."))
                      }),
                      div2: Deku_Graph_DOM.div([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrDiv_StyleString)(Deku_Graph_DOM.Style.value)("display: none;") ])(Deku_Graph_DOM_Shorthand.pre([  ])(Deku_Graph_DOM_Shorthand.code([  ])(Deku_Graph_DOM_Shorthand.text(""))))
                  })))(false);
              };
          })(Deku_Control_Functions.iloop(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (e) {
              return function (v1) {
                  return function (started) {
                      if (e instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Deku_Control_Indexed.applicativeIxDOM)(true);
                      };
                      if (e instanceof Data_Either.Right) {
                          return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Control_Apply.applySecond(Deku_Control_Indexed.applyIxDOM)(Control_Applicative.when(Deku_Control_Indexed.applicativeIxDOM)(!started)(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                              reflectSymbol: function () {
                                  return "div.div2";
                              }
                          })()()(Deku_Change.changeDiv_({
                              reflectSymbol: function () {
                                  return "div.div2";
                              }
                          })())(Deku_Change.changeRL_Nil)))({
                              "div.div2": Deku_Graph_DOM["div'attr"]([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrDiv_StyleString)(Deku_Graph_DOM.Style.value)("display: block;") ])
                          })))(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                              reflectSymbol: function () {
                                  return "div.div2.pre.code.t";
                              }
                          })()()(Deku_Change.changeTextString({
                              reflectSymbol: function () {
                                  return "div.div2.pre.code.t";
                              }
                          })())(Deku_Change.changeRL_Nil)))({
                              "div.div2.pre.code.t": e.value0
                          })))(true);
                      };
                      throw new Error("Failed pattern match at Deku.Example.Docs.Effects (line 232, column 31 - line 243, column 16): " + [ e.constructor.name ]);
                  };
              };
          }));
      };
  };
  var effects = function (dpage) {
      return function (dictDOMInterpret) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v) {
              return function (v1) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())({
                      head: Deku_Graph_DOM.div([  ])({
                          header: Deku_Graph_DOM.header([  ])({
                              title: Deku_Graph_DOM.h1([  ])(Deku_Graph_DOM_Shorthand.text("Effects")),
                              subtitle: Deku_Graph_DOM.h3([  ])(Deku_Graph_DOM_Shorthand.text("Let's make a network call"))
                          }),
                          pars: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("This example is similar to the previous one in its design: "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("iloop")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" is called in response to an event. The difference is that the response isn't immediate. Instead, we wait for the result of a network call."), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.pre([  ])(Deku_Graph_DOM_Shorthand.code([  ])(Deku_Graph_DOM_Shorthand.text("module Deku.Example.Docs.Example.Effects where\x0a\x0aimport Prelude\x0a\x0aimport Affjax as AX\x0aimport Affjax.ResponseFormat as ResponseFormat\x0aimport Data.Argonaut.Core (stringifyWithIndent)\x0aimport Data.Either (Either(..))\x0aimport Data.Foldable (for_)\x0aimport Data.HTTP.Method (Method(..))\x0aimport Deku.Change (ichange_)\x0aimport Deku.Control.Functions.Graph (iloop, (@!>))\x0aimport Deku.Control.Types (Frame0, Scene)\x0aimport Deku.Create (icreate)\x0aimport Deku.Graph.Attribute (Cb(..))\x0aimport Deku.Graph.DOM ((:=), root)\x0aimport Deku.Graph.DOM as D\x0aimport Deku.Graph.DOM.Shorthand as S\x0aimport Deku.Interpret (class DOMInterpret, makeFFIDOMSnapshot)\x0aimport Deku.Run (defaultOptions, run)\x0aimport Effect (Effect)\x0aimport Effect.Aff (launchAff_)\x0aimport Effect.Class (liftEffect)\x0aimport FRP.Event (subscribe)\x0aimport Web.DOM (Element)\x0aimport Web.HTML (window)\x0aimport Web.HTML.HTMLDocument (body)\x0aimport Web.HTML.HTMLElement (toElement)\x0aimport Web.HTML.Window (document)\x0a\x0aclickCb :: (String -> Effect Unit) -> Cb\x0aclickCb push = Cb\x0a  ( const do\x0a      launchAff_ $ do\x0a        result <- AX.request\x0a          ( AX.defaultRequest\x0a              { url = \"https://randomuser.me/api/\"\x0a              , method = Left GET\x0a              , responseFormat = ResponseFormat.json\x0a              }\x0a          )\x0a        case result of\x0a          Left err -> liftEffect $ push\x0a            ( \"GET /api response failed to decode: \" <>\x0a                AX.printError err\x0a            )\x0a          Right response -> liftEffect $ push $\x0a            stringifyWithIndent 2 response.body\x0a  )\x0a\x0ascene\x0a  :: forall env dom engine res\x0a   . Monoid res\x0a  => DOMInterpret dom engine\x0a  => Element\x0a  -> Scene env dom engine Frame0 String res\x0ascene elt =\x0a  ( \\_ push ->\x0a      ( icreate $ root elt\x0a          ( { div1: D.div []\x0a                { button: D.button\x0a                    [ D.OnClick := clickCb push ]\x0a                    (S.text \"Click to get some random user data.\")\x0a                }\x0a            , div2: D.div [D.Style := \"display: none;\"]\x0a                (S.pre [] (S.code [] (S.text \"\")))\x0a            }\x0a          )\x0a      ) $> false\x0a  ) @!> iloop \\e _ started -> case e of\x0a    Left _ -> pure true\x0a    Right str ->\x0a      when (not started)\x0a        ( ichange_\x0a            { \"root.div2\": D.div'attr [D.Style := \"display: block;\"]\x0a            }\x0a        )\x0a        *> ichange_\x0a          { \"root.div2.pre.code.t\": str\x0a          }\x0a        $> true\x0a\x0amain :: Effect Unit\x0amain = do\x0a  b' <- window >>= document >>= body\x0a  for_ (toElement <$> b') \\elt -> do\x0a    ffi <- makeFFIDOMSnapshot\x0a    subscribe\x0a      ( run (pure unit) (pure unit) defaultOptions ffi\x0a          (scene elt)\x0a\x0a      )\x0a      (_.res >>> pure)\x0a"))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Here's what it produces:"), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.blockquote([  ])({
                              example: Deku_Graph_DOM.subgraph({
                                  reflectSymbol: function () {
                                      return "div";
                                  }
                              })(Data_Hashable.hashableInt)(Data_Map_Internal.singleton(0)(new Data_Maybe.Just(Data_Unit.unit)))(function (dictDOMInterpret1) {
                                  return sg(dictDOMInterpret1);
                              })
                          }), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Arbitrary effects")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Because all event listeners execute in the effect monad, you can do more or less whatever you want. Make a network call, run a monad transformer stack just for fun, play music using "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("purescript-wags")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". The sky's the limit!"), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Next steps")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("In more complicated apps, like this documentation, we'll want to split up our components into sub-components and create a way for them to communicate back and forth. In the next section, we'll see one way to do this via ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Subgraph.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("subgraphs")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(".")), Data_Unit.unit))))), Data_Unit.unit))))))))))
                      })
                  });
              };
          })(Deku_Control_Functions.freeze(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene));
      };
  };
  exports["effects"] = effects;
})(PS);
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                  
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  exports["fromEventTarget"] = fromEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports._target = function (e) {
    return e.target;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var target = function ($1) {
      return Data_Nullable.toMaybe($foreign["_target"]($1));
  };
  exports["target"] = target;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.valueAsNumber = function (input) {
    return function () {
      return input.valueAsNumber;
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                  
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromElement"] = fromElement;
  exports["valueAsNumber"] = $foreign.valueAsNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Events"] = $PS["Deku.Example.Docs.Events"] || {};
  var exports = $PS["Deku.Example.Docs.Events"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Change = $PS["Deku.Change"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Indexed = $PS["Deku.Control.Indexed"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];                
  var ButtonClicked = (function () {
      function ButtonClicked() {

      };
      ButtonClicked.value = new ButtonClicked();
      return ButtonClicked;
  })();
  var SliderMoved = (function () {
      function SliderMoved(value0) {
          this.value0 = value0;
      };
      SliderMoved.create = function (value0) {
          return new SliderMoved(value0);
      };
      return SliderMoved;
  })();
  var sg = function (dictDOMInterpret) {
      return function (v) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v1) {
              return function (push) {
                  return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())(Deku_Graph_DOM_Shorthand.div([  ])({
                      div1: Deku_Graph_DOM.div([  ])({
                          button: Deku_Graph_DOM.button([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(ButtonClicked.value))) ])(Deku_Graph_DOM_Shorthand.text("Click")),
                          count: Deku_Graph_DOM.div([  ])(Deku_Graph_DOM_Shorthand.text("Val: 0"))
                      }),
                      div2: Deku_Graph_DOM.div([  ])({
                          slider: Deku_Graph_DOM.input([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrInput_XtypeString)(Deku_Graph_DOM.Xtype.value)("range"), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnInputCb)(Deku_Graph_DOM.OnInput.value)(function (e) {
                              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Web_Event_Event.target(e))(Web_DOM_Element.fromEventTarget))(Web_HTML_HTMLInputElement.fromElement))(Control_Bind.composeKleisli(Effect.bindEffect)(Web_HTML_HTMLInputElement.valueAsNumber)(function ($14) {
                                  return push(SliderMoved.create($14));
                              }));
                          }) ])({}),
                          val: Deku_Graph_DOM.div([  ])(Deku_Graph_DOM_Shorthand.text("Val: 50"))
                      })
                  })))(0);
              };
          })(Deku_Control_Functions.iloop(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (e) {
              return function (v1) {
                  return function (nclicks) {
                      if (e instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Deku_Control_Indexed.applicativeIxDOM)(nclicks);
                      };
                      if (e instanceof Data_Either.Right && e.value0 instanceof ButtonClicked) {
                          var c = nclicks + 1 | 0;
                          return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                              reflectSymbol: function () {
                                  return "div.div1.button.t";
                              }
                          })()()(Deku_Change.changeTextString({
                              reflectSymbol: function () {
                                  return "div.div1.button.t";
                              }
                          })())(Deku_Change.changeRL_Cons({
                              reflectSymbol: function () {
                                  return "div.div1.count.t";
                              }
                          })()()(Deku_Change.changeTextString({
                              reflectSymbol: function () {
                                  return "div.div1.count.t";
                              }
                          })())(Deku_Change.changeRL_Nil))))({
                              "div.div1.count.t": "Val: " + Data_Show.show(Data_Show.showInt)(c),
                              "div.div1.button.t": (function () {
                                  var $10 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(c)(2) === 0;
                                  if ($10) {
                                      return "Click";
                                  };
                                  return "me";
                              })()
                          }))(c);
                      };
                      if (e instanceof Data_Either.Right && e.value0 instanceof SliderMoved) {
                          return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                              reflectSymbol: function () {
                                  return "div.div2.val.t";
                              }
                          })()()(Deku_Change.changeTextString({
                              reflectSymbol: function () {
                                  return "div.div2.val.t";
                              }
                          })())(Deku_Change.changeRL_Nil)))({
                              "div.div2.val.t": "Val: " + Data_Show.show(Data_Show.showNumber)(e.value0.value0)
                          }))(nclicks);
                      };
                      throw new Error("Failed pattern match at Deku.Example.Docs.Events (line 339, column 31 - line 351, column 17): " + [ e.constructor.name ]);
                  };
              };
          }));
      };
  };
  var events = function (dpage) {
      return function (dictDOMInterpret) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v) {
              return function (v1) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())({
                      head: Deku_Graph_DOM.div([  ])({
                          header: Deku_Graph_DOM.header([  ])({
                              title: Deku_Graph_DOM.h1([  ])(Deku_Graph_DOM_Shorthand.text("Events")),
                              subtitle: Deku_Graph_DOM.h3([  ])(Deku_Graph_DOM_Shorthand.text("Listening to the DOM"))
                          }),
                          pars: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "13";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "12";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "11";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("We'll spice up the previous example by adding an event listener to our button. When we do, an element will reveal itself, and when we click on it again, it will be hidden. There are several ways to accomplish this effect in Deku, including using control structures and subgraphs, but this is the most basic way to do it and a good introduction to the event handling mechanism.")), new Data_Tuple.Tuple(Deku_Graph_DOM.pre([  ])(Deku_Graph_DOM_Shorthand.code([  ])(Deku_Graph_DOM_Shorthand.text("module Deku.Example.Docs.Example.Events where\x0a\x0aimport Prelude\x0a\x0aimport Data.Either (Either(..))\x0aimport Data.Foldable (for_)\x0aimport Deku.Change (ichange_)\x0aimport Deku.Control.Functions.Graph (iloop, (@!>))\x0aimport Deku.Control.Types (Frame0, Scene)\x0aimport Deku.Create (icreate)\x0aimport Deku.Graph.Attribute (Cb(..))\x0aimport Deku.Graph.DOM ((:=), root)\x0aimport Deku.Graph.DOM as D\x0aimport Deku.Graph.DOM.Shorthand as S\x0aimport Deku.Interpret (class DOMInterpret, makeFFIDOMSnapshot)\x0aimport Deku.Run (defaultOptions, run)\x0aimport Effect (Effect)\x0aimport FRP.Event (subscribe)\x0aimport Web.DOM (Element)\x0aimport Web.DOM.Element (fromEventTarget)\x0aimport Web.Event.Event (target)\x0aimport Web.HTML (window)\x0aimport Web.HTML.HTMLDocument (body)\x0aimport Web.HTML.HTMLElement (toElement)\x0aimport Web.HTML.HTMLInputElement (fromElement, valueAsNumber)\x0aimport Web.HTML.Window (document)\x0a\x0adata UIEvents = ButtonClicked | SliderMoved Number\x0a\x0ascene\x0a  :: forall env dom engine res\x0a   . Monoid res\x0a  => DOMInterpret dom engine\x0a  => Element\x0a  -> Scene env dom engine Frame0 UIEvents res\x0ascene elt =\x0a  ( \\_ push ->\x0a      ( icreate $ root elt\x0a          ( { div1: D.div []\x0a                { button: D.button\x0a                    [ D.OnClick :=\x0a                        Cb (const $ push ButtonClicked)\x0a                    ]\x0a                    (S.text \"Click\")\x0a                , count: D.div [] (S.text \"Val: 0\")\x0a                }\x0a            , div2: D.div []\x0a                { slider: D.input\x0a                    [ D.Xtype := \"range\"\x0a                    , D.OnInput := Cb \\e -> for_\x0a                        ( target e\x0a                            >>= fromEventTarget\x0a                            >>= fromElement\x0a                        )\x0a                        ( valueAsNumber\x0a                            >=> push <<< SliderMoved\x0a                        )\x0a                    ]\x0a                    {}\x0a                , val: D.div [] (S.text \"Val: 50\")\x0a                }\x0a            }\x0a          )\x0a      ) $> 0\x0a  ) @!> iloop \\e _ nclicks -> case e of\x0a    Left _ -> pure nclicks\x0a    Right ButtonClicked ->\x0a      let\x0a        c = nclicks + 1\x0a      in\x0a        ichange_\x0a          { \"root.div1.count.t\": \"Val: \" <> show c\x0a          , \"root.div1.button.t\":\x0a              if mod c 2 == 0 then \"Click\" else \"me\"\x0a          } $> c\x0a    Right (SliderMoved n) ->\x0a      ichange_\x0a        { \"root.div2.val.t\": \"Val: \" <> show n\x0a        } $> nclicks\x0a\x0amain :: Effect Unit\x0amain = do\x0a  b' <- window >>= document >>= body\x0a  for_ (toElement <$> b') \\elt -> do\x0a    ffi <- makeFFIDOMSnapshot\x0a    subscribe\x0a      ( run (pure unit) (pure unit) defaultOptions ffi\x0a          (scene elt)\x0a\x0a      )\x0a      (_.res >>> pure)\x0a"))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Here's what it produces:"), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.blockquote([  ])({
                              example: Deku_Graph_DOM.subgraph({
                                  reflectSymbol: function () {
                                      return "div";
                                  }
                              })(Data_Hashable.hashableInt)(Data_Map_Internal.singleton(0)(new Data_Maybe.Just(Data_Unit.unit)))(function (dictDOMInterpret1) {
                                  return sg(dictDOMInterpret1);
                              })
                          }), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Event handling")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD5(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD6(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD7(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD8(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD9(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD9(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD9(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD5(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD6(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD7(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "26";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "25";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "24";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "23";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "22";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "21";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "20";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "19";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "18";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "17";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "16";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "15";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "14";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "13";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "12";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "11";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("All DOM event handlers, like "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("OnClick")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("OnInput")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", can be set with a value of type "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Cb")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". This type is a newtype around"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("(Event -> Effect Unit)")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". In order to actually trigger the event, you'll use the"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("push")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" function passed both to "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("istart")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("iloop")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". This function has a signature of "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("(push -> Effect Unit)")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", where "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("push")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("is defined a per-component basis. Here, the type used is "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("UIEvents")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". Whenever a push happens, it goes to the right of the next set of DOM instructions emitted by our stream. There are several ways to produce those instructions. Until now, we've just seen "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("freeze")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", which effectively ignores all events and reproduces the most recent DOM "), new Data_Tuple.Tuple(Deku_Graph_DOM.i([  ])(Deku_Graph_DOM_Shorthand.text("ad infinitum")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". In this case, we use a different stream-producing mechanism called "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("iloop")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("."), Data_Unit.unit))))))))))))))))))))))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Loop-de-loop")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("iloop")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" function effectively fixes the nodes of the DOM while allowing their content to vary. This means that we'll no longer be able to add or remove nodes, but we can change them."), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Changing is done with the function "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("ichange_")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("ichange_")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" uses Barlow-style lenses to zoom into the DOM with surgical precision, changing only what needs to be changed. This is what keeps Deku so darn fast and why it is ideally suited to performance-critical webpages. Because it tracks the DOM at "), new Data_Tuple.Tuple(Deku_Graph_DOM.i([  ])(Deku_Graph_DOM_Shorthand.text("compile time")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", you always know what is and isn't present, which allows for one-off changes without re-rendering a bunch of elements. It's even faster than React, having similar performance profile as Svelte while giving the full power of PureScript's functional language."), Data_Unit.unit))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Arguments to our loop")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The first argument to our loop is an "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Either env push")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". We've already seen that"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("push")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" in this example is"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("UIEvents")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". We're not using "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("env")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" yet, but we will when we talk about subgraphs in that section."), Data_Unit.unit))))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD5(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD6(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "15";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "14";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "13";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "12";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "11";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The second argument to our loop is the same push function that we got in the initial call to our function. The third argument is a custom accumulator. In our case, we use an "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Int")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" to track the number of clicks. The accumulator must be returned as the value contained in the indexed monad if you are using the monadic syntax ("), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("icreate")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(","), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("ichange")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", etc)."), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" There is also a comonadic syntax, but it's a bit more verbose. Those versions, "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("create")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("change")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(",live in the files "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Create.purs")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("and"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Change.purs")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("respectively if you want to see how their signatures differ."), Data_Unit.unit)))))))))))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Next steps")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("In this section, saw how to react to events using the ")), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("iloop")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" function in combination with "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("ichange_")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". In the next section, we'll use a similar mechanism to deal with arbitrary "), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Effects.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("effects")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(".")), Data_Unit.unit))))))))), Data_Unit.unit))))))))))))))))
                      })
                  });
              };
          })(Deku_Control_Functions.freeze(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene));
      };
  };
  exports["events"] = events;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.HelloWorld"] = $PS["Deku.Example.Docs.HelloWorld"] || {};
  var exports = $PS["Deku.Example.Docs.HelloWorld"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];                
  var helloWorld = function (dpage) {
      return function (dictDOMInterpret) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v) {
              return function (v1) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())({
                      head: Deku_Graph_DOM.div([  ])({
                          header: Deku_Graph_DOM.header([  ])({
                              title: Deku_Graph_DOM.h1([  ])(Deku_Graph_DOM_Shorthand.text("Hello world")),
                              subtitle: Deku_Graph_DOM.h3([  ])(Deku_Graph_DOM_Shorthand.text("A small example"))
                          }),
                          pars: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD5(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD6(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD7(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD8(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "17";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "16";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "15";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "14";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "13";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "12";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "11";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("Here is \"hello world\" in Deku. In this and all the following sections, we'll start with a full example, and we'll pick it apart afterwards.")), new Data_Tuple.Tuple(Deku_Graph_DOM.pre([  ])(Deku_Graph_DOM_Shorthand.code([  ])(Deku_Graph_DOM_Shorthand.text("module Deku.Example.Docs.Example.HelloWorld where\x0a\x0aimport Prelude\x0a\x0aimport Data.Foldable (for_)\x0aimport Deku.Control.Functions.Graph (freeze, (@!>))\x0aimport Deku.Create (icreate)\x0aimport Deku.Graph.DOM (root)\x0aimport Deku.Graph.DOM.Shorthand as S\x0aimport Deku.Interpret (makeFFIDOMSnapshot)\x0aimport Deku.Run (defaultOptions, run)\x0aimport Effect (Effect)\x0aimport FRP.Event (subscribe)\x0aimport Web.HTML (window)\x0aimport Web.HTML.HTMLDocument (body)\x0aimport Web.HTML.HTMLElement (toElement)\x0aimport Web.HTML.Window (document)\x0a\x0amain :: Effect Unit\x0amain = do\x0a  b' <- window >>= document >>= body\x0a  for_ (toElement <$> b') \\elt -> do\x0a    ffi <- makeFFIDOMSnapshot\x0a    subscribe\x0a      ( run (pure unit) (pure unit) defaultOptions ffi\x0a          $\x0a            ( \\_ _ ->\x0a                (icreate $ root elt (S.text \"Hello world\"))\x0a            ) @!> freeze\x0a\x0a      )\x0a      (_.res >>> pure)\x0a"))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Yikes, that's a lot of imports! But the actual Deku bit is pretty tame. Let's tackle it starting at the beginning of the"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text(" main ")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("function."), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Oh, and here's what it produces:"), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.blockquote([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Hello world"), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("You gotta start somewhere!")), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Our top-level component")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("Deku works in arbitrary DOM components, so in the main function, we grab a component from our page \u2014 in this case, the body. We'll use this as the root of our component tree.")), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("The run function")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("Deku is a ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("https://wiki.haskell.org/Functional_Reactive_Programming") ])(Deku_Graph_DOM_Shorthand.text("Functional Reactive Programming")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(", or FRP, framework at its heart. This means that everything runs on ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("https://wiki.haskell.org/Functional_Reactive_Programming") ])(Deku_Graph_DOM_Shorthand.text("Events")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(" and ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("https://wiki.haskell.org/Functional_Reactive_Programming") ])(Deku_Graph_DOM_Shorthand.text("Behaviors")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(". The run function creates an event, which you subscribe to in order to get an outcome or residual. In this case, we're ignoring the residual (which is just unit) at the end of the main function by calling")), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text(" _.res >>> pure")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(".")), Data_Unit.unit))))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("Events are effectful, and this one is no different. Here, the side effect is creating a beautiful webpage like the one you're seeing now. Or, if you're following along with the example, it will create \"Hello world\" in the body of the page.")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The arguments to "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("run")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" are not important at this point. Know just that you have to call "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("run")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" to get your webpage displayed on the screen."), Data_Unit.unit))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Our scene")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The last argument to "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("run")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" is the scene we are going to draw. The scene starts by creating the text \"Hello world\" in the root element and is then frozen, meaning that it can't change."), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("This pattern is mega-super-important. In Deku, DOMs are streamed, which means that every time we request a DOM, Deku has to produce one. By calling freeze, we're not saying that we can't demand a DOM anymore, but rather, we're saying that Deku will always produce the same DOM when asked. As you become more comfortable with Deku, you'll realize that it's just one big generator of streams of DOMs.")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("That's all you need to know at this point. We'll go over what "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("icreate")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("@!>")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" do later in this guide. For now, the important bit is that you have see how to get up and running. We'll build off of this in the following pages."), Data_Unit.unit))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Next steps")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("Now that you can say hello to the world, let's explore some classic DOM tags like anchor and button by introducing a ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.SimpleComponent.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("simple component")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(".")), Data_Unit.unit))))), Data_Unit.unit))))))))))))))))))))
                      })
                  });
              };
          })(Deku_Control_Functions.freeze(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene));
      };
  };
  exports["helloWorld"] = helloWorld;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Intro"] = $PS["Deku.Example.Docs.Intro"] || {};
  var exports = $PS["Deku.Example.Docs.Intro"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Functions_Subgraph = $PS["Deku.Control.Functions.Subgraph"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];                
  var intro = function (dpage) {
      return function (dictDOMInterpret) {
          return Deku_Control_Functions_Subgraph.istart()(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(function (v) {
              return function (v1) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())({
                      head: Deku_Graph_DOM.div([  ])({
                          header: Deku_Graph_DOM.header([  ])({
                              title: Deku_Graph_DOM.h1([  ])(Deku_Graph_DOM_Shorthand.text("Deku")),
                              subtitle: Deku_Graph_DOM.h3([  ])(Deku_Graph_DOM_Shorthand.text("A web micro-framework written in PureScript"))
                          }),
                          pars: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("Hi! You've found Deku.")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])({
                              a: Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("https://github.com/mikesol/purescript-deku") ])({
                                  t: Deku_Graph_DOM.text("Deku ")
                              }),
                              s: Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(" is the coolest web micro-framework that no one knows about yet. Except you, of course, as you're here. So welcome!"))
                          }), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("This is the Deku documentation. Like most documentation, it's radically incomplete, hopelessly biased, and full of unfounded assumptions. That said, I hope it gets you started using Deku. If you have any questions, feel free ping me on the ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("https://purescript.org/chat") ])({
                              t: Deku_Graph_DOM.text("PureScript Discord")
                          }), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])({
                              t: Deku_Graph_DOM.text(".")
                          }), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("This documentation is written in Deku and can be found ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("https://github.com/mikesol/purescript-deku/tree/main/examples/docs") ])(Deku_Graph_DOM_Shorthand.text("here.")), Data_Unit.unit)))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("And now, without further ado, check out the ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.HelloWorld.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("hello world section")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("!")), Data_Unit.unit))))), Data_Unit.unit)))))))
                      })
                  });
              };
          })(Deku_Control_Functions_Subgraph.freeze(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))()(dictDOMInterpret));
      };
  };
  exports["intro"] = intro;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.SSR"] = $PS["Deku.Example.Docs.SSR"] || {};
  var exports = $PS["Deku.Example.Docs.SSR"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Control_Functions_Subgraph = $PS["Deku.Control.Functions.Subgraph"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];                
  var serverSide = function (dpage) {
      return function (dictDOMInterpret) {
          return Deku_Control_Functions_Subgraph.istart()(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(function (v) {
              return function (v1) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())({
                      head: Deku_Graph_DOM.div([  ])({
                          header: Deku_Graph_DOM.header([  ])({
                              title: Deku_Graph_DOM.h1([  ])(Deku_Graph_DOM_Shorthand.text("Control")),
                              subtitle: Deku_Graph_DOM.h3([  ])(Deku_Graph_DOM_Shorthand.text("Control flows through the Deku tree"))
                          }),
                          pars: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("Here is \"hello world\" in Deku. In this and all the following sections, we'll start with a full example, and we'll pick it apart afterwards.")), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("module HelloWorld where\x0a\x0aimport Prelude\x0a\x0amain :: Effect Unit\x0amain = pure unit\x0a")), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Our top-level component")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("Deku works in arbitrary DOM components, so in the first part of our hello world, we grab a component from our page \u2014 in this case, the body.")), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("The run function")), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Our scene")), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Next steps")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("Now that you can say hello to the world, let's explore the anatomy of a component by introducing a ")), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Subgraph.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("simple component")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(".")), Data_Unit.unit))))), Data_Unit.unit))))))))))
                      })
                  });
              };
          })(Deku_Control_Functions_Subgraph.freeze(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))()(dictDOMInterpret));
      };
  };
  exports["serverSide"] = serverSide;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.SimpleComponent"] = $PS["Deku.Example.Docs.SimpleComponent"] || {};
  var exports = $PS["Deku.Example.Docs.SimpleComponent"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Vec = $PS["Data.Vec"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];                
  var simpleComponent = function (dpage) {
      return function (dictDOMInterpret) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v) {
              return function (v1) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())({
                      head: Deku_Graph_DOM.div([  ])({
                          header: Deku_Graph_DOM.header([  ])({
                              title: Deku_Graph_DOM.h1([  ])(Deku_Graph_DOM_Shorthand.text("A Simple Component")),
                              subtitle: Deku_Graph_DOM.h3([  ])(Deku_Graph_DOM_Shorthand.text("Slightly more bells and whistles"))
                          }),
                          pars: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD5(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD6(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD7(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD8(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "17";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "16";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "15";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "14";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "13";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "12";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "11";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("Let's look at an example with several different components. There are also a few different syntax options depending on what tune your fingers wish to type.")), new Data_Tuple.Tuple(Deku_Graph_DOM.pre([  ])(Deku_Graph_DOM_Shorthand.code([  ])(Deku_Graph_DOM_Shorthand.text("module Deku.Example.Docs.Example.Component where\x0a\x0aimport Prelude\x0a\x0aimport Data.Foldable (for_)\x0aimport Data.Vec ((+>), empty)\x0aimport Deku.Graph.DOM ((:=), root)\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Deku.Control.Functions.Graph (freeze, (@!>))\x0aimport Deku.Control.Types (Frame0, Scene)\x0aimport Deku.Create (icreate)\x0aimport Deku.Graph.DOM as D\x0aimport Deku.Graph.DOM.Shorthand as S\x0aimport Deku.Interpret (class DOMInterpret, makeFFIDOMSnapshot)\x0aimport Deku.Run (defaultOptions, run)\x0aimport Deku.Util (detup, vex)\x0aimport Effect (Effect)\x0aimport FRP.Event (subscribe)\x0aimport Web.DOM (Element)\x0aimport Web.HTML (window)\x0aimport Web.HTML.HTMLDocument (body)\x0aimport Web.HTML.HTMLElement (toElement)\x0aimport Web.HTML.Window (document)\x0a\x0ascene\x0a  :: forall env dom engine push res\x0a   . Monoid res\x0a  => DOMInterpret dom engine\x0a  => Element\x0a  -> Scene env dom engine Frame0 push res\x0ascene elt =\x0a  ( \\_ _ ->\x0a      ( icreate $ root elt\x0a          ( { button: D.button [] { t: D.text \"I do nothing\" }\x0a            , list: D.ul []\x0a                $ vex\x0a                $ map (D.li [] <<< S.text)\x0a                  (\"A\" +> \"B\" +> \"C\" +> empty)\x0a            , rando: D.div []\x0a                $ detup\x0a                $ D.a [D.Href := \"https://github.com/mikesol/purescript-deku\"] (S.text \"foo \")\x0a                  /\\ D.i [] (S.text \" bar \")\x0a                  /\\ D.span [ D.Style := \"font-weight: 800;\" ] (S.text \" baz\")\x0a                  /\\\x0a                    unit\x0a            , lotsOfDivs: D.div []\x0a                $ S.div []\x0a                $ S.div []\x0a                $ S.input [ D.Xtype := \"range\" ] {}\x0a            }\x0a          )\x0a      )\x0a  ) @!> freeze\x0a\x0amain :: Effect Unit\x0amain = do\x0a  b' <- window >>= document >>= body\x0a  for_ (toElement <$> b') \\elt -> do\x0a    ffi <- makeFFIDOMSnapshot\x0a    subscribe\x0a      ( run (pure unit) (pure unit) defaultOptions ffi\x0a          (scene elt)\x0a\x0a      )\x0a      (_.res >>> pure)\x0a"))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Here's what it produces:"), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.blockquote([  ])({
                              button: Deku_Graph_DOM.button([  ])({
                                  t: Deku_Graph_DOM.text("I do nothing")
                              }),
                              list: Deku_Graph_DOM.ul([  ])(Deku_Util.vex(Deku_Util.vxneq(Data_Typelevel_Num_Ops.succPred(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0)))(Deku_Util.vxneq(Data_Typelevel_Num_Ops.succPred(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0)))(Deku_Util.vxneq(Data_Typelevel_Num_Ops.succPred(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0)))(Deku_Util.vx0)()()({
                                  reflectSymbol: function () {
                                      return "1";
                                  }
                              })())()()({
                                  reflectSymbol: function () {
                                      return "2";
                                  }
                              })())()()({
                                  reflectSymbol: function () {
                                      return "3";
                                  }
                              })())(Data_Functor.map(Data_Vec.functorVec)((function () {
                                  var $3 = Deku_Graph_DOM.li([  ]);
                                  return function ($4) {
                                      return $3(Deku_Graph_DOM_Shorthand.text($4));
                                  };
                              })())(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))("A")(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))("B")(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))("C")(Data_Vec.empty)))))),
                              rando: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                                  reflectSymbol: function () {
                                      return "2";
                                  }
                              })())()()({
                                  reflectSymbol: function () {
                                      return "1";
                                  }
                              })())()()({
                                  reflectSymbol: function () {
                                      return "0";
                                  }
                              })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_HrefString)(Deku_Graph_DOM.Href.value)("https://github.com/mikesol/purescript-deku") ])(Deku_Graph_DOM_Shorthand.text("foo ")), new Data_Tuple.Tuple(Deku_Graph_DOM.i([  ])(Deku_Graph_DOM_Shorthand.text(" bar ")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrSpan_StyleString)(Deku_Graph_DOM.Style.value)("font-weight: 800;") ])(Deku_Graph_DOM_Shorthand.text(" baz")), Data_Unit.unit))))),
                              lotsOfDivs: Deku_Graph_DOM.div([  ])(Deku_Graph_DOM_Shorthand.div([  ])(Deku_Graph_DOM_Shorthand.div([  ])(Deku_Graph_DOM_Shorthand.input([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrInput_XtypeString)(Deku_Graph_DOM.Xtype.value)("range") ])({}))))
                          }), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("It's all about records")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Deku encodes the DOM using records. The functions "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("detup")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(","), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("vex")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", and all of the "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("S")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("-prefixed functions produce records."), Data_Unit.unit))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Another thing to note is the import of "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("import Deku.Control.Functions.Graph (freeze, (@!>))")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". This works fine for small examples, but for larger ones, you'll want to use "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("import Deku.Control.Functions (freeze, (@!>))")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". The second version of those functions is much faster to compile at the expense of missing certain subtle bugs in corner cases. In 99% of cases, you'll want to use the second version, using the first only in acceptance testing on a CI platform if needed."), Data_Unit.unit))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Straight-up records")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("All DOM elements accept a record of child nodes. In the example above, we give "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("root")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("a record with four keys: button, list, rando and lotsOfDivs."), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Records are cool, but they get tedious. For example, the button needs a record just to add a bit of text. For one-off records, you can use the "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("S")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" family of functions. For example, "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("S.text \"hi\"")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("is equivalent to"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("{ t: D.text \"hi\" }")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("."), Data_Unit.unit))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("De-tupling")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Next up is "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("detup")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("detup")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" takes a \"list\" of tuples terminated by "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("unit")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and turns them into a record with keys that go from 0 to however many elements are in the tuple. This feels a lot more like working with arrays in Halogen and is fast to type. As I'm writing this, I'm using "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("detup")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("(check the source code)."), Data_Unit.unit))))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Vectors")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("If all of your elements have the same type, you can use "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("vex")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("vex")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" is nice because we can map over the elements, whereas tuples are heterogeneous and require more type-level machinery. In the example above, all of the list items are the same and are stashed in a vector that is processed by"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("vex")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("."), Data_Unit.unit))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Attributes")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The last thing to address here are attributes. Attributes like an element's style or id are added in the array after element creation. In the example above, we make the input a range slider, for example, using"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Xtype := \"range\"")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". Unlike Halogen, there are no checks to make sure you give a valid string. So if you want your range slider to have the value of "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("true")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", you can. One day, I may build some validators, but passing strings works decently well here."), Data_Unit.unit))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Next steps")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text("In this section, we built a simple component out of records. We used several record-shorthand functions, including the  ")), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("detup")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", the"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("vex")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(", and the "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("S")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" family of functions. We also saw how to add attributes to elements. In the next section, we'll learn how to respond to "), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Events.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("events")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(".")), Data_Unit.unit))))))))))), Data_Unit.unit))))))))))))))))))))
                      })
                  });
              };
          })(Deku_Control_Functions.freeze(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene));
      };
  };
  exports["simpleComponent"] = simpleComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs.Subgraphs"] = $PS["Deku.Example.Docs.Subgraphs"] || {};
  var exports = $PS["Deku.Example.Docs.Subgraphs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Hashable = $PS["Data.Hashable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Change = $PS["Deku.Change"];
  var Deku_Control_Functions = $PS["Deku.Control.Functions"];
  var Deku_Control_Indexed = $PS["Deku.Control.Indexed"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Example_Docs_Util = $PS["Deku.Example.Docs.Util"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];                
  var Sg0 = (function () {
      function Sg0() {

      };
      Sg0.value = new Sg0();
      return Sg0;
  })();
  var Sg1 = (function () {
      function Sg1() {

      };
      Sg1.value = new Sg1();
      return Sg1;
  })();
  var showSgs = {
      show: function (v) {
          if (v instanceof Sg0) {
              return "Sg0";
          };
          if (v instanceof Sg1) {
              return "Sg1";
          };
          throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 31, column 1 - line 33, column 19): " + [ v.constructor.name ]);
      }
  };
  var eqSgs = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Sg0 && y instanceof Sg0) {
                  return true;
              };
              if (x instanceof Sg1 && y instanceof Sg1) {
                  return true;
              };
              return false;
          };
      }
  };
  var hashableSgs = {
      hash: (function () {
          var $50 = Data_Hashable.hash(Data_Hashable.hashableString);
          var $51 = Data_Show.show(showSgs);
          return function ($52) {
              return $50($51($52));
          };
      })(),
      Eq0: function () {
          return eqSgs;
      }
  };
  var ordSgs = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Sg0 && y instanceof Sg0) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Sg0) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Sg0) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Sg1 && y instanceof Sg1) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 30, column 1 - line 30, column 24): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqSgs;
      }
  };
  var sub = function (raise) {
      return function (dictDOMInterpret) {
          return function (v) {
              if (v instanceof Sg0) {
                  return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v1) {
                      return function (push) {
                          return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())(Deku_Graph_DOM_Shorthand.div([  ])({
                              div1: Deku_Graph_DOM.div([  ])({
                                  button0: Deku_Graph_DOM.button([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](raise(Sg0.value))) ])(Deku_Graph_DOM_Shorthand.text("Send to B")),
                                  count0: Deku_Graph_DOM.div([  ])(Deku_Graph_DOM_Shorthand.text("A: 0")),
                                  button1: Deku_Graph_DOM.button([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Data_Unit.unit))) ])(Deku_Graph_DOM_Shorthand.text("Send to C")),
                                  count1: Deku_Graph_DOM.div([  ])(Deku_Graph_DOM_Shorthand.text("C: 0"))
                              }),
                              hr: Deku_Graph_DOM.hr([  ])({})
                          })))(new Data_Tuple.Tuple(0, 0));
                      };
                  })(Deku_Control_Functions.iloop(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (e) {
                      return function (v1) {
                          return function (v2) {
                              if (e instanceof Data_Either.Left) {
                                  var $$new = new Data_Tuple.Tuple(v2.value0 + 1 | 0, v2.value1);
                                  return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                                      reflectSymbol: function () {
                                          return "div.div1.count0.t";
                                      }
                                  })()()(Deku_Change.changeTextString({
                                      reflectSymbol: function () {
                                          return "div.div1.count0.t";
                                      }
                                  })())(Deku_Change.changeRL_Nil)))({
                                      "div.div1.count0.t": "A: " + Data_Show.show(Data_Show.showInt)(Data_Tuple.fst($$new))
                                  }))($$new);
                              };
                              if (e instanceof Data_Either.Right) {
                                  var $$new = new Data_Tuple.Tuple(v2.value0, v2.value1 + 1 | 0);
                                  return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                                      reflectSymbol: function () {
                                          return "div.div1.count1.t";
                                      }
                                  })()()(Deku_Change.changeTextString({
                                      reflectSymbol: function () {
                                          return "div.div1.count1.t";
                                      }
                                  })())(Deku_Change.changeRL_Nil)))({
                                      "div.div1.count1.t": "C: " + Data_Show.show(Data_Show.showInt)(Data_Tuple.snd($$new))
                                  }))($$new);
                              };
                              throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 57, column 32 - line 71, column 19): " + [ e.constructor.name ]);
                          };
                      };
                  }));
              };
              if (v instanceof Sg1) {
                  return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v1) {
                      return function (push) {
                          return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())(Deku_Graph_DOM_Shorthand.div([  ])({
                              div1: Deku_Graph_DOM.div([  ])({
                                  button0: Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](raise(Sg1.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Send to A")),
                                  count0: Deku_Graph_DOM.div([  ])(Deku_Graph_DOM_Shorthand.text("B: 0")),
                                  button1: Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Data_Unit.unit))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Send to D")),
                                  count1: Deku_Graph_DOM.div([  ])(Deku_Graph_DOM_Shorthand.text("D: 0"))
                              })
                          })))(new Data_Tuple.Tuple(0, 0));
                      };
                  })(Deku_Control_Functions.iloop(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (e) {
                      return function (v1) {
                          return function (v2) {
                              if (e instanceof Data_Either.Left) {
                                  var $$new = new Data_Tuple.Tuple(v2.value0 + 1 | 0, v2.value1);
                                  return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                                      reflectSymbol: function () {
                                          return "div.div1.count0.t";
                                      }
                                  })()()(Deku_Change.changeTextString({
                                      reflectSymbol: function () {
                                          return "div.div1.count0.t";
                                      }
                                  })())(Deku_Change.changeRL_Nil)))({
                                      "div.div1.count0.t": "B: " + Data_Show.show(Data_Show.showInt)(Data_Tuple.fst($$new))
                                  }))($$new);
                              };
                              if (e instanceof Data_Either.Right) {
                                  var $$new = new Data_Tuple.Tuple(v2.value0, v2.value1 + 1 | 0);
                                  return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                                      reflectSymbol: function () {
                                          return "div.div1.count1.t";
                                      }
                                  })()()(Deku_Change.changeTextString({
                                      reflectSymbol: function () {
                                          return "div.div1.count1.t";
                                      }
                                  })())(Deku_Change.changeRL_Nil)))({
                                      "div.div1.count1.t": "D: " + Data_Show.show(Data_Show.showInt)(Data_Tuple.snd($$new))
                                  }))($$new);
                              };
                              throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 94, column 32 - line 108, column 19): " + [ e.constructor.name ]);
                          };
                      };
                  }));
              };
              throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 37, column 1 - line 37, column 63): " + [ raise.constructor.name, v.constructor.name ]);
          };
      };
  };
  var sg = function (dictDOMInterpret) {
      return function (v) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v1) {
              return function (push) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())(Deku_Graph_DOM_Shorthand.div([  ])({
                      sub: Deku_Graph_DOM.subgraph({
                          reflectSymbol: function () {
                              return "div";
                          }
                      })(hashableSgs)(Data_Map_Internal.insert(ordSgs)(Sg0.value)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Unit.unit))(Data_Map_Internal.singleton(Sg1.value)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Unit.unit))))(function (dictDOMInterpret1) {
                          return sub(push)(dictDOMInterpret1);
                      })
                  }));
              };
          })(Deku_Control_Functions.iloop(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (e) {
              return function (v1) {
                  return function (v2) {
                      if (e instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Deku_Control_Indexed.applicativeIxDOM)(Data_Unit.unit);
                      };
                      if (e instanceof Data_Either.Right && e.value0 instanceof Sg0) {
                          return Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                              reflectSymbol: function () {
                                  return "div.sub";
                              }
                          })()()(Deku_Change.changeSubgraph1({
                              reflectSymbol: function () {
                                  return "div.sub";
                              }
                          })({
                              reflectSymbol: function () {
                                  return "div";
                              }
                          })())(Deku_Change.changeRL_Nil)))({
                              "div.sub": Deku_Graph_DOM.xsubgraph(hashableSgs)(Data_Map_Internal.singleton(Sg1.value)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Unit.unit)))
                          });
                      };
                      if (e instanceof Data_Either.Right && e.value0 instanceof Sg1) {
                          return Deku_Change.ichange_(dictDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                              reflectSymbol: function () {
                                  return "div.sub";
                              }
                          })()()(Deku_Change.changeSubgraph1({
                              reflectSymbol: function () {
                                  return "div.sub";
                              }
                          })({
                              reflectSymbol: function () {
                                  return "div";
                              }
                          })())(Deku_Change.changeRL_Nil)))({
                              "div.sub": Deku_Graph_DOM.xsubgraph(hashableSgs)(Data_Map_Internal.singleton(Sg0.value)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Unit.unit)))
                          });
                      };
                      throw new Error("Failed pattern match at Deku.Example.Docs.Subgraphs (line 123, column 25 - line 130, column 8): " + [ e.constructor.name ]);
                  };
              };
          }));
      };
  };
  var subgraphs = function (dpage) {
      return function (dictDOMInterpret) {
          return Deku_Control_Functions.istart(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene)(function (v) {
              return function (v1) {
                  return Deku_Create.icreate(dictDOMInterpret)(Deku_Create.createAll())({
                      head: Deku_Graph_DOM.div([  ])({
                          header: Deku_Graph_DOM.header([  ])({
                              title: Deku_Graph_DOM.h1([  ])(Deku_Graph_DOM_Shorthand.text("Subgraphs")),
                              subtitle: Deku_Graph_DOM.h3([  ])(Deku_Graph_DOM_Shorthand.text("Inter-component communication"))
                          }),
                          pars: Deku_Graph_DOM.div([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD5(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD6(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD7(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD8(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD9(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD9(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD9(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD2))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD2)))()(Data_Typelevel_Num_Ops.divMod10D2x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD2))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "20";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "19";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "18";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "17";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "16";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "15";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "14";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "13";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "12";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "11";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("In any larger app, like this documentation, you'll want to split up your code into logical components. Besides making the code easier to work with, in Deku, this allows us to change child components on the fly without changing the type of the parent graph. We call these "), new Data_Tuple.Tuple(Deku_Graph_DOM.span([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrSpan_StyleString)(Deku_Graph_DOM.Style.value)("font-weight: 800;") ])(Deku_Graph_DOM_Shorthand.text("subgraphs")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("."), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("In the code below, two subsections are divided by a horizontal line. They communicate with each other via message passing, and they also have internal messaging."), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.pre([  ])(Deku_Graph_DOM_Shorthand.code([  ])(Deku_Graph_DOM_Shorthand.text("module Deku.Example.Docs.Example.Subgraph where\x0a\x0aimport Prelude\x0a\x0aimport Data.Either (Either(..))\x0aimport Data.Foldable (for_)\x0aimport Data.Hashable (class Hashable, hash)\x0aimport Data.Map (insert, singleton)\x0aimport Data.Tuple (fst, snd)\x0aimport Data.Tuple.Nested ((/\\))\x0aimport Deku.Change (ichange_)\x0aimport Deku.Control.Functions (iloop, (@!>))\x0aimport Deku.Control.Types (Frame0, Scene)\x0aimport Deku.Create (icreate)\x0aimport Deku.Graph.Attribute (Cb(..))\x0aimport Deku.Graph.DOM (AsSubgraph(..), SubgraphSig, root, xsubgraph, (:=))\x0aimport Deku.Graph.DOM as D\x0aimport Deku.Graph.DOM.Shorthand as S\x0aimport Deku.Interpret (class DOMInterpret, makeFFIDOMSnapshot)\x0aimport Deku.Run (defaultOptions, run)\x0aimport Effect (Effect)\x0aimport FRP.Event (subscribe)\x0aimport Web.DOM (Element)\x0aimport Web.HTML (window)\x0aimport Web.HTML.HTMLDocument (body)\x0aimport Web.HTML.HTMLElement (toElement)\x0aimport Web.HTML.Window (document)\x0a\x0adata Sgs = Sg0 | Sg1\x0aderive instance Eq Sgs\x0aderive instance Ord Sgs\x0ainstance Show Sgs where\x0a  show Sg0 = \"Sg0\"\x0a  show Sg1 = \"Sg1\"\x0ainstance Hashable Sgs where\x0a  hash = show >>> hash\x0a\x0asub :: (Sgs -> Effect Unit) -> SubgraphSig Sgs \"div\" Unit Unit\x0asub raise Sg0 =\x0a  ( \\_ push ->\x0a      ( icreate $ S.div []\x0a          ( { div1: D.div []\x0a                { button0: D.button\x0a                    [ D.OnClick := Cb (const $ raise Sg0)\x0a                    ]\x0a                    (S.text \"Send to B\")\x0a                , count0: D.div [] (S.text (\"A: 0\"))\x0a                , button1: D.button\x0a                    [ D.OnClick := Cb (const $ push unit)\x0a                    ]\x0a                    (S.text \"Send to C\")\x0a                , count1: D.div [] (S.text (\"C: 0\"))\x0a                }\x0a            , hr: D.hr [] {}\x0a            }\x0a          )\x0a      ) $> (0 /\\ 0)\x0a  ) @!> iloop \\e _ (a /\\ c) -> case e of\x0a    Left _ ->\x0a      let\x0a        new = (a + 1) /\\ c\x0a      in\x0a        ichange_\x0a          { \"div.div1.count0.t\": \"A: \" <> show (fst new)\x0a          } $> new\x0a    Right _ ->\x0a      let\x0a        new = a /\\ (c + 1)\x0a      in\x0a        ichange_\x0a          { \"div.div1.count1.t\": \"C: \" <> show (snd new)\x0a          } $> new\x0asub raise Sg1 =\x0a  ( \\_ push ->\x0a      ( icreate $ S.div []\x0a          ( { div1: D.div []\x0a                { button0: D.a\x0a                    [ D.OnClick := Cb (const $ raise Sg1)\x0a                    , D.Style := \"cursor:pointer;\"\x0a\x0a                    ]\x0a                    (S.text \"Send to A\")\x0a                , count0: D.div [] (S.text \"B: 0\")\x0a                , button1: D.a\x0a                    [ D.OnClick := Cb (const $ push unit)\x0a                    , D.Style := \"cursor:pointer;\"\x0a\x0a                    ]\x0a                    (S.text \"Send to D\")\x0a                , count1: D.div [] (S.text \"D: 0\")\x0a                }\x0a            }\x0a          )\x0a      ) $> (0 /\\ 0)\x0a  ) @!> iloop \\e _ (b /\\ d) -> case e of\x0a    Left _ ->\x0a      let\x0a        new = (b + 1) /\\ d\x0a      in\x0a        ichange_\x0a          { \"div.div1.count0.t\": \"B: \" <> show (fst new)\x0a          } $> new\x0a    Right _ ->\x0a      let\x0a        new = b /\\ (d + 1)\x0a      in\x0a        ichange_\x0a          { \"div.div1.count1.t\": \"D: \" <> show (snd new)\x0a          } $> new\x0a\x0ascene\x0a  :: forall env dom engine res\x0a   . Monoid res\x0a  => DOMInterpret dom engine\x0a  => Element\x0a  -> Scene env dom engine Frame0 Sgs res\x0ascene elt =\x0a  ( \\_ push ->\x0a      ( icreate $ root elt\x0a          { sub:\x0a              D.subgraph\x0a                ( insert Sg0 (pure unit)\x0a                    $ singleton Sg1 (pure unit)\x0a                )\x0a                (AsSubgraph (sub push))\x0a          }\x0a\x0a      )\x0a  ) @!> iloop \\e _ _ -> case e of\x0a    Left _ -> pure unit\x0a    Right Sg0 -> ichange_\x0a      { \"root.sub\": xsubgraph (singleton Sg1 (pure unit))\x0a      }\x0a    Right Sg1 -> ichange_\x0a      { \"root.sub\": xsubgraph (singleton Sg0 (pure unit))\x0a      }\x0a\x0amain :: Effect Unit\x0amain = do\x0a  b' <- window >>= document >>= body\x0a  for_ (toElement <$> b') \\elt -> do\x0a    ffi <- makeFFIDOMSnapshot\x0a    subscribe\x0a      ( run (pure unit) (pure unit) defaultOptions ffi\x0a          (scene elt)\x0a\x0a      )\x0a      (_.res >>> pure)\x0a"))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Here's what it produces:"), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.blockquote([  ])({
                              example: Deku_Graph_DOM.subgraph({
                                  reflectSymbol: function () {
                                      return "div";
                                  }
                              })(Data_Hashable.hashableInt)(Data_Map_Internal.singleton(0)(new Data_Maybe.Just(Data_Unit.unit)))(function (dictDOMInterpret1) {
                                  return sg(dictDOMInterpret1);
                              })
                          }), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Why subgraphs are fast")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("In the "), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.Events.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("events")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" section, we saw how Deku stays fast by using the PureScript compiler to keep track of which components needs to be rendered and which components don't. The same is true for subgraphs. Because they use a bi-drectional messaging channel that is decoupled from the rendering process, they can transmit information to each other very fast and never trigger a render. This keeps apps blazingly fast!"), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.text("In the following sections, we'll look at the anatomy of a subgraph as well as the bi-drectional communication mechanism they use.")), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Subgraph anatomy")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("Subgraphs are not unlike the root components we've been working with all along. There's only one important difference to be aware of: subgraphs receive an extra argument by which they are indexed. In the example above, the subgraphs are indexed by the type "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Sgs")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". This documentation works the same way: the pages are indexed by a type called "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Page")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". Each index can potentially yield a different subgraph. The only other caveat is that, unlike root components, subgraphs may "), new Data_Tuple.Tuple(Deku_Graph_DOM.span([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrSpan_StyleString)(Deku_Graph_DOM.Style.value)("font-weight: 800;") ])(Deku_Graph_DOM_Shorthand.text("not")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" use the root component in their graph. Doing this will fail at compile time. Other than that, subgraphs are exactly the same as graphs: each one is its own stream of DOMs that is constructed using primitives like ."), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("@!>")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("iloop")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("."), Data_Unit.unit))))))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Bubbling information up")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The way that you can bubble information up from a subgraph is the same exact way you work with events: by taking the argument with the signature"), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("(push -> Effect Unit)")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and passing it to a subgraph. When the subgraph calls it, the message is guaranteed to bubble up to the parent. If the parent is unmounted (ie if the subgraph triggers a long running task and is destroyed), it will simply be a no-op. A pusher can trickle down many layers of subgraphs, making communication from a deeply-nested subgraph to the top-level very fast. Plus, this does not trigger a render unless the receiving component asks for one."), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("In the example above, this is done by passing the subgraphs a "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("push")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" that they call "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("raise")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(". The term "), new Data_Tuple.Tuple(Deku_Graph_DOM.i([  ])(Deku_Graph_DOM_Shorthand.text("raise")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" is borrowed from Halogen and it serves the same purpose, except that unlike in Halogen, the raising can go up an arbitrary number of levels in one fell swoop instead of re-raising information through each level of the heirarchy."), Data_Unit.unit))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Top-down communication")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The same exact method of passing the  "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("push")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" argument can be used for top-down communication. A subgraph can push its own push argument to the pusher it receives, and the top-level can then hold onto it and use it for fast communication with a deeply-nested object. This allows for apps to create ad-hoc event busses, which in some performance-critical situations is often the fastest way for components to communicate with each other"), Data_Unit.unit))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("There is one major drawback, however, to top-down communication using a pusher. It's fairly rare that a subgraph will launch a task that completes after it and its parent. When this happen, it may be a couple network requests, but they result in no-ops (pushing into the void) and then everything wraps up nicely. Parents, on the other hand, will often exist much longer than any one subgraph as the graph evolves. This means that they will have to keep track of what subgraphs are present, which adds complicated internal accounting and is prone to errors."), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD9)()(Data_Typelevel_Num_Ops.divMod10D8D0)()(Data_Typelevel_Num_Ops.divMod10D9D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD0(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D9D0)()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD1(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD0(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD2(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD1(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD3(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD2(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD4(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD3(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD5(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD4(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD6(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD5(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD7(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD6(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD8(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD7(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posPosD9(Data_Typelevel_Num_Sets.posD1))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD8(Data_Typelevel_Num_Sets.posD1)))()(Data_Typelevel_Num_Ops.divMod10D1x(Data_Typelevel_Num_Sets.posNatD9(Data_Typelevel_Num_Sets.posD1))))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "18";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "17";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "16";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "15";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "14";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "13";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "12";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "11";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "10";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "9";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "8";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "7";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "6";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "5";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("A better method, though slightly less efficient, is to use the "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("env")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" parameter. The "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("env")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" is contained in the map passed as the first argument to "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("subgraph")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" and as the first argument to."), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("xsubgraph")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" as well. Whenever an "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("env")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" is present and set to "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Just")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" for a given key for the map, it will request one iteration of the loop from the subgraph. This is the "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Left")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" argument to the creation function and to "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("iloop")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" that we have thusfar ignored but now use in the example above. If the subgraph does not exist yet, it will be created. Inversely, sending "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("Nothing")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" to a key in the map will destroy that subgraph if it exists and otherwise be a no-op."), Data_Unit.unit))))))))))))))))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "4";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "3";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("While the use of "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("env")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" is slightly less efficient than the use of  "), new Data_Tuple.Tuple(Deku_Graph_DOM.code([  ])(Deku_Graph_DOM_Shorthand.text("push")), new Data_Tuple.Tuple(Deku_Graph_DOM.text("because each layer needs to send the message down successively, it does not cause the DOM to update unless explicitly asked in a loop. This means that it is still quite fast."), Data_Unit.unit))))))), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("The dynamic allocation of subgraphs makes it ideal for structures like lists. Furthermore, because HTML5 enforces excellent separation of content and layout via the CSS Grid, it is possible to have a single subgraph occupy entirely different parts of a webpage. Lastly, because each subgraph lives its own life upon creation, they can evolve to contain radically different content. They can even call themselves recursively, making them suitable for markdown parsers and other recursive structures."), Data_Unit.unit))), new Data_Tuple.Tuple(Deku_Graph_DOM.h2([  ])(Deku_Graph_DOM_Shorthand.text("Next steps")), new Data_Tuple.Tuple(Deku_Graph_DOM.p([  ])(Deku_Graph_DOM_Shorthand.span([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupUnit)()()({
                              reflectSymbol: function () {
                                  return "2";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "1";
                              }
                          })())()()({
                              reflectSymbol: function () {
                                  return "0";
                              }
                          })())(new Data_Tuple.Tuple(Deku_Graph_DOM.text("In addition to webpage rendering, Deku supports basic server-side rendering capabilities. Let's see how in the "), new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](Control_Apply.applySecond(Effect.applyEffect)(dpage(Deku_Example_Docs_Types.SSR.value))(Deku_Example_Docs_Util.scrollToTop))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("SSR section")), new Data_Tuple.Tuple(Deku_Graph_DOM.span([  ])(Deku_Graph_DOM_Shorthand.text(".")), Data_Unit.unit)))))), Data_Unit.unit)))))))))))))))))))))))
                      })
                  });
              };
          })(Deku_Control_Functions.freeze(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(dictDOMInterpret)(Deku_Control_Types.isSceneSubScene));
      };
  };
  exports["subgraphs"] = subgraphs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                      
  var ABehavior = function (x) {
      return x;
  };
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (e) {
                      return v(Data_Functor.map(dictFunctor)(function (v1) {
                          return function ($66) {
                              return v1(f($66));
                          };
                      })(e));
                  };
              };
          }
      };
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var behavior = ABehavior;
  var applyABehavior = function (dictFunctor) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (e) {
                      return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
                  };
              };
          },
          Functor0: function () {
              return functorABehavior(dictFunctor);
          }
      };
  };
  var applicativeABehavior = function (dictFunctor) {
      return {
          pure: function (a) {
              return function (e) {
                  return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
              };
          },
          Apply0: function () {
              return applyABehavior(dictFunctor);
          }
      };
  };
  exports["behavior"] = behavior;
  exports["sampleBy"] = sampleBy;
  exports["functorABehavior"] = functorABehavior;
  exports["applyABehavior"] = applyABehavior;
  exports["applicativeABehavior"] = applicativeABehavior;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Event.Time"] = $PS["FRP.Event.Time"] || {};
  var exports = $PS["FRP.Event.Time"];
  var Effect_Now = $PS["Effect.Now"];
  var FRP_Event = $PS["FRP.Event"];                            
  var withTime = function (e) {
      return FRP_Event.makeEvent(function (k) {
          return FRP_Event.subscribe(e)(function (value) {
              return function __do() {
                  var time = Effect_Now.now();
                  return k({
                      time: time,
                      value: value
                  })();
              };
          });
      });
  };
  exports["withTime"] = withTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FRP.Behavior.Time"] = $PS["FRP.Behavior.Time"] || {};
  var exports = $PS["FRP.Behavior.Time"];
  var Data_Functor = $PS["Data.Functor"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];                
  var instant = FRP_Behavior.behavior(function (e) {
      return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
          return v.value(v.time);
      })(FRP_Event_Time.withTime(e));
  });
  exports["instant"] = instant;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Run"] = $PS["Deku.Run"] || {};
  var exports = $PS["Deku.Run"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Deku_Control_Types = $PS["Deku.Control.Types"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Behavior_Time = $PS["FRP.Behavior.Time"];
  var FRP_Event = $PS["FRP.Event"];
  var run = function (dictMonoid) {
      return function (trigger) {
          return function (inWorld) {
              return function (v) {
                  return function (domInfo) {
                      return function (scene) {
                          return FRP_Event.makeEvent(function (reporter) {
                              return function __do() {
                                  var evt = FRP_Event.create();
                                  var currentScene = Effect_Ref["new"](scene)();
                                  var newWorld = Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(function (v1) {
                                      return function (v2) {
                                          return {
                                              world: v1,
                                              sysTime: v2
                                          };
                                      };
                                  })(inWorld))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_DateTime_Instant.unInstant)(FRP_Behavior_Time.instant));
                                  var eventAndEnv = FRP_Behavior.sampleBy(FRP_Event.eventIsEvent)(function (v1) {
                                      return function (b) {
                                          return {
                                              trigger: b,
                                              world: v1.world,
                                              sysTime: v1.sysTime
                                          };
                                      };
                                  })(newWorld)(trigger);
                                  var subFn = function (ee) {
                                      return function __do() {
                                          var sceneNow = Effect_Ref.read(currentScene)();
                                          var fromScene = Deku_Control_Types.oneFrame(sceneNow)(ee)(evt.push);
                                          var applied = Data_Functor.map(Data_Functor.functorArray)(Data_Function.applyFlipped(domInfo))(fromScene.instructions);
                                          Deku_Interpret.renderDOM(applied)();
                                          Effect_Ref.write(fromScene.next)(currentScene)();
                                          return reporter({
                                              res: fromScene.res
                                          })();
                                      };
                                  };
                                  var unsubscribe0 = FRP_Event.subscribe(eventAndEnv)(function ($8) {
                                      return subFn(Data_Either.Left.create($8));
                                  })();
                                  var unsubscribe1 = FRP_Event.subscribe(evt.event)(function ($9) {
                                      return subFn(Data_Either.Right.create($9));
                                  })();
                                  return Control_Apply.applySecond(Effect.applyEffect)(unsubscribe0)(unsubscribe1);
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var defaultOptions = {};
  exports["run"] = run;
  exports["defaultOptions"] = defaultOptions;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var body = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_body"]($9));
      };
  })();
  exports["body"] = body;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toElement = Unsafe_Coerce.unsafeCoerce;
  exports["toElement"] = toElement;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Deku.Example.Docs"] = $PS["Deku.Example.Docs"] || {};
  var exports = $PS["Deku.Example.Docs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Unit = $PS["Data.Unit"];
  var Deku_Change = $PS["Deku.Change"];
  var Deku_Control_Functions_Graph = $PS["Deku.Control.Functions.Graph"];
  var Deku_Control_Indexed = $PS["Deku.Control.Indexed"];
  var Deku_Create = $PS["Deku.Create"];
  var Deku_Example_Docs_Effects = $PS["Deku.Example.Docs.Effects"];
  var Deku_Example_Docs_Events = $PS["Deku.Example.Docs.Events"];
  var Deku_Example_Docs_HelloWorld = $PS["Deku.Example.Docs.HelloWorld"];
  var Deku_Example_Docs_Intro = $PS["Deku.Example.Docs.Intro"];
  var Deku_Example_Docs_SSR = $PS["Deku.Example.Docs.SSR"];
  var Deku_Example_Docs_SimpleComponent = $PS["Deku.Example.Docs.SimpleComponent"];
  var Deku_Example_Docs_Subgraphs = $PS["Deku.Example.Docs.Subgraphs"];
  var Deku_Example_Docs_Types = $PS["Deku.Example.Docs.Types"];
  var Deku_Graph_DOM = $PS["Deku.Graph.DOM"];
  var Deku_Graph_DOM_Shorthand = $PS["Deku.Graph.DOM.Shorthand"];
  var Deku_Interpret = $PS["Deku.Interpret"];
  var Deku_Run = $PS["Deku.Run"];
  var Deku_Util = $PS["Deku.Util"];
  var Effect = $PS["Effect"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var page = function (dpage) {
      return function (dictDOMInterpret) {
          return function (v) {
              if (v instanceof Deku_Example_Docs_Types.Intro) {
                  return Deku_Example_Docs_Intro.intro(dpage)(dictDOMInterpret);
              };
              if (v instanceof Deku_Example_Docs_Types.HelloWorld) {
                  return Deku_Example_Docs_HelloWorld.helloWorld(dpage)(dictDOMInterpret);
              };
              if (v instanceof Deku_Example_Docs_Types.SimpleComponent) {
                  return Deku_Example_Docs_SimpleComponent.simpleComponent(dpage)(dictDOMInterpret);
              };
              if (v instanceof Deku_Example_Docs_Types.Events) {
                  return Deku_Example_Docs_Events.events(dpage)(dictDOMInterpret);
              };
              if (v instanceof Deku_Example_Docs_Types.Effects) {
                  return Deku_Example_Docs_Effects.effects(dpage)(dictDOMInterpret);
              };
              if (v instanceof Deku_Example_Docs_Types.SSR) {
                  return Deku_Example_Docs_SSR.serverSide(dpage)(dictDOMInterpret);
              };
              if (v instanceof Deku_Example_Docs_Types.Subgraph) {
                  return Deku_Example_Docs_Subgraphs.subgraphs(dpage)(dictDOMInterpret);
              };
              throw new Error("Failed pattern match at Deku.Example.Docs (line 147, column 1 - line 147, column 67): " + [ dpage.constructor.name, v.constructor.name ]);
          };
      };
  };
  var scene = function (elt) {
      return Deku_Control_Functions_Graph.istart()(Data_Monoid.monoidUnit)(Deku_Interpret.effectfulDOMInterpret)(function (v) {
          return function (push) {
              return Data_Functor.voidLeft(Deku_Control_Indexed.functorIxDOM)(Deku_Create.icreate(Deku_Interpret.effectfulDOMInterpret)(Deku_Create.createAll())(Deku_Graph_DOM.root(elt)({
                  main: Deku_Graph_DOM.main([  ])({
                      topbar: Deku_Graph_DOM.nav([  ])(Deku_Graph_DOM_Shorthand.ul([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "6";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "5";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "4";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "3";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "2";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "1";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.li([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "1";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Deku_Example_Docs_Types.Intro.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Home")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" | "), Data_Unit.unit)))), new Data_Tuple.Tuple(Deku_Graph_DOM.li([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "1";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Deku_Example_Docs_Types.HelloWorld.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Hello world")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" | "), Data_Unit.unit)))), new Data_Tuple.Tuple(Deku_Graph_DOM.li([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "1";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Deku_Example_Docs_Types.SimpleComponent.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Component")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" | "), Data_Unit.unit)))), new Data_Tuple.Tuple(Deku_Graph_DOM.li([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "1";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Deku_Example_Docs_Types.Events.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Events")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" | "), Data_Unit.unit)))), new Data_Tuple.Tuple(Deku_Graph_DOM.li([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "1";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Deku_Example_Docs_Types.Effects.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Effects")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" | "), Data_Unit.unit)))), new Data_Tuple.Tuple(Deku_Graph_DOM.li([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "1";
                          }
                      })())()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Deku_Example_Docs_Types.Subgraph.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("Subgraphs")), new Data_Tuple.Tuple(Deku_Graph_DOM.text(" | "), Data_Unit.unit)))), new Data_Tuple.Tuple(Deku_Graph_DOM.li([  ])(Deku_Util.detup(Deku_Util.detupTuple(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Deku_Util.detupUnit)()()({
                          reflectSymbol: function () {
                              return "0";
                          }
                      })())(new Data_Tuple.Tuple(Deku_Graph_DOM.a([ Deku_Graph_DOM.attr(Deku_Graph_DOM.attrOnClickCb)(Deku_Graph_DOM.OnClick.value)(Data_Function["const"](push(Deku_Example_Docs_Types.SSR.value))), Deku_Graph_DOM.attr(Deku_Graph_DOM.attrA_StyleString)(Deku_Graph_DOM.Style.value)("cursor:pointer;") ])(Deku_Graph_DOM_Shorthand.text("SSR")), Data_Unit.unit))), Data_Unit.unit)))))))))),
                      page: Deku_Graph_DOM.subgraph({
                          reflectSymbol: function () {
                              return "head";
                          }
                      })(Deku_Example_Docs_Types.hashablePage)(Data_Map_Internal.singleton(Deku_Example_Docs_Types.Intro.value)(new Data_Maybe.Just(Data_Unit.unit)))(function (dictDOMInterpret) {
                          return page(push)(dictDOMInterpret);
                      })
                  })
              })))(Deku_Example_Docs_Types.Intro.value);
          };
      })(Deku_Control_Functions_Graph.iloop(Data_Monoid.monoidUnit)()(Deku_Interpret.effectfulDOMInterpret)(function (e) {
          return function (v) {
              return function (oldPg) {
                  if (e instanceof Data_Either.Left) {
                      return Control_Applicative.pure(Deku_Control_Indexed.applicativeIxDOM)(oldPg);
                  };
                  if (e instanceof Data_Either.Right) {
                      return Data_Functor.voidRight(Deku_Control_Indexed.functorIxDOM)(e.value0)(Control_Applicative.when(Deku_Control_Indexed.applicativeIxDOM)(Data_Eq.notEq(Deku_Example_Docs_Types.eqPage)(oldPg)(e.value0))(Deku_Change.ichange_(Deku_Interpret.effectfulDOMInterpret)(Deku_Change.change_All()(Deku_Change.changeRL_Cons({
                          reflectSymbol: function () {
                              return "root.main.page";
                          }
                      })()()(Deku_Change.changeSubgraph1({
                          reflectSymbol: function () {
                              return "root.main.page";
                          }
                      })({
                          reflectSymbol: function () {
                              return "head";
                          }
                      })())(Deku_Change.changeRL_Nil)))({
                          "root.main.page": Deku_Graph_DOM.xsubgraph(Deku_Example_Docs_Types.hashablePage)(Data_Map_Internal.insert(Deku_Example_Docs_Types.ordPage)(e.value0)(new Data_Maybe.Just(Data_Unit.unit))(Data_Map_Internal.singleton(oldPg)(Data_Maybe.Nothing.value)))
                      })));
                  };
                  throw new Error("Failed pattern match at Deku.Example.Docs (line 131, column 25 - line 143, column 16): " + [ e.constructor.name ]);
              };
          };
      }));
  };
  var main = function __do() {
      var b$prime = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.body)();
      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLElement.toElement)(b$prime))(function (b) {
          return function __do() {
              var ffi = Deku_Interpret.makeFFIDOMSnapshot();
              return FRP_Event.subscribe(Deku_Run.run(Data_Monoid.monoidUnit)(Control_Applicative.pure(FRP_Event.applicativeEvent)(Data_Unit.unit))(Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(Data_Unit.unit))(Deku_Run.defaultOptions)(ffi)(scene(b)))(function (v) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              })();
          };
      })();
  };
  exports["scene"] = scene;
  exports["page"] = page;
  exports["main"] = main;
})(PS);
PS["Deku.Example.Docs"].main();